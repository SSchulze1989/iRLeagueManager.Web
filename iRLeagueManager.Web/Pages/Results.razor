@page "/{LeagueName}/Results/Session/{SessionId:long}"
@page "/{LeagueName}/Results/Season/{SeasonId:long}"
@page "/{LeagueName}/Results"
@using System.ComponentModel
@using Microsoft.AspNetCore.WebUtilities
@using Microsoft.EntityFrameworkCore.Query
@using Microsoft.Extensions.Primitives
@using System.Linq.Expressions
@using iRLeagueApiCore.Communication.Models
@using iRLeagueManager.Web.ViewModels
@attribute [Authorize]
@inherits MvvmComponentBase
@inject LeagueApiService apiService
@inject ResultsPageViewModel vm
@inject NavigationManager navigationManager

<div style="display:inline-block">
    <div style="display:inline-block">
        <h3>Results</h3>
    </div>
    @if (Bind(vm, x => x.Loading))
    {
        <div class="lds-ring">
            <div></div>
        </div>
    }
</div>

<div>
    <div>
        <select @bind="vm.SelectedSessionId">
            @foreach((var session, var index) in @Bind(vm, x => x.SessionList).Select((x, i) => (x, i)))
            {
                <option value="@session.SessionId">@((index + 1).ToString("00")). @Bind(session, x => x.Date) - @Bind(session, x => x.Name)</option>
            }
        </select>
    </div>
    <div>
        @if (@Bind(vm, x => x.Results)?.Count == 0)
        {
            <div class="results-tab">
                <p class="results-scoring"><em>No Results</em></p>
            </div>
        }
        @foreach(var result in @Bind(vm, x => x.Results))
        {
            <div class="results-tab" id="results-scoring-@Bind(result, x => x.ScoringName)">
                <p class="results-scoring">@Bind(result, x => x.ScoringName)</p>
                <table class="table alternate">
                    <thead>
                        <tr class="results-head">
                            <th @onclick="() => SetOrderProperty(result, row => row.FinalPosition)">Pos.</th>
                            <th @onclick="() => SetOrderProperty(result, row => row.FinalPositionChange)">Chg.</th>
                            <th @onclick="() => SetOrderProperty(result, row => row.StartPosition)">Start</th>
                            <th @onclick="() => SetOrderProperty(result, row => row.Firstname)">Name</th>
                            <th @onclick="() => SetOrderProperty(result, row => row.TeamName)">Team</th>
                            <th @onclick="() => SetOrderProperty(result, row => row.QualifyingTime)">Qualy Lap</th>
                            <th @onclick="() => SetOrderProperty(result, row => row.FastestLapTime)">Fastest Lap</th>
                            <th @onclick="() => SetOrderProperty(result, row => row.AvgLapTime)">Avg. Lap</th>
                            <th @onclick="() => SetOrderProperty(result, row => row.Interval)">Interval</th>
                            <th @onclick="() => SetOrderProperty(result, row => row.LeadLaps)">Laps Lead</th>
                            <th @onclick="() => SetOrderProperty(result, row => row.CompletedLaps)">Laps Compl.</th>
                            <th @onclick="() => SetOrderProperty(result, row => row.RacePoints)">Race Pts.</th>
                            <th @onclick="() => SetOrderProperty(result, row => row.BonusPoints)">Bonus Pts.</th>
                            <th @onclick="() => SetOrderProperty(result, row => row.PenaltyPoints)">Penalty</th>
                            <th @onclick="() => SetOrderProperty(result, row => row.Incidents)">Incs.</th>
                            <th @onclick="() => SetOrderProperty(result, row => row.TotalPoints)">Total Pts.</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach(var row in result.ResultRows)
                        {
                            <tr class="results-row">
                                <td>@row.FinalPosition</td>
                                <td>@row.FinalPositionChange</td>
                                <td>@row.StartPosition</td>
                                <td>@row.Firstname @row.Lastname</td>
                                <td>@row.TeamName</td>
                                <td>@row.QualifyingTime</td>
                                <td>@row.FastestLapTime (@row.FastLapNr)</td>
                                <td>@row.AvgLapTime</td>
                                <td>@row.Interval</td>
                                <td>@row.LeadLaps</td>
                                <td>@row.CompletedLaps</td>
                                <td>@row.RacePoints</td>
                                <td>@row.BonusPoints</td>
                                <td>@row.PenaltyPoints</td>
                                <td>@row.Incidents</td>
                                <td>@row.TotalPoints</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        }
    </div>
</div>

@code {
    [Parameter]
    public string? LeagueName { get; set; }
    [Parameter]
    public long? SeasonId { get; set; }
    [Parameter]
    public long? SessionId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        vm.SelectedSessionChanged += OnSessionChanged;
        await Task.FromResult(true);
    }

    protected override void OnParametersSet()
    {
        // if routed directly to /Results page without season or session set:
        // 1. Compare previous season to current season -> if seaon changed, trigger reload
        // 2. If season is the same keep session as selected
        if (SeasonId == null && SessionId == null && vm.LoadedSeasonId == apiService.CurrentSeason?.Id)
        {
            OnSessionChanged(vm.SelectedSessionId);
        }
    }

    private void OnSessionChanged(long? sessionId)
    {
        if (sessionId != null)
        {
            navigationManager.NavigateTo($"./{LeagueName}/Results/Session/{sessionId}");
        }
    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender == false) return;

        if (LeagueName == null)
        {
            return;
        }

        // set league state
        await apiService.SetCurrentLeagueAsync(LeagueName);
        await LoadPage(LeagueName);
    }

    private async Task LoadPage(string leagueName)
    {
        if (SessionId != null)
        {
            await LoadFromSessionAsync(leagueName, SessionId.Value);
            return;
        }

        if (SeasonId != null)
        {
            await LoadFromSeasonAsync(leagueName, SeasonId.Value);
            return;
        }

        if (apiService.CurrentSeason == null)
        {
            var lastSeason = apiService.Shared.SeasonList.LastOrDefault();
            if (lastSeason == null)
            {
                return;
            }
            await apiService.SetCurrentSeasonAsync(leagueName, lastSeason.SeasonId);
        }

        if (apiService.CurrentSeason != null)
        {
            SeasonId = apiService.CurrentSeason.Id;
            await LoadFromSeasonAsync(leagueName, SeasonId.Value);
            return;
        }
    }

    private async Task LoadFromSessionAsync(string leagueName, long sessionId)
    {
        // load results data
        await vm.LoadFromSessionAsync(sessionId);

        // set season state
        if (vm.Results.Any())
        {
            var seasonId = vm.Results.First().SeasonId;
            await apiService.SetCurrentSeasonAsync(leagueName, seasonId);
            await vm.LoadSessionListAsync();
        }
    }

    private async Task LoadFromSeasonAsync(string leagueName, long seasonId)
    {
        // load session list
        await apiService.SetCurrentSeasonAsync(leagueName, seasonId);
        await vm.LoadSessionListAsync();

        // select last session with result
        var lastResultSession = vm.SessionList.LastOrDefault(x => x.HasResult);
        if (lastResultSession != null)
        {
            vm.SelectedSessionId = lastResultSession.SessionId;
        }
    }

    private void SetOrderProperty(ResultViewModel result, Expression<Func<ResultRowModel, IComparable>> selector, bool descending = false)
    {
        result.OrderByPropertySelector = selector;
    }
}
