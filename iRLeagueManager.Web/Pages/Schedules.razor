@page "/{LeagueName}/Schedules/Season/{SeasonId:long}"
@using iRLeagueManager.Web.ViewModels
@attribute [Authorize]
@inherits MvvmComponentBase
@inject LeagueApiService apiService
@inject SchedulesPageViewModel vm
@inject NavigationManager navigationManager

<div style="display:inline-block">
    <div style="display:inline-block">
        <h3>Schedules</h3>
    </div>
    @if (Bind(vm, x => x.Loading))
    {
        <div class="lds-ring">
            <div></div>
        </div>
    }
</div>

<div>
    @foreach(var schedule in @Bind(vm, x => x.Schedules))
    {
        <div class="container">
            <div style="display:inline-block">
                <div style="display:inline-block">
                    <h3>@Bind(schedule, x => x.Name)</h3>
                </div>
                @if (Bind(schedule, x => x.Loading))
                {
                    <div class="lds-ring">
                        <div></div>
                    </div>
                }
                else 
                {
                    <table class="table alternate select-table">
                        <thead>
                            <tr>
                                <th>Nr.</th>
                                <th>Date</th>
                                <th>Track</th>
                                <th>Laps</th>
                                <th>Start</th>
                                <th>Practice</th>
                                <th>Qualy</th>
                                <th>Race</th>
                            </tr>
                        </thead>
                        <tbody>
                        @foreach((var session, var index) in @Bind(schedule, x => x.Sessions).Select((x, i) => (x, i)))
                        {
                            var sessionId = session.SessionId;
                            <tr @onclick="e => OnTableRowClick(sessionId)">
                                <td>@(index + 1).</td>
                                <td>@Bind(session, x => x.Date).ToString(@"dd:MM:yyyy")</td>
                                <td>@Bind(session, x => x.TrackId)</td>
                                <td>@(Bind(session, x => x.Race)?.Laps ?? 0)</td>
                                <td>@Bind(session, x => x.SessionStart)</td>
                                <td>@((Bind(session, x => x.Practice)?.Duration.ToString() ?? "-").ToString())</td>
                                <td>@((Bind(session, x => x.Qualifying)?.Duration.ToString() ?? "-").ToString())</td>
                                <td>@((Bind(session, x => x.Race)?.Duration.ToString() ?? "-").ToString())</td>
                            </tr>
                        }
                        </tbody>
                    </table>
                }
            </div>
        </div>
    }
</div>

@code {
    [Parameter]
    public string LeagueName { get; set; } = string.Empty;
    [Parameter]
    public long SeasonId { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender == false) return;

        // set season state
        if (SeasonId != 0)
        {
            await apiService.SetCurrentSeasonAsync(LeagueName, SeasonId);
        }

        // load schedules data
        if (apiService.CurrentSeason == null)
        {
            return;
        }

        await vm.Load();
        // load sessions to display
        foreach(var schedule in vm.Schedules)
        {
            await schedule.LoadSessions();
        }
    }

    private void OnTableRowClick(long sessionId)
    {
        navigationManager.NavigateTo($"{LeagueName}/Results/Session/{sessionId}");
    }
}
