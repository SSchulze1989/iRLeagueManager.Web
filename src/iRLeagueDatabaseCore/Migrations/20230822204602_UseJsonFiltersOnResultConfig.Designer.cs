// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using iRLeagueDatabaseCore.Models;

#nullable disable

namespace iRLeagueDatabaseCore.Migrations
{
    [DbContext(typeof(LeagueDbContext))]
    [Migration("20230822204602_UseJsonFiltersOnResultConfig")]
    partial class UseJsonFiltersOnResultConfig
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("Latin1_General_CI_AS")
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("IncidentReviewEntityMemberEntity", b =>
                {
                    b.Property<long>("InvolvedMembersId")
                        .HasColumnType("bigint");

                    b.Property<long>("InvolvedReviewsLeagueId")
                        .HasColumnType("bigint");

                    b.Property<long>("InvolvedReviewsReviewId")
                        .HasColumnType("bigint");

                    b.HasKey("InvolvedMembersId", "InvolvedReviewsLeagueId", "InvolvedReviewsReviewId");

                    b.HasIndex("InvolvedReviewsLeagueId", "InvolvedReviewsReviewId");

                    b.ToTable("IncidentReviewsInvolvedMembers", (string)null);
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.AcceptedReviewVoteEntity", b =>
                {
                    b.Property<long>("LeagueId")
                        .HasColumnType("bigint");

                    b.Property<long>("ReviewVoteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<long?>("ImportId")
                        .HasColumnType("bigint");

                    b.Property<long?>("MemberAtFaultId")
                        .HasColumnType("bigint");

                    b.Property<long>("ReviewId")
                        .HasColumnType("bigint");

                    b.Property<long?>("VoteCategoryId")
                        .HasColumnType("bigint");

                    b.HasKey("LeagueId", "ReviewVoteId");

                    b.HasAlternateKey("ReviewVoteId");

                    b.HasIndex("MemberAtFaultId");

                    b.HasIndex("ReviewId");

                    b.HasIndex("VoteCategoryId");

                    b.HasIndex("LeagueId", "ReviewId");

                    b.HasIndex("LeagueId", "VoteCategoryId");

                    b.ToTable("AcceptedReviewVotes");
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.AddPenaltyEntity", b =>
                {
                    b.Property<long>("LeagueId")
                        .HasColumnType("bigint");

                    b.Property<long>("AddPenaltyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Corner")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Lap")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Reason")
                        .HasMaxLength(2048)
                        .HasColumnType("varchar(2048)");

                    b.Property<long>("ScoredResultRowId")
                        .HasColumnType("bigint");

                    b.Property<string>("Value")
                        .HasColumnType("json");

                    b.HasKey("LeagueId", "AddPenaltyId");

                    b.HasAlternateKey("AddPenaltyId");

                    b.HasIndex("LeagueId", "ScoredResultRowId");

                    b.ToTable("AddPenaltys");
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.AutoPenaltyConfigEntity", b =>
                {
                    b.Property<long>("LeagueId")
                        .HasColumnType("bigint");

                    b.Property<long>("PenaltyConfigId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Conditions")
                        .IsRequired()
                        .HasColumnType("json");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<long>("PointRuleId")
                        .HasColumnType("bigint");

                    b.Property<int>("Points")
                        .HasColumnType("int");

                    b.Property<int>("Positions")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("Time")
                        .HasColumnType("time(6)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("LeagueId", "PenaltyConfigId");

                    b.HasAlternateKey("PenaltyConfigId");

                    b.HasIndex("LeagueId", "PointRuleId");

                    b.ToTable("AutoPenaltyConfigs", (string)null);
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.ChampionshipEntity", b =>
                {
                    b.Property<long>("LeagueId")
                        .HasColumnType("bigint");

                    b.Property<long>("ChampionshipId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("CreatedByUserId")
                        .HasColumnType("longtext");

                    b.Property<string>("CreatedByUserName")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DisplayName")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastModifiedByUserId")
                        .HasColumnType("longtext");

                    b.Property<string>("LastModifiedByUserName")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .HasMaxLength(80)
                        .HasColumnType("varchar(80)");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("LeagueId", "ChampionshipId");

                    b.HasAlternateKey("ChampionshipId");

                    b.ToTable("Championships", (string)null);
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.ChampSeasonEntity", b =>
                {
                    b.Property<long>("LeagueId")
                        .HasColumnType("bigint");

                    b.Property<long>("ChampSeasonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long>("ChampionshipId")
                        .HasColumnType("bigint");

                    b.Property<string>("CreatedByUserId")
                        .HasColumnType("longtext");

                    b.Property<string>("CreatedByUserName")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("DefaultResultConfigId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastModifiedByUserId")
                        .HasColumnType("longtext");

                    b.Property<string>("LastModifiedByUserName")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long>("SeasonId")
                        .HasColumnType("bigint");

                    b.Property<long?>("StandingConfigId")
                        .HasColumnType("bigint");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("LeagueId", "ChampSeasonId");

                    b.HasAlternateKey("ChampSeasonId");

                    b.HasIndex("LeagueId", "ChampionshipId");

                    b.HasIndex("LeagueId", "DefaultResultConfigId");

                    b.HasIndex("LeagueId", "SeasonId");

                    b.HasIndex("LeagueId", "StandingConfigId");

                    b.ToTable("ChampSeasons", (string)null);
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.CustomIncidentEntity", b =>
                {
                    b.Property<long>("LeagueId")
                        .HasColumnType("bigint");

                    b.Property<long>("IncidentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<int>("Index")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .HasColumnType("longtext");

                    b.HasKey("LeagueId", "IncidentId");

                    b.HasAlternateKey("IncidentId");

                    b.ToTable("CustomIncidents");
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.DriverStatisticRowEntity", b =>
                {
                    b.Property<long>("LeagueId")
                        .HasColumnType("bigint");

                    b.Property<long>("StatisticSetId")
                        .HasColumnType("bigint");

                    b.Property<long>("MemberId")
                        .HasColumnType("bigint");

                    b.Property<double>("AvgFinalPosition")
                        .HasColumnType("double");

                    b.Property<double>("AvgFinishPosition")
                        .HasColumnType("double");

                    b.Property<double>("AvgIRating")
                        .HasColumnType("double");

                    b.Property<double>("AvgIncidentsPerKm")
                        .HasColumnType("double");

                    b.Property<double>("AvgIncidentsPerLap")
                        .HasColumnType("double");

                    b.Property<double>("AvgIncidentsPerRace")
                        .HasColumnType("double");

                    b.Property<double>("AvgPenaltyPointsPerKm")
                        .HasColumnType("double");

                    b.Property<double>("AvgPenaltyPointsPerLap")
                        .HasColumnType("double");

                    b.Property<double>("AvgPenaltyPointsPerRace")
                        .HasColumnType("double");

                    b.Property<double>("AvgPointsPerRace")
                        .HasColumnType("double");

                    b.Property<double>("AvgSRating")
                        .HasColumnType("double");

                    b.Property<double>("AvgStartPosition")
                        .HasColumnType("double");

                    b.Property<int>("BestFinalPosition")
                        .HasColumnType("int");

                    b.Property<double>("BestFinishPosition")
                        .HasColumnType("double");

                    b.Property<double>("BestStartPosition")
                        .HasColumnType("double");

                    b.Property<double>("BonusPoints")
                        .HasColumnType("double");

                    b.Property<int>("CleanestDriverAwards")
                        .HasColumnType("int");

                    b.Property<double>("CompletedLaps")
                        .HasColumnType("double");

                    b.Property<int>("CurrentSeasonPosition")
                        .HasColumnType("int");

                    b.Property<double>("DrivenKm")
                        .HasColumnType("double");

                    b.Property<int>("EndIRating")
                        .HasColumnType("int");

                    b.Property<double>("EndSRating")
                        .HasColumnType("double");

                    b.Property<int>("FastestLaps")
                        .HasColumnType("int");

                    b.Property<DateTime?>("FirstRaceDate")
                        .HasColumnType("datetime");

                    b.Property<int>("FirstRaceFinalPosition")
                        .HasColumnType("int");

                    b.Property<double>("FirstRaceFinishPosition")
                        .HasColumnType("double");

                    b.Property<long?>("FirstRaceId")
                        .HasColumnType("bigint");

                    b.Property<double>("FirstRaceStartPosition")
                        .HasColumnType("double");

                    b.Property<long?>("FirstResultRowId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("FirstSessionDate")
                        .HasColumnType("datetime");

                    b.Property<long?>("FirstSessionId")
                        .HasColumnType("bigint");

                    b.Property<int>("HardChargerAwards")
                        .HasColumnType("int");

                    b.Property<double>("Incidents")
                        .HasColumnType("double");

                    b.Property<int>("IncidentsUnderInvestigation")
                        .HasColumnType("int");

                    b.Property<int>("IncidentsWithPenalty")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastRaceDate")
                        .HasColumnType("datetime");

                    b.Property<int>("LastRaceFinalPosition")
                        .HasColumnType("int");

                    b.Property<double>("LastRaceFinishPosition")
                        .HasColumnType("double");

                    b.Property<long?>("LastRaceId")
                        .HasColumnType("bigint");

                    b.Property<double>("LastRaceStartPosition")
                        .HasColumnType("double");

                    b.Property<long?>("LastResultRowId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("LastSessionDate")
                        .HasColumnType("datetime");

                    b.Property<long?>("LastSessionId")
                        .HasColumnType("bigint");

                    b.Property<double>("LeadingKm")
                        .HasColumnType("double");

                    b.Property<double>("LeadingLaps")
                        .HasColumnType("double");

                    b.Property<double>("PenaltyPoints")
                        .HasColumnType("double");

                    b.Property<int>("Poles")
                        .HasColumnType("int");

                    b.Property<double>("RacePoints")
                        .HasColumnType("double");

                    b.Property<int>("Races")
                        .HasColumnType("int");

                    b.Property<int>("RacesCompleted")
                        .HasColumnType("int");

                    b.Property<int>("RacesInPoints")
                        .HasColumnType("int");

                    b.Property<int>("StartIRating")
                        .HasColumnType("int");

                    b.Property<double>("StartSRating")
                        .HasColumnType("double");

                    b.Property<int>("Titles")
                        .HasColumnType("int");

                    b.Property<int>("Top10")
                        .HasColumnType("int");

                    b.Property<int>("Top15")
                        .HasColumnType("int");

                    b.Property<int>("Top20")
                        .HasColumnType("int");

                    b.Property<int>("Top25")
                        .HasColumnType("int");

                    b.Property<int>("Top3")
                        .HasColumnType("int");

                    b.Property<int>("Top5")
                        .HasColumnType("int");

                    b.Property<double>("TotalPoints")
                        .HasColumnType("double");

                    b.Property<int>("Wins")
                        .HasColumnType("int");

                    b.Property<int>("WorstFinalPosition")
                        .HasColumnType("int");

                    b.Property<double>("WorstFinishPosition")
                        .HasColumnType("double");

                    b.Property<double>("WorstStartPosition")
                        .HasColumnType("double");

                    b.HasKey("LeagueId", "StatisticSetId", "MemberId");

                    b.HasIndex("MemberId");

                    b.HasIndex("StatisticSetId");

                    b.HasIndex("LeagueId", "FirstRaceId");

                    b.HasIndex("LeagueId", "FirstResultRowId");

                    b.HasIndex("LeagueId", "FirstSessionId");

                    b.HasIndex("LeagueId", "LastRaceId");

                    b.HasIndex("LeagueId", "LastResultRowId");

                    b.HasIndex("LeagueId", "LastSessionId");

                    b.ToTable("DriverStatisticRows");
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.EventEntity", b =>
                {
                    b.Property<long>("LeagueId")
                        .HasColumnType("bigint");

                    b.Property<long>("EventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("CreatedByUserId")
                        .HasColumnType("longtext");

                    b.Property<string>("CreatedByUserName")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime");

                    b.Property<long>("Duration")
                        .HasColumnType("bigint");

                    b.Property<string>("EventType")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<long?>("ImportId")
                        .HasColumnType("bigint");

                    b.Property<string>("IrResultLink")
                        .HasColumnType("longtext");

                    b.Property<string>("IrSessionId")
                        .HasColumnType("longtext");

                    b.Property<string>("LastModifiedByUserId")
                        .HasColumnType("longtext");

                    b.Property<string>("LastModifiedByUserName")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<long>("ScheduleId")
                        .HasColumnType("bigint");

                    b.Property<long?>("TrackId")
                        .HasColumnType("bigint");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("LeagueId", "EventId");

                    b.HasAlternateKey("EventId");

                    b.HasIndex("TrackId");

                    b.HasIndex("LeagueId", "ScheduleId");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.EventResultConfigs", b =>
                {
                    b.Property<long>("EventRefId")
                        .HasColumnType("bigint");

                    b.Property<long>("LeagueId")
                        .HasColumnType("bigint");

                    b.Property<long>("ResultConfigRefId")
                        .HasColumnType("bigint");

                    b.HasKey("EventRefId", "LeagueId", "ResultConfigRefId");

                    b.HasIndex("LeagueId", "EventRefId");

                    b.HasIndex("LeagueId", "ResultConfigRefId");

                    b.ToTable("EventResultConfigs");
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.EventResultEntity", b =>
                {
                    b.Property<long>("LeagueId")
                        .HasColumnType("bigint");

                    b.Property<long>("EventId")
                        .HasColumnType("bigint");

                    b.Property<string>("CreatedByUserId")
                        .HasColumnType("longtext");

                    b.Property<string>("CreatedByUserName")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("LastModifiedByUserId")
                        .HasColumnType("longtext");

                    b.Property<string>("LastModifiedByUserName")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<bool>("RequiresRecalculation")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("LeagueId", "EventId");

                    b.HasIndex("EventId");

                    b.ToTable("EventResults");
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.FilterOptionEntity", b =>
                {
                    b.Property<long>("LeagueId")
                        .HasColumnType("bigint");

                    b.Property<long>("FilterOptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Conditions")
                        .IsRequired()
                        .HasColumnType("json");

                    b.Property<string>("CreatedByUserId")
                        .HasColumnType("longtext");

                    b.Property<string>("CreatedByUserName")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("LastModifiedByUserId")
                        .HasColumnType("longtext");

                    b.Property<string>("LastModifiedByUserName")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<long?>("PointFilterResultConfigId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ResultFilterResultConfigId")
                        .HasColumnType("bigint");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("LeagueId", "FilterOptionId");

                    b.HasAlternateKey("FilterOptionId");

                    b.HasIndex("LeagueId", "PointFilterResultConfigId");

                    b.HasIndex("LeagueId", "ResultFilterResultConfigId");

                    b.ToTable("FilterOptions");
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.IncidentReviewEntity", b =>
                {
                    b.Property<long>("LeagueId")
                        .HasColumnType("bigint");

                    b.Property<long>("ReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("AuthorName")
                        .HasColumnType("longtext");

                    b.Property<string>("AuthorUserId")
                        .HasColumnType("longtext");

                    b.Property<string>("Corner")
                        .HasColumnType("longtext");

                    b.Property<string>("CreatedByUserId")
                        .HasColumnType("longtext");

                    b.Property<string>("CreatedByUserName")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("FullDescription")
                        .HasColumnType("longtext");

                    b.Property<long?>("ImportId")
                        .HasColumnType("bigint");

                    b.Property<string>("IncidentKind")
                        .HasColumnType("longtext");

                    b.Property<string>("IncidentNr")
                        .HasColumnType("longtext");

                    b.Property<string>("LastModifiedByUserId")
                        .HasColumnType("longtext");

                    b.Property<string>("LastModifiedByUserName")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("OnLap")
                        .HasColumnType("longtext");

                    b.Property<string>("ResultLongText")
                        .HasColumnType("longtext");

                    b.Property<long>("SessionId")
                        .HasColumnType("bigint");

                    b.Property<long>("TimeStamp")
                        .HasColumnType("bigint");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("LeagueId", "ReviewId");

                    b.HasAlternateKey("ReviewId");

                    b.HasIndex("SessionId");

                    b.HasIndex("LeagueId", "SessionId");

                    b.ToTable("IncidentReviews");
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.IRSimSessionDetailsEntity", b =>
                {
                    b.Property<long>("LeagueId")
                        .HasColumnType("bigint");

                    b.Property<long>("SessionDetailsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Category")
                        .HasColumnType("longtext");

                    b.Property<string>("ConfigName")
                        .HasColumnType("longtext");

                    b.Property<int>("CornersPerLap")
                        .HasColumnType("int");

                    b.Property<int>("DamageModel")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("datetime");

                    b.Property<long>("EventAverageLap")
                        .HasColumnType("bigint");

                    b.Property<long>("EventId")
                        .HasColumnType("bigint");

                    b.Property<int>("EventLapsComplete")
                        .HasColumnType("int");

                    b.Property<int>("EventStrengthOfField")
                        .HasColumnType("int");

                    b.Property<int>("Fog")
                        .HasColumnType("int");

                    b.Property<int>("IRRaceWeek")
                        .HasColumnType("int");

                    b.Property<long>("IRSeasonId")
                        .HasColumnType("bigint");

                    b.Property<string>("IRSeasonName")
                        .HasColumnType("longtext");

                    b.Property<int>("IRSeasonQuarter")
                        .HasColumnType("int");

                    b.Property<int>("IRSeasonYear")
                        .HasColumnType("int");

                    b.Property<long>("IRSessionId")
                        .HasColumnType("bigint");

                    b.Property<long>("IRSubsessionId")
                        .HasColumnType("bigint");

                    b.Property<int>("IRTrackId")
                        .HasColumnType("int");

                    b.Property<double>("KmDistPerLap")
                        .HasColumnType("double");

                    b.Property<bool>("LeaveMarbles")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("LicenseCategory")
                        .HasColumnType("int");

                    b.Property<int>("MaxWeeks")
                        .HasColumnType("int");

                    b.Property<int>("NumCautionLaps")
                        .HasColumnType("int");

                    b.Property<int>("NumCautions")
                        .HasColumnType("int");

                    b.Property<int>("NumLeadChanges")
                        .HasColumnType("int");

                    b.Property<int>("PracticeGripCompound")
                        .HasColumnType("int");

                    b.Property<int>("PracticeRubber")
                        .HasColumnType("int");

                    b.Property<int>("QualifyGripCompund")
                        .HasColumnType("int");

                    b.Property<int>("QualifyRubber")
                        .HasColumnType("int");

                    b.Property<int>("RaceGripCompound")
                        .HasColumnType("int");

                    b.Property<int>("RaceRubber")
                        .HasColumnType("int");

                    b.Property<int>("RelHumidity")
                        .HasColumnType("int");

                    b.Property<string>("SessionName")
                        .HasColumnType("longtext");

                    b.Property<long>("SimStartUtcOffset")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("SimStartUtcTime")
                        .HasColumnType("datetime");

                    b.Property<int>("Skies")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StartTime")
                        .HasColumnType("datetime");

                    b.Property<int>("TempUnits")
                        .HasColumnType("int");

                    b.Property<int>("TempValue")
                        .HasColumnType("int");

                    b.Property<int>("TimeOfDay")
                        .HasColumnType("int");

                    b.Property<int>("TrackCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("TrackName")
                        .HasColumnType("longtext");

                    b.Property<int>("WarmupGripCompound")
                        .HasColumnType("int");

                    b.Property<int>("WarmupRubber")
                        .HasColumnType("int");

                    b.Property<int>("WeatherType")
                        .HasColumnType("int");

                    b.Property<int>("WeatherVarInitial")
                        .HasColumnType("int");

                    b.Property<int>("WeatherVarOngoing")
                        .HasColumnType("int");

                    b.Property<int>("WindDir")
                        .HasColumnType("int");

                    b.Property<int>("WindUnits")
                        .HasColumnType("int");

                    b.HasKey("LeagueId", "SessionDetailsId");

                    b.HasAlternateKey("SessionDetailsId");

                    b.HasIndex("LeagueId", "EventId");

                    b.ToTable("IRSimSessionDetails");
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.LeagueEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("CreatedByUserId")
                        .HasColumnType("longtext");

                    b.Property<string>("CreatedByUserName")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("DescriptionPlain")
                        .HasColumnType("longtext");

                    b.Property<bool>("EnableProtests")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("Expires")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsInitialized")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastModifiedByUserId")
                        .HasColumnType("longtext");

                    b.Property<string>("LastModifiedByUserName")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("LeaguePublic")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(85)
                        .HasColumnType("varchar(85)");

                    b.Property<string>("NameFull")
                        .HasColumnType("longtext");

                    b.Property<long>("ProtestCoolDownPeriod")
                        .HasColumnType("bigint");

                    b.Property<long>("ProtestsClosedAfter")
                        .HasColumnType("bigint");

                    b.Property<int>("ProtestsPublic")
                        .HasColumnType("int");

                    b.Property<int>("Subscription")
                        .HasColumnType("int");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasAlternateKey("Name");

                    b.ToTable("Leagues");
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.LeagueMemberEntity", b =>
                {
                    b.Property<long>("LeagueId")
                        .HasColumnType("bigint");

                    b.Property<long>("MemberId")
                        .HasColumnType("bigint");

                    b.Property<long?>("TeamId")
                        .HasColumnType("bigint");

                    b.HasKey("LeagueId", "MemberId");

                    b.HasIndex("MemberId");

                    b.HasIndex("LeagueId", "TeamId");

                    b.ToTable("LeagueMembers");
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.MemberEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("DanLisaId")
                        .HasColumnType("longtext");

                    b.Property<string>("DiscordId")
                        .HasColumnType("longtext");

                    b.Property<string>("Firstname")
                        .HasColumnType("longtext");

                    b.Property<string>("IRacingId")
                        .HasColumnType("longtext");

                    b.Property<long?>("ImportId")
                        .HasColumnType("bigint");

                    b.Property<string>("Lastname")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Members");
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.PaymentEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("LastPaymentReceived")
                        .HasColumnType("datetime(6)");

                    b.Property<long>("LeagueId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("NextPaymentDue")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("PlanId")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("SubscriptionId")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("LeagueId");

                    b.HasIndex("PlanId");

                    b.ToTable("Payments", (string)null);
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.PointRuleEntity", b =>
                {
                    b.Property<long>("LeagueId")
                        .HasColumnType("bigint");

                    b.Property<long>("PointRuleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("BonusPoints")
                        .HasColumnType("longtext");

                    b.Property<string>("CreatedByUserId")
                        .HasColumnType("longtext");

                    b.Property<string>("CreatedByUserName")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("FinalSortOptions")
                        .HasColumnType("longtext");

                    b.Property<string>("LastModifiedByUserId")
                        .HasColumnType("longtext");

                    b.Property<string>("LastModifiedByUserName")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<int>("MaxPoints")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<int>("PointDropOff")
                        .HasColumnType("int");

                    b.Property<string>("PointsPerPlace")
                        .HasColumnType("longtext");

                    b.Property<string>("PointsSortOptions")
                        .HasColumnType("longtext");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("LeagueId", "PointRuleId");

                    b.HasAlternateKey("PointRuleId");

                    b.ToTable("PointRules");
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.ProtestEntity", b =>
                {
                    b.Property<long>("LeagueId")
                        .HasColumnType("bigint");

                    b.Property<long>("ProtestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long>("AuthorMemberId")
                        .HasColumnType("bigint");

                    b.Property<string>("Corner")
                        .HasColumnType("longtext");

                    b.Property<string>("FullDescription")
                        .HasColumnType("longtext");

                    b.Property<string>("OnLap")
                        .HasColumnType("longtext");

                    b.Property<long>("SessionId")
                        .HasColumnType("bigint");

                    b.HasKey("LeagueId", "ProtestId");

                    b.HasAlternateKey("ProtestId");

                    b.HasIndex("LeagueId", "AuthorMemberId");

                    b.HasIndex("LeagueId", "SessionId");

                    b.ToTable("Protests", (string)null);
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.Protests_LeagueMembers", b =>
                {
                    b.Property<long>("MemberId")
                        .HasColumnType("bigint");

                    b.Property<long>("LeagueId")
                        .HasColumnType("bigint");

                    b.Property<long>("ProtestId")
                        .HasColumnType("bigint");

                    b.HasKey("MemberId", "LeagueId", "ProtestId");

                    b.HasIndex("LeagueId", "MemberId");

                    b.HasIndex("LeagueId", "ProtestId");

                    b.ToTable("Protests_LeagueMembers");
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.ResultConfigurationEntity", b =>
                {
                    b.Property<long>("LeagueId")
                        .HasColumnType("bigint");

                    b.Property<long>("ResultConfigId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long>("ChampSeasonId")
                        .HasColumnType("bigint");

                    b.Property<string>("CreatedByUserId")
                        .HasColumnType("longtext");

                    b.Property<string>("CreatedByUserName")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("DisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("LastModifiedByUserId")
                        .HasColumnType("longtext");

                    b.Property<string>("LastModifiedByUserName")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<string>("ResultKind")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("ResultsPerTeam")
                        .HasColumnType("int");

                    b.Property<long?>("SourceResultConfigId")
                        .HasColumnType("bigint");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("LeagueId", "ResultConfigId");

                    b.HasAlternateKey("ResultConfigId");

                    b.HasIndex("LeagueId", "ChampSeasonId");

                    b.HasIndex("LeagueId", "SourceResultConfigId");

                    b.ToTable("ResultConfigurations");
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.ResultRowEntity", b =>
                {
                    b.Property<long>("LeagueId")
                        .HasColumnType("bigint");

                    b.Property<long>("ResultRowId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long>("AvgLapTime")
                        .HasColumnType("bigint");

                    b.Property<string>("Car")
                        .HasColumnType("longtext");

                    b.Property<string>("CarClass")
                        .HasColumnType("longtext");

                    b.Property<int>("CarId")
                        .HasColumnType("int");

                    b.Property<int>("CarNumber")
                        .HasColumnType("int");

                    b.Property<int>("ClassId")
                        .HasColumnType("int");

                    b.Property<int>("ClubId")
                        .HasColumnType("int");

                    b.Property<string>("ClubName")
                        .HasColumnType("longtext");

                    b.Property<double>("CompletedLaps")
                        .HasColumnType("double");

                    b.Property<double>("CompletedPct")
                        .HasColumnType("double");

                    b.Property<string>("ContactLaps")
                        .HasColumnType("longtext");

                    b.Property<int>("Division")
                        .HasColumnType("int");

                    b.Property<int>("FastLapNr")
                        .HasColumnType("int");

                    b.Property<long>("FastestLapTime")
                        .HasColumnType("bigint");

                    b.Property<double>("FinishPosition")
                        .HasColumnType("double");

                    b.Property<string>("IRacingId")
                        .HasColumnType("longtext");

                    b.Property<double>("Incidents")
                        .HasColumnType("double");

                    b.Property<long>("Interval")
                        .HasColumnType("bigint");

                    b.Property<double>("LeadLaps")
                        .HasColumnType("double");

                    b.Property<string>("License")
                        .HasColumnType("longtext");

                    b.Property<long>("MemberId")
                        .HasColumnType("bigint");

                    b.Property<int>("NewCpi")
                        .HasColumnType("int");

                    b.Property<int>("NewIRating")
                        .HasColumnType("int");

                    b.Property<int>("NewLicenseLevel")
                        .HasColumnType("int");

                    b.Property<double>("NewSafetyRating")
                        .HasColumnType("double");

                    b.Property<int>("NumContactLaps")
                        .HasColumnType("int");

                    b.Property<int>("NumOfftrackLaps")
                        .HasColumnType("int");

                    b.Property<int>("NumPitStops")
                        .HasColumnType("int");

                    b.Property<string>("OfftrackLaps")
                        .HasColumnType("longtext");

                    b.Property<int>("OldCpi")
                        .HasColumnType("int");

                    b.Property<int>("OldIRating")
                        .HasColumnType("int");

                    b.Property<int>("OldLicenseLevel")
                        .HasColumnType("int");

                    b.Property<double>("OldSafetyRating")
                        .HasColumnType("double");

                    b.Property<string>("PittedLaps")
                        .HasColumnType("longtext");

                    b.Property<bool>("PointsEligible")
                        .HasColumnType("tinyint(1)");

                    b.Property<double>("PositionChange")
                        .HasColumnType("double");

                    b.Property<long>("QualifyingTime")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("QualifyingTimeAt")
                        .HasColumnType("datetime");

                    b.Property<double>("RacePoints")
                        .HasColumnType("double");

                    b.Property<int>("SeasonStartIRating")
                        .HasColumnType("int");

                    b.Property<int>("SimSessionType")
                        .HasColumnType("int");

                    b.Property<double>("StartPosition")
                        .HasColumnType("double");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<long>("SubSessionId")
                        .HasColumnType("bigint");

                    b.Property<long?>("TeamId")
                        .HasColumnType("bigint");

                    b.HasKey("LeagueId", "ResultRowId");

                    b.HasAlternateKey("ResultRowId");

                    b.HasIndex("MemberId");

                    b.HasIndex("LeagueId", "MemberId");

                    b.HasIndex("LeagueId", "SubSessionId");

                    b.HasIndex("LeagueId", "TeamId");

                    b.ToTable("ResultRows");
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.ReviewCommentEntity", b =>
                {
                    b.Property<long>("LeagueId")
                        .HasColumnType("bigint");

                    b.Property<long>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("AuthorName")
                        .HasColumnType("longtext");

                    b.Property<string>("AuthorUserId")
                        .HasColumnType("longtext");

                    b.Property<string>("CreatedByUserId")
                        .HasColumnType("longtext");

                    b.Property<string>("CreatedByUserName")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime");

                    b.Property<long?>("ImportId")
                        .HasColumnType("bigint");

                    b.Property<string>("LastModifiedByUserId")
                        .HasColumnType("longtext");

                    b.Property<string>("LastModifiedByUserName")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<long?>("ReplyToCommentId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ReviewId")
                        .HasColumnType("bigint");

                    b.Property<string>("Text")
                        .HasColumnType("longtext");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("LeagueId", "CommentId");

                    b.HasAlternateKey("CommentId");

                    b.HasIndex("ReplyToCommentId");

                    b.HasIndex("ReviewId");

                    b.HasIndex("LeagueId", "ReplyToCommentId");

                    b.HasIndex("LeagueId", "ReviewId");

                    b.ToTable("ReviewComments");
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.ReviewCommentVoteEntity", b =>
                {
                    b.Property<long>("LeagueId")
                        .HasColumnType("bigint");

                    b.Property<long>("ReviewVoteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long>("CommentId")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<long?>("ImportId")
                        .HasColumnType("bigint");

                    b.Property<long?>("MemberAtFaultId")
                        .HasColumnType("bigint");

                    b.Property<long?>("VoteCategoryId")
                        .HasColumnType("bigint");

                    b.HasKey("LeagueId", "ReviewVoteId");

                    b.HasAlternateKey("ReviewVoteId");

                    b.HasIndex("CommentId");

                    b.HasIndex("MemberAtFaultId");

                    b.HasIndex("VoteCategoryId");

                    b.HasIndex("LeagueId", "CommentId");

                    b.HasIndex("LeagueId", "VoteCategoryId");

                    b.ToTable("ReviewCommentVotes");
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.ReviewPenaltyEntity", b =>
                {
                    b.Property<long>("LeagueId")
                        .HasColumnType("bigint");

                    b.Property<long>("ResultRowId")
                        .HasColumnType("bigint");

                    b.Property<long>("ReviewId")
                        .HasColumnType("bigint");

                    b.Property<long>("ReviewVoteId")
                        .HasColumnType("bigint");

                    b.Property<string>("Value")
                        .HasColumnType("json");

                    b.HasKey("LeagueId", "ResultRowId", "ReviewId", "ReviewVoteId");

                    b.HasIndex("ReviewId");

                    b.HasIndex("ReviewVoteId");

                    b.HasIndex("LeagueId", "ResultRowId");

                    b.HasIndex("LeagueId", "ReviewId");

                    b.HasIndex("LeagueId", "ReviewVoteId");

                    b.ToTable("ReviewPenaltys");
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.ScheduleEntity", b =>
                {
                    b.Property<long>("LeagueId")
                        .HasColumnType("bigint");

                    b.Property<long>("ScheduleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("CreatedByUserId")
                        .HasColumnType("longtext");

                    b.Property<string>("CreatedByUserName")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<long?>("ImportId")
                        .HasColumnType("bigint");

                    b.Property<string>("LastModifiedByUserId")
                        .HasColumnType("longtext");

                    b.Property<string>("LastModifiedByUserName")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<long>("SeasonId")
                        .HasColumnType("bigint");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("LeagueId", "ScheduleId");

                    b.HasAlternateKey("ScheduleId");

                    b.HasIndex("LeagueId", "SeasonId");

                    b.ToTable("Schedules");
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.ScoredEventResultEntity", b =>
                {
                    b.Property<long>("LeagueId")
                        .HasColumnType("bigint");

                    b.Property<long>("ResultId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long?>("ChampSeasonId")
                        .HasColumnType("bigint");

                    b.Property<string>("CreatedByUserId")
                        .HasColumnType("longtext");

                    b.Property<string>("CreatedByUserName")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<long>("EventId")
                        .HasColumnType("bigint");

                    b.Property<long?>("EventResultEntityEventId")
                        .HasColumnType("bigint");

                    b.Property<long?>("EventResultEntityLeagueId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ImportId")
                        .HasColumnType("bigint");

                    b.Property<string>("LastModifiedByUserId")
                        .HasColumnType("longtext");

                    b.Property<string>("LastModifiedByUserName")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<long?>("ResultConfigId")
                        .HasColumnType("bigint");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("LeagueId", "ResultId");

                    b.HasAlternateKey("ResultId");

                    b.HasIndex("EventResultEntityLeagueId", "EventResultEntityEventId");

                    b.HasIndex("LeagueId", "ChampSeasonId");

                    b.HasIndex("LeagueId", "EventId");

                    b.HasIndex("LeagueId", "ResultConfigId");

                    b.ToTable("ScoredEventResults");
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.ScoredResultRowEntity", b =>
                {
                    b.Property<long>("LeagueId")
                        .HasColumnType("bigint");

                    b.Property<long>("ScoredResultRowId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long>("AvgLapTime")
                        .HasColumnType("bigint");

                    b.Property<double>("BonusPoints")
                        .HasColumnType("double");

                    b.Property<string>("Car")
                        .HasColumnType("longtext");

                    b.Property<string>("CarClass")
                        .HasColumnType("longtext");

                    b.Property<int>("CarId")
                        .HasColumnType("int");

                    b.Property<int>("CarNumber")
                        .HasColumnType("int");

                    b.Property<int>("ClassId")
                        .HasColumnType("int");

                    b.Property<int>("ClubId")
                        .HasColumnType("int");

                    b.Property<string>("ClubName")
                        .HasColumnType("longtext");

                    b.Property<double>("CompletedLaps")
                        .HasColumnType("double");

                    b.Property<double>("CompletedPct")
                        .HasColumnType("double");

                    b.Property<string>("ContactLaps")
                        .HasColumnType("longtext");

                    b.Property<int>("Division")
                        .HasColumnType("int");

                    b.Property<int>("FastLapNr")
                        .HasColumnType("int");

                    b.Property<long>("FastestLapTime")
                        .HasColumnType("bigint");

                    b.Property<int>("FinalPosition")
                        .HasColumnType("int");

                    b.Property<double>("FinalPositionChange")
                        .HasColumnType("double");

                    b.Property<double>("FinishPosition")
                        .HasColumnType("double");

                    b.Property<string>("IRacingId")
                        .HasColumnType("longtext");

                    b.Property<long?>("ImportId")
                        .HasColumnType("bigint");

                    b.Property<double>("Incidents")
                        .HasColumnType("double");

                    b.Property<long>("Interval")
                        .HasColumnType("bigint");

                    b.Property<double>("LeadLaps")
                        .HasColumnType("double");

                    b.Property<string>("License")
                        .HasColumnType("longtext");

                    b.Property<long?>("MemberId")
                        .HasColumnType("bigint");

                    b.Property<int>("NewCpi")
                        .HasColumnType("int");

                    b.Property<int>("NewIRating")
                        .HasColumnType("int");

                    b.Property<int>("NewLicenseLevel")
                        .HasColumnType("int");

                    b.Property<double>("NewSafetyRating")
                        .HasColumnType("double");

                    b.Property<int>("NumContactLaps")
                        .HasColumnType("int");

                    b.Property<int>("NumOfftrackLaps")
                        .HasColumnType("int");

                    b.Property<int>("NumPitStops")
                        .HasColumnType("int");

                    b.Property<string>("OfftrackLaps")
                        .HasColumnType("longtext");

                    b.Property<int>("OldCpi")
                        .HasColumnType("int");

                    b.Property<int>("OldIRating")
                        .HasColumnType("int");

                    b.Property<int>("OldLicenseLevel")
                        .HasColumnType("int");

                    b.Property<double>("OldSafetyRating")
                        .HasColumnType("double");

                    b.Property<double>("PenaltyPoints")
                        .HasColumnType("double");

                    b.Property<string>("PittedLaps")
                        .HasColumnType("longtext");

                    b.Property<bool>("PointsEligible")
                        .HasColumnType("tinyint(1)");

                    b.Property<double>("PositionChange")
                        .HasColumnType("double");

                    b.Property<long>("QualifyingTime")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("QualifyingTimeAt")
                        .HasColumnType("datetime");

                    b.Property<double>("RacePoints")
                        .HasColumnType("double");

                    b.Property<int>("SeasonStartIRating")
                        .HasColumnType("int");

                    b.Property<long>("SessionResultId")
                        .HasColumnType("bigint");

                    b.Property<int>("SimSessionType")
                        .HasColumnType("int");

                    b.Property<double>("StartPosition")
                        .HasColumnType("double");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<long?>("TeamId")
                        .HasColumnType("bigint");

                    b.Property<double>("TotalPoints")
                        .HasColumnType("double");

                    b.HasKey("LeagueId", "ScoredResultRowId");

                    b.HasAlternateKey("ScoredResultRowId");

                    b.HasIndex("MemberId");

                    b.HasIndex("TeamId");

                    b.HasIndex("LeagueId", "SessionResultId");

                    b.HasIndex("LeagueId", "TeamId");

                    b.ToTable("ScoredResultRows");
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.ScoredSessionResultEntity", b =>
                {
                    b.Property<long>("LeagueId")
                        .HasColumnType("bigint");

                    b.Property<long>("SessionResultId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("CreatedByUserId")
                        .HasColumnType("longtext");

                    b.Property<string>("CreatedByUserName")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Discriminator")
                        .HasColumnType("longtext");

                    b.Property<long>("FastestAvgLap")
                        .HasColumnType("bigint");

                    b.Property<long?>("FastestAvgLapDriverMemberId")
                        .HasColumnType("bigint");

                    b.Property<long>("FastestLap")
                        .HasColumnType("bigint");

                    b.Property<long?>("FastestLapDriverMemberId")
                        .HasColumnType("bigint");

                    b.Property<long>("FastestQualyLap")
                        .HasColumnType("bigint");

                    b.Property<long?>("FastestQualyLapDriverMemberId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ImportId")
                        .HasColumnType("bigint");

                    b.Property<string>("LastModifiedByUserId")
                        .HasColumnType("longtext");

                    b.Property<string>("LastModifiedByUserName")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<long>("ResultId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ScoringId")
                        .HasColumnType("bigint");

                    b.Property<int>("SessionNr")
                        .HasColumnType("int");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("LeagueId", "SessionResultId");

                    b.HasAlternateKey("SessionResultId");

                    b.HasIndex("FastestAvgLapDriverMemberId");

                    b.HasIndex("FastestLapDriverMemberId");

                    b.HasIndex("FastestQualyLapDriverMemberId");

                    b.HasIndex("LeagueId", "ResultId");

                    b.HasIndex("LeagueId", "ScoringId");

                    b.ToTable("ScoredSessionResults");
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.ScoredTeamResultRowsResultRows", b =>
                {
                    b.Property<long>("TeamParentRowRefId")
                        .HasColumnType("bigint");

                    b.Property<long>("LeagueId")
                        .HasColumnType("bigint");

                    b.Property<long>("TeamResultRowRefId")
                        .HasColumnType("bigint");

                    b.HasKey("TeamParentRowRefId", "LeagueId", "TeamResultRowRefId");

                    b.HasIndex("LeagueId", "TeamParentRowRefId");

                    b.HasIndex("LeagueId", "TeamResultRowRefId");

                    b.ToTable("ScoredTeamResultRowsResultRows");
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.ScoringEntity", b =>
                {
                    b.Property<long>("LeagueId")
                        .HasColumnType("bigint");

                    b.Property<long>("ScoringId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("CreatedByUserId")
                        .HasColumnType("longtext");

                    b.Property<string>("CreatedByUserName")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<long?>("ExtScoringSourceId")
                        .HasColumnType("bigint");

                    b.Property<int>("Index")
                        .HasColumnType("int");

                    b.Property<bool>("IsCombinedResult")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastModifiedByUserId")
                        .HasColumnType("longtext");

                    b.Property<string>("LastModifiedByUserName")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<int>("MaxResultsPerGroup")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<long?>("PointsRuleId")
                        .HasColumnType("bigint");

                    b.Property<long>("ResultConfigId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ScheduleEntityLeagueId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ScheduleEntityScheduleId")
                        .HasColumnType("bigint");

                    b.Property<bool>("ShowResults")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("UpdateTeamOnRecalculation")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("UseExternalSourcePoints")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("UseResultSetTeam")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("LeagueId", "ScoringId");

                    b.HasAlternateKey("ScoringId");

                    b.HasIndex("ExtScoringSourceId");

                    b.HasIndex("LeagueId", "ExtScoringSourceId");

                    b.HasIndex("LeagueId", "PointsRuleId");

                    b.HasIndex("LeagueId", "ResultConfigId");

                    b.HasIndex("ScheduleEntityLeagueId", "ScheduleEntityScheduleId");

                    b.ToTable("Scorings");
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.SeasonEntity", b =>
                {
                    b.Property<long>("LeagueId")
                        .HasColumnType("bigint");

                    b.Property<long>("SeasonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("CreatedByUserId")
                        .HasColumnType("longtext");

                    b.Property<string>("CreatedByUserName")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<bool>("Finished")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("HideCommentsBeforeVoted")
                        .HasColumnType("tinyint(1)");

                    b.Property<long?>("ImportId")
                        .HasColumnType("bigint");

                    b.Property<string>("LastModifiedByUserId")
                        .HasColumnType("longtext");

                    b.Property<string>("LastModifiedByUserName")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<long?>("MainScoringLeagueId")
                        .HasColumnType("bigint");

                    b.Property<long?>("MainScoringScoringId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("SeasonEnd")
                        .HasColumnType("datetime");

                    b.Property<string>("SeasonName")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("SeasonStart")
                        .HasColumnType("datetime");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("LeagueId", "SeasonId");

                    b.HasAlternateKey("SeasonId");

                    b.HasIndex("MainScoringLeagueId", "MainScoringScoringId");

                    b.ToTable("Seasons");
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.SessionEntity", b =>
                {
                    b.Property<long>("LeagueId")
                        .HasColumnType("bigint");

                    b.Property<long>("SessionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("CreatedByUserId")
                        .HasColumnType("longtext");

                    b.Property<string>("CreatedByUserName")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<long>("Duration")
                        .HasColumnType("bigint");

                    b.Property<long>("EventId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ImportId")
                        .HasColumnType("bigint");

                    b.Property<int>("Laps")
                        .HasColumnType("int");

                    b.Property<string>("LastModifiedByUserId")
                        .HasColumnType("longtext");

                    b.Property<string>("LastModifiedByUserName")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<int>("SessionNr")
                        .HasColumnType("int");

                    b.Property<string>("SessionType")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<long>("StartOffset")
                        .HasColumnType("bigint");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("LeagueId", "SessionId");

                    b.HasAlternateKey("SessionId");

                    b.HasIndex("EventId", "SessionId");

                    b.HasIndex("LeagueId", "EventId");

                    b.ToTable("Sessions");
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.SessionResultEntity", b =>
                {
                    b.Property<long>("LeagueId")
                        .HasColumnType("bigint");

                    b.Property<long>("SessionId")
                        .HasColumnType("bigint");

                    b.Property<string>("CreatedByUserId")
                        .HasColumnType("longtext");

                    b.Property<string>("CreatedByUserName")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long>("EventId")
                        .HasColumnType("bigint");

                    b.Property<long?>("IRSimSessionDetailsId")
                        .HasColumnType("bigint");

                    b.Property<string>("LastModifiedByUserId")
                        .HasColumnType("longtext");

                    b.Property<string>("LastModifiedByUserName")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("SimSessionType")
                        .HasColumnType("int");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("LeagueId", "SessionId");

                    b.HasIndex("SessionId");

                    b.HasIndex("LeagueId", "EventId");

                    b.HasIndex("LeagueId", "IRSimSessionDetailsId");

                    b.ToTable("SessionResults");
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.StandingConfigurationEntity", b =>
                {
                    b.Property<long>("LeagueId")
                        .HasColumnType("bigint");

                    b.Property<long>("StandingConfigId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("CreatedByUserId")
                        .HasColumnType("longtext");

                    b.Property<string>("CreatedByUserName")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedByUserId")
                        .HasColumnType("longtext");

                    b.Property<string>("LastModifiedByUserName")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<int>("ResultKind")
                        .HasColumnType("int");

                    b.Property<bool>("UseCombinedResult")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.Property<int>("WeeksCounted")
                        .HasColumnType("int");

                    b.HasKey("LeagueId", "StandingConfigId");

                    b.HasAlternateKey("StandingConfigId");

                    b.ToTable("StandingConfigurations");
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.StandingEntity", b =>
                {
                    b.Property<long>("LeagueId")
                        .HasColumnType("bigint");

                    b.Property<long>("StandingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long?>("ChampSeasonId")
                        .HasColumnType("bigint");

                    b.Property<string>("CreatedByUserId")
                        .HasColumnType("longtext");

                    b.Property<string>("CreatedByUserName")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long>("EventId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ImportId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsTeamStanding")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastModifiedByUserId")
                        .HasColumnType("longtext");

                    b.Property<string>("LastModifiedByUserName")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<long>("SeasonId")
                        .HasColumnType("bigint");

                    b.Property<long?>("StandingConfigId")
                        .HasColumnType("bigint");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("LeagueId", "StandingId");

                    b.HasAlternateKey("StandingId");

                    b.HasIndex("LeagueId", "ChampSeasonId");

                    b.HasIndex("LeagueId", "EventId");

                    b.HasIndex("LeagueId", "SeasonId");

                    b.HasIndex("LeagueId", "StandingConfigId");

                    b.ToTable("Standings");
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.StandingRowEntity", b =>
                {
                    b.Property<long>("LeagueId")
                        .HasColumnType("bigint");

                    b.Property<long>("StandingRowId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("CarClass")
                        .HasColumnType("longtext");

                    b.Property<int>("ClassId")
                        .HasColumnType("int");

                    b.Property<int>("CompletedLaps")
                        .HasColumnType("int");

                    b.Property<int>("CompletedLapsChange")
                        .HasColumnType("int");

                    b.Property<int>("DroppedResultCount")
                        .HasColumnType("int");

                    b.Property<int>("FastestLaps")
                        .HasColumnType("int");

                    b.Property<int>("FastestLapsChange")
                        .HasColumnType("int");

                    b.Property<int>("Incidents")
                        .HasColumnType("int");

                    b.Property<int>("IncidentsChange")
                        .HasColumnType("int");

                    b.Property<int>("LastIrating")
                        .HasColumnType("int");

                    b.Property<int>("LastPosition")
                        .HasColumnType("int");

                    b.Property<int>("LeadLaps")
                        .HasColumnType("int");

                    b.Property<int>("LeadLapsChange")
                        .HasColumnType("int");

                    b.Property<long?>("MemberId")
                        .HasColumnType("bigint");

                    b.Property<int>("PenaltyPoints")
                        .HasColumnType("int");

                    b.Property<int>("PenaltyPointsChange")
                        .HasColumnType("int");

                    b.Property<int>("PolePositions")
                        .HasColumnType("int");

                    b.Property<int>("PolePositionsChange")
                        .HasColumnType("int");

                    b.Property<int>("Position")
                        .HasColumnType("int");

                    b.Property<int>("PositionChange")
                        .HasColumnType("int");

                    b.Property<int>("RacePoints")
                        .HasColumnType("int");

                    b.Property<int>("RacePointsChange")
                        .HasColumnType("int");

                    b.Property<int>("Races")
                        .HasColumnType("int");

                    b.Property<int>("RacesCounted")
                        .HasColumnType("int");

                    b.Property<long>("StandingId")
                        .HasColumnType("bigint");

                    b.Property<int>("StartIrating")
                        .HasColumnType("int");

                    b.Property<long?>("TeamId")
                        .HasColumnType("bigint");

                    b.Property<int>("Top10")
                        .HasColumnType("int");

                    b.Property<int>("Top3")
                        .HasColumnType("int");

                    b.Property<int>("Top5")
                        .HasColumnType("int");

                    b.Property<int>("TotalPoints")
                        .HasColumnType("int");

                    b.Property<int>("TotalPointsChange")
                        .HasColumnType("int");

                    b.Property<int>("Wins")
                        .HasColumnType("int");

                    b.Property<int>("WinsChange")
                        .HasColumnType("int");

                    b.HasKey("LeagueId", "StandingRowId");

                    b.HasAlternateKey("StandingRowId");

                    b.HasIndex("MemberId");

                    b.HasIndex("LeagueId", "StandingId");

                    b.HasIndex("LeagueId", "TeamId");

                    b.ToTable("StandingRows", (string)null);
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.StandingRows_ScoredResultRows", b =>
                {
                    b.Property<long>("ScoredResultRowRefId")
                        .HasColumnType("bigint");

                    b.Property<long>("LeagueId")
                        .HasColumnType("bigint");

                    b.Property<long>("StandingRowRefId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsScored")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("ScoredResultRowRefId", "LeagueId", "StandingRowRefId");

                    b.HasIndex("LeagueId", "ScoredResultRowRefId");

                    b.HasIndex("LeagueId", "StandingRowRefId");

                    b.ToTable("StandingRows_ScoredResultRows");
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.StatisticSetEntity", b =>
                {
                    b.Property<long>("LeagueId")
                        .HasColumnType("bigint");

                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("CreatedByUserId")
                        .HasColumnType("longtext");

                    b.Property<string>("CreatedByUserName")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<long?>("CurrentChampId")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<int?>("FinishedRaces")
                        .HasColumnType("int");

                    b.Property<DateTime?>("FirstDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ImportSource")
                        .HasColumnType("longtext");

                    b.Property<bool?>("IsSeasonFinished")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastDate")
                        .HasColumnType("datetime");

                    b.Property<string>("LastModifiedByUserId")
                        .HasColumnType("longtext");

                    b.Property<string>("LastModifiedByUserName")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<bool>("RequiresRecalculation")
                        .HasColumnType("tinyint(1)");

                    b.Property<long?>("SeasonId")
                        .HasColumnType("bigint");

                    b.Property<long?>("StandingId")
                        .HasColumnType("bigint");

                    b.Property<long>("UpdateInterval")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("LeagueId", "Id");

                    b.HasAlternateKey("Id");

                    b.HasIndex("CurrentChampId");

                    b.HasIndex("LeagueId", "SeasonId");

                    b.HasIndex("LeagueId", "StandingId");

                    b.ToTable("StatisticSets");
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.SubscriptionEntity", b =>
                {
                    b.Property<string>("PlanId")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("Interval")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<double>("Price")
                        .HasColumnType("double");

                    b.HasKey("PlanId");

                    b.ToTable("Subscriptions", (string)null);
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.TeamEntity", b =>
                {
                    b.Property<long>("LeagueId")
                        .HasColumnType("bigint");

                    b.Property<long>("TeamId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("CreatedByUserId")
                        .HasColumnType("longtext");

                    b.Property<string>("CreatedByUserName")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<long?>("IRacingTeamId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ImportId")
                        .HasColumnType("bigint");

                    b.Property<string>("LastModifiedByUserId")
                        .HasColumnType("longtext");

                    b.Property<string>("LastModifiedByUserName")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<string>("Profile")
                        .HasColumnType("longtext");

                    b.Property<string>("TeamColor")
                        .HasColumnType("longtext");

                    b.Property<string>("TeamHomepage")
                        .HasColumnType("longtext");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("LeagueId", "TeamId");

                    b.HasAlternateKey("TeamId");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.TrackConfigEntity", b =>
                {
                    b.Property<long>("TrackId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("ConfigName")
                        .HasColumnType("longtext");

                    b.Property<string>("ConfigType")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("HasNightLighting")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LegacyTrackId")
                        .HasColumnType("longtext");

                    b.Property<double>("LengthKm")
                        .HasColumnType("double");

                    b.Property<long>("TrackGroupId")
                        .HasColumnType("bigint");

                    b.Property<int>("Turns")
                        .HasColumnType("int");

                    b.HasKey("TrackId");

                    b.HasIndex("TrackGroupId");

                    b.ToTable("TrackConfigs");
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.TrackGroupEntity", b =>
                {
                    b.Property<long>("TrackGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Location")
                        .HasColumnType("longtext");

                    b.Property<string>("TrackName")
                        .HasColumnType("longtext");

                    b.HasKey("TrackGroupId");

                    b.ToTable("TrackGroups");
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.VoteCategoryEntity", b =>
                {
                    b.Property<long>("LeagueId")
                        .HasColumnType("bigint");

                    b.Property<long>("CatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<int>("DefaultPenalty")
                        .HasColumnType("int");

                    b.Property<long?>("ImportId")
                        .HasColumnType("bigint");

                    b.Property<int>("Index")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .HasColumnType("longtext");

                    b.HasKey("LeagueId", "CatId");

                    b.HasAlternateKey("CatId");

                    b.ToTable("VoteCategories");
                });

            modelBuilder.Entity("MemberEntityScoredSessionResultEntity", b =>
                {
                    b.Property<long>("CleanestDriversId")
                        .HasColumnType("bigint");

                    b.Property<long>("CleanestDriverResultsLeagueId")
                        .HasColumnType("bigint");

                    b.Property<long>("CleanestDriverResultsSessionResultId")
                        .HasColumnType("bigint");

                    b.HasKey("CleanestDriversId", "CleanestDriverResultsLeagueId", "CleanestDriverResultsSessionResultId");

                    b.HasIndex("CleanestDriverResultsLeagueId", "CleanestDriverResultsSessionResultId");

                    b.ToTable("ScoredResultsCleanestDrivers", (string)null);
                });

            modelBuilder.Entity("MemberEntityScoredSessionResultEntity1", b =>
                {
                    b.Property<long>("HardChargersId")
                        .HasColumnType("bigint");

                    b.Property<long>("HardChargerResultsLeagueId")
                        .HasColumnType("bigint");

                    b.Property<long>("HardChargerResultsSessionResultId")
                        .HasColumnType("bigint");

                    b.HasKey("HardChargersId", "HardChargerResultsLeagueId", "HardChargerResultsSessionResultId");

                    b.HasIndex("HardChargerResultsLeagueId", "HardChargerResultsSessionResultId");

                    b.ToTable("ScoredResultsHardChargers", (string)null);
                });

            modelBuilder.Entity("StatisticSetEntityStatisticSetEntity", b =>
                {
                    b.Property<long>("DependendStatisticSetsLeagueId")
                        .HasColumnType("bigint");

                    b.Property<long>("DependendStatisticSetsId")
                        .HasColumnType("bigint");

                    b.Property<long>("LeagueStatisticSetsLeagueId")
                        .HasColumnType("bigint");

                    b.Property<long>("LeagueStatisticSetsId")
                        .HasColumnType("bigint");

                    b.HasKey("DependendStatisticSetsLeagueId", "DependendStatisticSetsId", "LeagueStatisticSetsLeagueId", "LeagueStatisticSetsId");

                    b.HasIndex("LeagueStatisticSetsLeagueId", "LeagueStatisticSetsId");

                    b.ToTable("LeagueStatisticSetsStatisticSets", (string)null);
                });

            modelBuilder.Entity("IncidentReviewEntityMemberEntity", b =>
                {
                    b.HasOne("iRLeagueDatabaseCore.Models.MemberEntity", null)
                        .WithMany()
                        .HasForeignKey("InvolvedMembersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("iRLeagueDatabaseCore.Models.IncidentReviewEntity", null)
                        .WithMany()
                        .HasForeignKey("InvolvedReviewsLeagueId", "InvolvedReviewsReviewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.AcceptedReviewVoteEntity", b =>
                {
                    b.HasOne("iRLeagueDatabaseCore.Models.MemberEntity", "MemberAtFault")
                        .WithMany("AcceptedReviewVotes")
                        .HasForeignKey("MemberAtFaultId");

                    b.HasOne("iRLeagueDatabaseCore.Models.IncidentReviewEntity", "Review")
                        .WithMany("AcceptedReviewVotes")
                        .HasForeignKey("LeagueId", "ReviewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("iRLeagueDatabaseCore.Models.VoteCategoryEntity", "VoteCategory")
                        .WithMany("AcceptedReviewVotes")
                        .HasForeignKey("LeagueId", "VoteCategoryId");

                    b.Navigation("MemberAtFault");

                    b.Navigation("Review");

                    b.Navigation("VoteCategory");
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.AddPenaltyEntity", b =>
                {
                    b.HasOne("iRLeagueDatabaseCore.Models.ScoredResultRowEntity", "ScoredResultRow")
                        .WithMany("AddPenalties")
                        .HasForeignKey("LeagueId", "ScoredResultRowId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("ScoredResultRow");
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.AutoPenaltyConfigEntity", b =>
                {
                    b.HasOne("iRLeagueDatabaseCore.Models.PointRuleEntity", "PointRule")
                        .WithMany("AutoPenalties")
                        .HasForeignKey("LeagueId", "PointRuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PointRule");
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.ChampionshipEntity", b =>
                {
                    b.HasOne("iRLeagueDatabaseCore.Models.LeagueEntity", "League")
                        .WithMany("Championships")
                        .HasForeignKey("LeagueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("League");
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.ChampSeasonEntity", b =>
                {
                    b.HasOne("iRLeagueDatabaseCore.Models.ChampionshipEntity", "Championship")
                        .WithMany("ChampSeasons")
                        .HasForeignKey("LeagueId", "ChampionshipId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("iRLeagueDatabaseCore.Models.ResultConfigurationEntity", "DefaultResultConfig")
                        .WithMany()
                        .HasForeignKey("LeagueId", "DefaultResultConfigId");

                    b.HasOne("iRLeagueDatabaseCore.Models.SeasonEntity", "Season")
                        .WithMany("ChampSeasons")
                        .HasForeignKey("LeagueId", "SeasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("iRLeagueDatabaseCore.Models.StandingConfigurationEntity", "StandingConfiguration")
                        .WithMany("ChampSeasons")
                        .HasForeignKey("LeagueId", "StandingConfigId");

                    b.Navigation("Championship");

                    b.Navigation("DefaultResultConfig");

                    b.Navigation("Season");

                    b.Navigation("StandingConfiguration");
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.CustomIncidentEntity", b =>
                {
                    b.HasOne("iRLeagueDatabaseCore.Models.LeagueEntity", "League")
                        .WithMany()
                        .HasForeignKey("LeagueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("League");
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.DriverStatisticRowEntity", b =>
                {
                    b.HasOne("iRLeagueDatabaseCore.Models.MemberEntity", "Member")
                        .WithMany("DriverStatisticRows")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("iRLeagueDatabaseCore.Models.SessionEntity", "FirstRace")
                        .WithMany()
                        .HasForeignKey("LeagueId", "FirstRaceId");

                    b.HasOne("iRLeagueDatabaseCore.Models.ScoredResultRowEntity", "FirstResultRow")
                        .WithMany()
                        .HasForeignKey("LeagueId", "FirstResultRowId");

                    b.HasOne("iRLeagueDatabaseCore.Models.SessionEntity", "FirstSession")
                        .WithMany()
                        .HasForeignKey("LeagueId", "FirstSessionId");

                    b.HasOne("iRLeagueDatabaseCore.Models.SessionEntity", "LastRace")
                        .WithMany()
                        .HasForeignKey("LeagueId", "LastRaceId");

                    b.HasOne("iRLeagueDatabaseCore.Models.ScoredResultRowEntity", "LastResultRow")
                        .WithMany()
                        .HasForeignKey("LeagueId", "LastResultRowId");

                    b.HasOne("iRLeagueDatabaseCore.Models.SessionEntity", "LastSession")
                        .WithMany()
                        .HasForeignKey("LeagueId", "LastSessionId");

                    b.HasOne("iRLeagueDatabaseCore.Models.StatisticSetEntity", "StatisticSet")
                        .WithMany("DriverStatisticRows")
                        .HasForeignKey("LeagueId", "StatisticSetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FirstRace");

                    b.Navigation("FirstResultRow");

                    b.Navigation("FirstSession");

                    b.Navigation("LastRace");

                    b.Navigation("LastResultRow");

                    b.Navigation("LastSession");

                    b.Navigation("Member");

                    b.Navigation("StatisticSet");
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.EventEntity", b =>
                {
                    b.HasOne("iRLeagueDatabaseCore.Models.TrackConfigEntity", "Track")
                        .WithMany()
                        .HasForeignKey("TrackId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("iRLeagueDatabaseCore.Models.ScheduleEntity", "Schedule")
                        .WithMany("Events")
                        .HasForeignKey("LeagueId", "ScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Schedule");

                    b.Navigation("Track");
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.EventResultConfigs", b =>
                {
                    b.HasOne("iRLeagueDatabaseCore.Models.EventEntity", "Event")
                        .WithMany()
                        .HasForeignKey("LeagueId", "EventRefId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("iRLeagueDatabaseCore.Models.ResultConfigurationEntity", "ResultConfig")
                        .WithMany()
                        .HasForeignKey("LeagueId", "ResultConfigRefId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("ResultConfig");
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.EventResultEntity", b =>
                {
                    b.HasOne("iRLeagueDatabaseCore.Models.EventEntity", "Event")
                        .WithOne("EventResult")
                        .HasForeignKey("iRLeagueDatabaseCore.Models.EventResultEntity", "LeagueId", "EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.FilterOptionEntity", b =>
                {
                    b.HasOne("iRLeagueDatabaseCore.Models.ResultConfigurationEntity", "PointFilterResultConfig")
                        .WithMany("PointFilters")
                        .HasForeignKey("LeagueId", "PointFilterResultConfigId")
                        .OnDelete(DeleteBehavior.ClientCascade);

                    b.HasOne("iRLeagueDatabaseCore.Models.ResultConfigurationEntity", "ResultFilterResultConfig")
                        .WithMany("ResultFilters")
                        .HasForeignKey("LeagueId", "ResultFilterResultConfigId")
                        .OnDelete(DeleteBehavior.ClientCascade);

                    b.Navigation("PointFilterResultConfig");

                    b.Navigation("ResultFilterResultConfig");
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.IncidentReviewEntity", b =>
                {
                    b.HasOne("iRLeagueDatabaseCore.Models.SessionEntity", "Session")
                        .WithMany("IncidentReviews")
                        .HasForeignKey("LeagueId", "SessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Session");
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.IRSimSessionDetailsEntity", b =>
                {
                    b.HasOne("iRLeagueDatabaseCore.Models.EventEntity", "Event")
                        .WithMany("SimSessionDetails")
                        .HasForeignKey("LeagueId", "EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.LeagueMemberEntity", b =>
                {
                    b.HasOne("iRLeagueDatabaseCore.Models.LeagueEntity", "League")
                        .WithMany("LeagueMembers")
                        .HasForeignKey("LeagueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("iRLeagueDatabaseCore.Models.MemberEntity", "Member")
                        .WithMany()
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("iRLeagueDatabaseCore.Models.TeamEntity", "Team")
                        .WithMany("Members")
                        .HasForeignKey("LeagueId", "TeamId");

                    b.Navigation("League");

                    b.Navigation("Member");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.PaymentEntity", b =>
                {
                    b.HasOne("iRLeagueDatabaseCore.Models.LeagueEntity", "League")
                        .WithMany("Payments")
                        .HasForeignKey("LeagueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("iRLeagueDatabaseCore.Models.SubscriptionEntity", "Subscription")
                        .WithMany("Payments")
                        .HasForeignKey("PlanId");

                    b.Navigation("League");

                    b.Navigation("Subscription");
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.PointRuleEntity", b =>
                {
                    b.HasOne("iRLeagueDatabaseCore.Models.LeagueEntity", "League")
                        .WithMany("PointRules")
                        .HasForeignKey("LeagueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("League");
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.ProtestEntity", b =>
                {
                    b.HasOne("iRLeagueDatabaseCore.Models.LeagueMemberEntity", "Author")
                        .WithMany()
                        .HasForeignKey("LeagueId", "AuthorMemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("iRLeagueDatabaseCore.Models.SessionEntity", "Session")
                        .WithMany()
                        .HasForeignKey("LeagueId", "SessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Session");
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.Protests_LeagueMembers", b =>
                {
                    b.HasOne("iRLeagueDatabaseCore.Models.LeagueMemberEntity", "Member")
                        .WithMany()
                        .HasForeignKey("LeagueId", "MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("iRLeagueDatabaseCore.Models.ProtestEntity", "Protest")
                        .WithMany()
                        .HasForeignKey("LeagueId", "ProtestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Member");

                    b.Navigation("Protest");
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.ResultConfigurationEntity", b =>
                {
                    b.HasOne("iRLeagueDatabaseCore.Models.LeagueEntity", "League")
                        .WithMany("ResultConfigs")
                        .HasForeignKey("LeagueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("iRLeagueDatabaseCore.Models.ChampSeasonEntity", "ChampSeason")
                        .WithMany("ResultConfigurations")
                        .HasForeignKey("LeagueId", "ChampSeasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("iRLeagueDatabaseCore.Models.ResultConfigurationEntity", "SourceResultConfig")
                        .WithMany()
                        .HasForeignKey("LeagueId", "SourceResultConfigId");

                    b.Navigation("ChampSeason");

                    b.Navigation("League");

                    b.Navigation("SourceResultConfig");
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.ResultRowEntity", b =>
                {
                    b.HasOne("iRLeagueDatabaseCore.Models.MemberEntity", "Member")
                        .WithMany("ResultRows")
                        .HasForeignKey("MemberId")
                        .IsRequired();

                    b.HasOne("iRLeagueDatabaseCore.Models.LeagueMemberEntity", "LeagueMember")
                        .WithMany()
                        .HasForeignKey("LeagueId", "MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("iRLeagueDatabaseCore.Models.SessionResultEntity", "SubResult")
                        .WithMany("ResultRows")
                        .HasForeignKey("LeagueId", "SubSessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("iRLeagueDatabaseCore.Models.TeamEntity", "Team")
                        .WithMany()
                        .HasForeignKey("LeagueId", "TeamId");

                    b.Navigation("LeagueMember");

                    b.Navigation("Member");

                    b.Navigation("SubResult");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.ReviewCommentEntity", b =>
                {
                    b.HasOne("iRLeagueDatabaseCore.Models.ReviewCommentEntity", "ReplyToComment")
                        .WithMany("Replies")
                        .HasForeignKey("LeagueId", "ReplyToCommentId");

                    b.HasOne("iRLeagueDatabaseCore.Models.IncidentReviewEntity", "Review")
                        .WithMany("Comments")
                        .HasForeignKey("LeagueId", "ReviewId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("ReplyToComment");

                    b.Navigation("Review");
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.ReviewCommentVoteEntity", b =>
                {
                    b.HasOne("iRLeagueDatabaseCore.Models.MemberEntity", "MemberAtFault")
                        .WithMany("CommentReviewVotes")
                        .HasForeignKey("MemberAtFaultId");

                    b.HasOne("iRLeagueDatabaseCore.Models.ReviewCommentEntity", "Comment")
                        .WithMany("ReviewCommentVotes")
                        .HasForeignKey("LeagueId", "CommentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("iRLeagueDatabaseCore.Models.VoteCategoryEntity", "VoteCategory")
                        .WithMany("CommentReviewVotes")
                        .HasForeignKey("LeagueId", "VoteCategoryId");

                    b.Navigation("Comment");

                    b.Navigation("MemberAtFault");

                    b.Navigation("VoteCategory");
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.ReviewPenaltyEntity", b =>
                {
                    b.HasOne("iRLeagueDatabaseCore.Models.ScoredResultRowEntity", "ResultRow")
                        .WithMany("ReviewPenalties")
                        .HasForeignKey("LeagueId", "ResultRowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("iRLeagueDatabaseCore.Models.IncidentReviewEntity", "Review")
                        .WithMany("ReviewPenaltys")
                        .HasForeignKey("LeagueId", "ReviewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("iRLeagueDatabaseCore.Models.AcceptedReviewVoteEntity", "ReviewVote")
                        .WithMany("ReviewPenaltys")
                        .HasForeignKey("LeagueId", "ReviewVoteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ResultRow");

                    b.Navigation("Review");

                    b.Navigation("ReviewVote");
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.ScheduleEntity", b =>
                {
                    b.HasOne("iRLeagueDatabaseCore.Models.SeasonEntity", "Season")
                        .WithMany("Schedules")
                        .HasForeignKey("LeagueId", "SeasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Season");
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.ScoredEventResultEntity", b =>
                {
                    b.HasOne("iRLeagueDatabaseCore.Models.EventResultEntity", null)
                        .WithMany("ScoredResults")
                        .HasForeignKey("EventResultEntityLeagueId", "EventResultEntityEventId");

                    b.HasOne("iRLeagueDatabaseCore.Models.ChampSeasonEntity", "ChampSeason")
                        .WithMany("EventResults")
                        .HasForeignKey("LeagueId", "ChampSeasonId");

                    b.HasOne("iRLeagueDatabaseCore.Models.EventEntity", "Event")
                        .WithMany("ScoredEventResults")
                        .HasForeignKey("LeagueId", "EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("iRLeagueDatabaseCore.Models.ResultConfigurationEntity", "ResultConfig")
                        .WithMany()
                        .HasForeignKey("LeagueId", "ResultConfigId");

                    b.Navigation("ChampSeason");

                    b.Navigation("Event");

                    b.Navigation("ResultConfig");
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.ScoredResultRowEntity", b =>
                {
                    b.HasOne("iRLeagueDatabaseCore.Models.MemberEntity", "Member")
                        .WithMany()
                        .HasForeignKey("MemberId");

                    b.HasOne("iRLeagueDatabaseCore.Models.ScoredSessionResultEntity", "ScoredSessionResult")
                        .WithMany("ScoredResultRows")
                        .HasForeignKey("LeagueId", "SessionResultId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("iRLeagueDatabaseCore.Models.TeamEntity", "Team")
                        .WithMany()
                        .HasForeignKey("LeagueId", "TeamId");

                    b.Navigation("Member");

                    b.Navigation("ScoredSessionResult");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.ScoredSessionResultEntity", b =>
                {
                    b.HasOne("iRLeagueDatabaseCore.Models.MemberEntity", "FastestAvgLapDriver")
                        .WithMany("FastestAvgLapResults")
                        .HasForeignKey("FastestAvgLapDriverMemberId");

                    b.HasOne("iRLeagueDatabaseCore.Models.MemberEntity", "FastestLapDriver")
                        .WithMany("FastestLapResults")
                        .HasForeignKey("FastestLapDriverMemberId");

                    b.HasOne("iRLeagueDatabaseCore.Models.MemberEntity", "FastestQualyLapDriver")
                        .WithMany("FastestQualyLapResults")
                        .HasForeignKey("FastestQualyLapDriverMemberId");

                    b.HasOne("iRLeagueDatabaseCore.Models.ScoredEventResultEntity", "ScoredEventResult")
                        .WithMany("ScoredSessionResults")
                        .HasForeignKey("LeagueId", "ResultId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("iRLeagueDatabaseCore.Models.ScoringEntity", "Scoring")
                        .WithMany()
                        .HasForeignKey("LeagueId", "ScoringId");

                    b.Navigation("FastestAvgLapDriver");

                    b.Navigation("FastestLapDriver");

                    b.Navigation("FastestQualyLapDriver");

                    b.Navigation("ScoredEventResult");

                    b.Navigation("Scoring");
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.ScoredTeamResultRowsResultRows", b =>
                {
                    b.HasOne("iRLeagueDatabaseCore.Models.ScoredResultRowEntity", "TeamParentRow")
                        .WithMany()
                        .HasForeignKey("LeagueId", "TeamParentRowRefId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("iRLeagueDatabaseCore.Models.ScoredResultRowEntity", "TeamResultRow")
                        .WithMany()
                        .HasForeignKey("LeagueId", "TeamResultRowRefId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ScoredTeamResultRowsResultRows_ScoredResultRows_LeagueId_Te~1");

                    b.Navigation("TeamParentRow");

                    b.Navigation("TeamResultRow");
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.ScoringEntity", b =>
                {
                    b.HasOne("iRLeagueDatabaseCore.Models.LeagueEntity", null)
                        .WithMany("Scorings")
                        .HasForeignKey("LeagueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("iRLeagueDatabaseCore.Models.ScoringEntity", "ExtScoringSource")
                        .WithMany("DependendScorings")
                        .HasForeignKey("LeagueId", "ExtScoringSourceId");

                    b.HasOne("iRLeagueDatabaseCore.Models.PointRuleEntity", "PointsRule")
                        .WithMany("Scorings")
                        .HasForeignKey("LeagueId", "PointsRuleId");

                    b.HasOne("iRLeagueDatabaseCore.Models.ResultConfigurationEntity", "ResultConfiguration")
                        .WithMany("Scorings")
                        .HasForeignKey("LeagueId", "ResultConfigId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("iRLeagueDatabaseCore.Models.ScheduleEntity", null)
                        .WithMany("Scorings")
                        .HasForeignKey("ScheduleEntityLeagueId", "ScheduleEntityScheduleId");

                    b.Navigation("ExtScoringSource");

                    b.Navigation("PointsRule");

                    b.Navigation("ResultConfiguration");
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.SeasonEntity", b =>
                {
                    b.HasOne("iRLeagueDatabaseCore.Models.LeagueEntity", "League")
                        .WithMany("Seasons")
                        .HasForeignKey("LeagueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("iRLeagueDatabaseCore.Models.ScoringEntity", "MainScoring")
                        .WithMany()
                        .HasForeignKey("MainScoringLeagueId", "MainScoringScoringId");

                    b.Navigation("League");

                    b.Navigation("MainScoring");
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.SessionEntity", b =>
                {
                    b.HasOne("iRLeagueDatabaseCore.Models.EventEntity", "Event")
                        .WithMany("Sessions")
                        .HasForeignKey("LeagueId", "EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.SessionResultEntity", b =>
                {
                    b.HasOne("iRLeagueDatabaseCore.Models.EventResultEntity", "Result")
                        .WithMany("SessionResults")
                        .HasForeignKey("LeagueId", "EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("iRLeagueDatabaseCore.Models.IRSimSessionDetailsEntity", "IRSimSessionDetails")
                        .WithMany()
                        .HasForeignKey("LeagueId", "IRSimSessionDetailsId");

                    b.HasOne("iRLeagueDatabaseCore.Models.SessionEntity", "Session")
                        .WithOne("SessionResult")
                        .HasForeignKey("iRLeagueDatabaseCore.Models.SessionResultEntity", "LeagueId", "SessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IRSimSessionDetails");

                    b.Navigation("Result");

                    b.Navigation("Session");
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.StandingConfigurationEntity", b =>
                {
                    b.HasOne("iRLeagueDatabaseCore.Models.LeagueEntity", "League")
                        .WithMany("StandingConfigs")
                        .HasForeignKey("LeagueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("League");
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.StandingEntity", b =>
                {
                    b.HasOne("iRLeagueDatabaseCore.Models.ChampSeasonEntity", "ChampSeason")
                        .WithMany("Standings")
                        .HasForeignKey("LeagueId", "ChampSeasonId");

                    b.HasOne("iRLeagueDatabaseCore.Models.EventEntity", "Event")
                        .WithMany()
                        .HasForeignKey("LeagueId", "EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("iRLeagueDatabaseCore.Models.SeasonEntity", "Season")
                        .WithMany("Standings")
                        .HasForeignKey("LeagueId", "SeasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("iRLeagueDatabaseCore.Models.StandingConfigurationEntity", "StandingConfig")
                        .WithMany("Standings")
                        .HasForeignKey("LeagueId", "StandingConfigId")
                        .OnDelete(DeleteBehavior.ClientCascade);

                    b.Navigation("ChampSeason");

                    b.Navigation("Event");

                    b.Navigation("Season");

                    b.Navigation("StandingConfig");
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.StandingRowEntity", b =>
                {
                    b.HasOne("iRLeagueDatabaseCore.Models.MemberEntity", "Member")
                        .WithMany()
                        .HasForeignKey("MemberId");

                    b.HasOne("iRLeagueDatabaseCore.Models.StandingEntity", "SeasonStanding")
                        .WithMany("StandingRows")
                        .HasForeignKey("LeagueId", "StandingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("iRLeagueDatabaseCore.Models.TeamEntity", "Team")
                        .WithMany()
                        .HasForeignKey("LeagueId", "TeamId");

                    b.Navigation("Member");

                    b.Navigation("SeasonStanding");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.StandingRows_ScoredResultRows", b =>
                {
                    b.HasOne("iRLeagueDatabaseCore.Models.ScoredResultRowEntity", "ScoredResultRow")
                        .WithMany("StandingRows")
                        .HasForeignKey("LeagueId", "ScoredResultRowRefId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("iRLeagueDatabaseCore.Models.StandingRowEntity", "StandingRow")
                        .WithMany("ResultRows")
                        .HasForeignKey("LeagueId", "StandingRowRefId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ScoredResultRow");

                    b.Navigation("StandingRow");
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.StatisticSetEntity", b =>
                {
                    b.HasOne("iRLeagueDatabaseCore.Models.MemberEntity", "CurrentChamp")
                        .WithMany("StatisticSets")
                        .HasForeignKey("CurrentChampId");

                    b.HasOne("iRLeagueDatabaseCore.Models.SeasonEntity", "Season")
                        .WithMany("StatisticSets")
                        .HasForeignKey("LeagueId", "SeasonId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("CurrentChamp");

                    b.Navigation("Season");
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.TeamEntity", b =>
                {
                    b.HasOne("iRLeagueDatabaseCore.Models.LeagueEntity", "League")
                        .WithMany("Teams")
                        .HasForeignKey("LeagueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("League");
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.TrackConfigEntity", b =>
                {
                    b.HasOne("iRLeagueDatabaseCore.Models.TrackGroupEntity", "TrackGroup")
                        .WithMany("TrackConfigs")
                        .HasForeignKey("TrackGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TrackGroup");
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.VoteCategoryEntity", b =>
                {
                    b.HasOne("iRLeagueDatabaseCore.Models.LeagueEntity", "League")
                        .WithMany("VoteCategories")
                        .HasForeignKey("LeagueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("League");
                });

            modelBuilder.Entity("MemberEntityScoredSessionResultEntity", b =>
                {
                    b.HasOne("iRLeagueDatabaseCore.Models.MemberEntity", null)
                        .WithMany()
                        .HasForeignKey("CleanestDriversId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("iRLeagueDatabaseCore.Models.ScoredSessionResultEntity", null)
                        .WithMany()
                        .HasForeignKey("CleanestDriverResultsLeagueId", "CleanestDriverResultsSessionResultId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MemberEntityScoredSessionResultEntity1", b =>
                {
                    b.HasOne("iRLeagueDatabaseCore.Models.MemberEntity", null)
                        .WithMany()
                        .HasForeignKey("HardChargersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("iRLeagueDatabaseCore.Models.ScoredSessionResultEntity", null)
                        .WithMany()
                        .HasForeignKey("HardChargerResultsLeagueId", "HardChargerResultsSessionResultId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("StatisticSetEntityStatisticSetEntity", b =>
                {
                    b.HasOne("iRLeagueDatabaseCore.Models.StatisticSetEntity", null)
                        .WithMany()
                        .HasForeignKey("DependendStatisticSetsLeagueId", "DependendStatisticSetsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("iRLeagueDatabaseCore.Models.StatisticSetEntity", null)
                        .WithMany()
                        .HasForeignKey("LeagueStatisticSetsLeagueId", "LeagueStatisticSetsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.AcceptedReviewVoteEntity", b =>
                {
                    b.Navigation("ReviewPenaltys");
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.ChampionshipEntity", b =>
                {
                    b.Navigation("ChampSeasons");
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.ChampSeasonEntity", b =>
                {
                    b.Navigation("EventResults");

                    b.Navigation("ResultConfigurations");

                    b.Navigation("Standings");
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.EventEntity", b =>
                {
                    b.Navigation("EventResult");

                    b.Navigation("ScoredEventResults");

                    b.Navigation("Sessions");

                    b.Navigation("SimSessionDetails");
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.EventResultEntity", b =>
                {
                    b.Navigation("ScoredResults");

                    b.Navigation("SessionResults");
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.IncidentReviewEntity", b =>
                {
                    b.Navigation("AcceptedReviewVotes");

                    b.Navigation("Comments");

                    b.Navigation("ReviewPenaltys");
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.LeagueEntity", b =>
                {
                    b.Navigation("Championships");

                    b.Navigation("LeagueMembers");

                    b.Navigation("Payments");

                    b.Navigation("PointRules");

                    b.Navigation("ResultConfigs");

                    b.Navigation("Scorings");

                    b.Navigation("Seasons");

                    b.Navigation("StandingConfigs");

                    b.Navigation("Teams");

                    b.Navigation("VoteCategories");
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.MemberEntity", b =>
                {
                    b.Navigation("AcceptedReviewVotes");

                    b.Navigation("CommentReviewVotes");

                    b.Navigation("DriverStatisticRows");

                    b.Navigation("FastestAvgLapResults");

                    b.Navigation("FastestLapResults");

                    b.Navigation("FastestQualyLapResults");

                    b.Navigation("ResultRows");

                    b.Navigation("StatisticSets");
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.PointRuleEntity", b =>
                {
                    b.Navigation("AutoPenalties");

                    b.Navigation("Scorings");
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.ResultConfigurationEntity", b =>
                {
                    b.Navigation("PointFilters");

                    b.Navigation("ResultFilters");

                    b.Navigation("Scorings");
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.ReviewCommentEntity", b =>
                {
                    b.Navigation("Replies");

                    b.Navigation("ReviewCommentVotes");
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.ScheduleEntity", b =>
                {
                    b.Navigation("Events");

                    b.Navigation("Scorings");
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.ScoredEventResultEntity", b =>
                {
                    b.Navigation("ScoredSessionResults");
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.ScoredResultRowEntity", b =>
                {
                    b.Navigation("AddPenalties");

                    b.Navigation("ReviewPenalties");

                    b.Navigation("StandingRows");
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.ScoredSessionResultEntity", b =>
                {
                    b.Navigation("ScoredResultRows");
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.ScoringEntity", b =>
                {
                    b.Navigation("DependendScorings");
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.SeasonEntity", b =>
                {
                    b.Navigation("ChampSeasons");

                    b.Navigation("Schedules");

                    b.Navigation("Standings");

                    b.Navigation("StatisticSets");
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.SessionEntity", b =>
                {
                    b.Navigation("IncidentReviews");

                    b.Navigation("SessionResult");
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.SessionResultEntity", b =>
                {
                    b.Navigation("ResultRows");
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.StandingConfigurationEntity", b =>
                {
                    b.Navigation("ChampSeasons");

                    b.Navigation("Standings");
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.StandingEntity", b =>
                {
                    b.Navigation("StandingRows");
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.StandingRowEntity", b =>
                {
                    b.Navigation("ResultRows");
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.StatisticSetEntity", b =>
                {
                    b.Navigation("DriverStatisticRows");
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.SubscriptionEntity", b =>
                {
                    b.Navigation("Payments");
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.TeamEntity", b =>
                {
                    b.Navigation("Members");
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.TrackGroupEntity", b =>
                {
                    b.Navigation("TrackConfigs");
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.VoteCategoryEntity", b =>
                {
                    b.Navigation("AcceptedReviewVotes");

                    b.Navigation("CommentReviewVotes");
                });
#pragma warning restore 612, 618
        }
    }
}
