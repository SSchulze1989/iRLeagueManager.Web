@inject IHostEnvironment Env

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <base href="/" />
    <link rel="icon" type="image/x-icon" href="logo/favicon.ico">
    <meta name="color-scheme" content="dark light">
    <link href="iRLeagueManager.Web.styles.css" rel="stylesheet" />
    <link href="https://fonts.googleapis.com/css?family=Roboto:300,400,500,700&display=swap" rel="stylesheet" />
    <link href="_content/MudBlazor/MudBlazor.min.css" rel="stylesheet" />
    <link href="css/site.css" rel="stylesheet" />
    <HeadOutlet @rendermode="InteractiveServer" />
</head>
<body>
    <Routes @rendermode="InteractiveServer" />

    <div id="blazor-error-ui">
        @if (Env.IsDevelopment())
        {
            <text>
                An unhandled exception has occurred. See browser dev tools for details.
            </text>
        }
        else
        {
            <text>
                An error has occurred. This app may no longer respond until reloaded.
            </text>
        }
        <a href="" class="reload">Reload</a>
        <a class="dismiss">🗙</a>
    </div>

    <script src="_framework/blazor.web.js"></script>
    <script src="_content/MudBlazor/MudBlazor.min.js"></script>
    <script>
        window.enableTooltips = (defaultPlacement) => {

            document.querySelectorAll('[data-bs-toggle="tooltip"]')
                .forEach(function (tooltipEl) {
                    let tooltip = bootstrap.Tooltip.getInstance(tooltipEl);
                    if (!tooltip)
                    {
                        new bootstrap.Tooltip(tooltipEl, {delay: {"show": 500, "hide": 100}, placement: defaultPlacement, html: true, trigger: 'hover'});
                    }
                });
        }

        window.GetIANATimeZone = () => {
            return Intl.DateTimeFormat().resolvedOptions().timeZone;
        }

        window.scrollToElement = (element) => {
            if (!element) {
                return false;
            }
            element.scrollIntoView(true);
            return true;
        }

        window.scrollToElementId = (elementId) => {
            var element = document.getElementById(elementId);
            if (!element) {
                console.warn('element was not found', elementId);
                return false;
            }
            return scrollToElement(element);
        }

        window.clipboardCopy = {
            copyText: function (text) {
                navigator.clipboard.writeText(text).then(function () {
                    alert('"' + text + '"' + '\nCopied to clipboard!');
                })
                    .catch(function (error) {
                        alert(error);
                    });
            }
        };

        window.scrollPageElementToTop = (elementId) => {
            var element = document.getElementById(elementId);
            if (!element) {
                console.warn('element was not found', elementId);
                return false;
            }
            var em = parseFloat(getComputedStyle(document.documentElement).fontSize);
            var headerOffset = 4 * em;
            var elementPosition = element.getBoundingClientRect().top;
            var offsetPosition = elementPosition + window.scrollY - headerOffset;
  
            window.scrollTo({
                 top: offsetPosition,
                 behavior: "smooth"
            });
        }

        window.scrollPageToTop = (elementId) => {  
            window.scrollTo({
                 top: 0,
                 behavior: "smooth"
            });
        }
    </script>
</body>
</html>
