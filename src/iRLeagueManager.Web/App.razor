@using Blazored.Modal
@using System.Globalization;
@using iRLeagueManager.Web.ViewModels
@inject EventListViewModel EventList
@inject LeagueApiService ApiService
@inject SharedStateService SharedState
@inject IJSRuntime JsRuntime

<CascadingValue Value="EventList">
<CascadingValue Value="SharedState">
<CascadingBlazoredModal>
<CascadingAuthenticationState>
    <Router AppAssembly="@typeof(App).Assembly">
        <Found Context="routeData">
            <CascadingValue Value="routeData">
                <AuthorizeRouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)">
                    <NotAuthorized>
                        <LoginRedirect/>
                    </NotAuthorized>
                </AuthorizeRouteView>
                <FocusOnNavigate RouteData="@routeData" Selector="h1" />
            </CascadingValue>
        </Found>
        <NotFound>
            <PageTitle>Not found</PageTitle>
            <LayoutView Layout="@typeof(MainLayout)">
                <p role="alert">Sorry, there's nothing at this address.</p>
            </LayoutView>
        </NotFound>
    </Router>
</CascadingAuthenticationState>
</CascadingBlazoredModal>
</CascadingValue>
</CascadingValue>

@code {
    public DateTimeOffset LocalTimeOffset { get; set; }
    public TimeZoneInfo LocalTimeZone { get; set; } = TimeZoneInfo.Utc;

    private TimeSpan? userTime { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (userTime == null)
        {
            try
            {
                int timeDiffer = await JsRuntime.InvokeAsync<int>("GetTimezoneValue");
                userTime = TimeSpan.FromMinutes(-timeDiffer);
                var ianaTimeZone = await JsRuntime.InvokeAsync<string>("GetIANATimeZone");
                var timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById(ianaTimeZone);
                LocalTimeZone = timeZoneInfo;
                SharedState.LocalTimeZone = LocalTimeZone;
            }
            catch (InvalidOperationException)
            {
                // this throws when jsinterop is not yet available
            }
        }

        // Converting to local time using UTC and local time minute difference.
        LocalTimeOffset = DateTimeOffset.UtcNow.ToOffset(userTime ?? TimeSpan.Zero);
        SharedState.LocalTimeOffset = LocalTimeOffset.Offset;
    }
}