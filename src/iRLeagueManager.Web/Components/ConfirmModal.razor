<div class="container justify-content-center preserve-format">
    @if (AllowMarkup)
    {
        @((MarkupString)Text)
    }
    else
    {
        @Text
    }
</div>
<div class="pt-2 pb-2">
    <div class="row">
        @switch (ButtonTypes)
        {
            case ButtonTypes.Ok:
                <div class="col d-flex justify-content-center">
                    <button class="btn btn-primary" @onclick=OkClick>@OkButtonText</button>
                </div>
                break;
            case ButtonTypes.OkCancel:
                <div class="col d-flex justify-content-center">
                    <button class="btn btn-secondary" @onclick=OkClick>@OkButtonText</button>
                </div>
                <div class="col d-flex justify-content-center">
                    <button class="btn btn-primary" @onclick=CancelClick>@CancelButtonText</button>
                </div>
                break;
            case ButtonTypes.YesNo:
                <div class="col d-flex justify-content-center">
                    <button class="btn btn-outline-primary" @onclick=OkClick>Yes</button>
                </div>
                <div class="col d-flex justify-content-center">
                    <button class="btn btn-secondary" @onclick=CancelClick>No</button>
                </div>
                break;
        }
    </div>
</div>

@code {
    [CascadingParameter]
    public BlazoredModalInstance ModalInstance { get; set; } = default!;
    [Parameter]
    public string Text { get; set; } = string.Empty;
    [Parameter]
    public ButtonTypes ButtonTypes { get; set; }
    [Parameter]
    public bool AllowMarkup { get; set; } = false;
    [Parameter]
    public string OkButtonText { get; set; } = "Ok";
    [Parameter]
    public string CancelButtonText { get; set; } = "Cancel";

    private void OkClick()
    {
        ModalInstance.CloseAsync(ModalResult.Ok());
    }

    private void CancelClick()
    {
        ModalInstance.CancelAsync();
    }
}
