@using iRLeagueApiCore.Common.Models
@using iRLeagueManager.Web.ViewModels
@inherits MvvmComponentBase

@{var maxRaceCount = @Schedule.MaxRaceCount;}
<div class="card my-2 pb-0">
    <LoadingHeader class="card-header">
        <div class="input-group @(EditName ? "" : " d-none")">
            <input type="text" class="form-control" @bind="Schedule.Name" @ref="ScheduleNameInput"/>
            <button type="button" class="btn btn-success" @onclick=@SaveName>&#10004</button>
            <button type="button" class="btn btn-danger" @onclick=@ResetName>&#128473;</button>
        </div>
        <div class="@(EditName ? " d-none" : "")"> 
            <div class="pointer" @onclick=@EditNameClick>@Bind(Schedule, x => x.Name)</div>
        </div>
    </LoadingHeader>
    <div class="card-body">
        @if(Schedule.Events != null)
        {
            <table class="table table-striped table-hover">
                <thead>
                    <tr>
                        <th>Nr.</th>
                        <th>Date</th>
                        <th>Name</th>
                        <th>Track</th>
                        <th>Laps</th>
                        <th>Start</th>
                        <th>Duration</th>
                        <th>Practice</th>
                        <th>Qualy</th>
                        @for(int i=0; i<maxRaceCount; i++)
                        {
                            <th>Race @(i+1)</th>
                        }
                    </tr>
                </thead>
                <tbody>
                @foreach((var @event, var index) in @Bind(Schedule, x => x.Events).Select((x, i) => (x, i)))
                {
                    var eventId = @event.EventId;
                    var races = @Bind(@event, x => x.Races);
                    <tr @onclick="@(() => OnTableRowClick(@event))" class="pointer">
                        <td>@(index + 1).</td>
                        <td>@Bind(@event, x => x.Date).ToString(@"dd.MM.yyyy")</td>
                        <td>@Bind(@event, x => x.Name)</td>
                        <td>@Bind(@event, x => x.TrackId)</td>
                        <td>@Bind(@event, x => x.Laps)</td>
                        <td>@Bind(@event, x => x.StartTime).ToString(@"HH:mm")</td>
                        <td>@Bind(@event, x => x.Duration).ToString(@"HH:mm")</td>
                        <td>@(DurationString(Bind(@event, x=> x.Practice)))</td>
                        <td>@(DurationString(Bind(@event, x=> x.Qualifying)))</td>
                        @for(int i=0; i<maxRaceCount; i++)
                        {
                            var race = races.ElementAtOrDefault(i);
                            @if (race != null)
                            {
                                <td>@DurationString(race)</td>
                            }
                            else 
                            {
                                <td></td>
                            }
                        }
                    </tr>
                }
                </tbody>
            </table>
        }
    </div>
</div>

@code {
    [CascadingParameter]
    public IModalService ModalService { get; set; } = default!;
    [Parameter, EditorRequired]
    public ScheduleViewModel Schedule { get; set; } = default!;

    private ElementReference ScheduleNameInput { get; set; }

    private bool editName;
    public bool EditName
    {
        get => editName;
        set
        {
            editName = value;
            StateHasChanged();
        }
    }

    protected override void OnParametersSet()
    {
        _ = Schedule ?? throw new InvalidOperationException($"Parameter {nameof(Schedule)} not allowed to be null");
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (EditName)
        {
            await ScheduleNameInput.FocusAsync();
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    private string DurationString(SessionViewModel? session)
    {
        if (session == null)
        {
            return "-";
        }

        var parts = new List<string>();
        if (session.Duration.TimeOfDay != TimeSpan.Zero)
        {
            parts.Add(session.Duration.ToString(@"HH:mm"));
        }
        if (session.Laps > 0)
        {
            parts.Add(session.Laps.ToString() + " Laps");
        }

        if (parts.Count == 0)
        {
            return "-";
        }

        return string.Join(" / ", parts);
    }

    private void EditNameClick()
    {
        EditName = true;
        StateHasChanged();
    }

    private async Task SaveName()
    {
        var success = await Schedule.SaveChangesAsync();
        if (success)
        {
            EditName = false;
        }
    }

    private async Task OnTableRowClick(EventViewModel eventViewModel)
    {
        //navigationManager.NavigateTo($"{LeagueName}/Results/Session/{sessionId}");
        var parameters = new ModalParameters()
            .Add(nameof(EditEventModal.EventModel), eventViewModel.CopyModel());
        var options = new ModalOptions()
        {
            Size = ModalSize.Medium,
            DisableBackgroundCancel = true,
        };
        var modal = ModalService.Show<EditEventModal>("Edit Event", parameters, options);
        var result = await modal.Result;
        if (result.Confirmed && result.Data is EventModel eventModel)
        {
            eventViewModel.SetModel(eventModel);
        }
    }

    private async Task ResetName()
    {
        if (EditName == false)
        {
            return;
        }
        await Schedule.Reload();
        EditName = false;
    }
}
