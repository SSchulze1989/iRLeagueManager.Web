@using iRLeagueApiCore.Common.Models
@using iRLeagueManager.Web.ViewModels
@inherits MvvmComponentBase

@{var maxRaceCount = @Schedule.MaxRaceCount;}
<div @attributes=AdditionalAttributes>
    <div class="card my-2 pb-0">
        <LoadingHeader class="card-header">
            @if(ReadOnly == false)
            {
                <div class="input-group @(EditName ? "" : " d-none")">
                    <input type="text" class="form-control" @bind="Schedule.Name" @ref="ScheduleNameInput" @onkeydown=@(async args => { if (args.Key == "Enter") { await SaveName(); } })/>
                    <button type="button" class="btn btn-success @(Schedule.Loading ? "disabled" : "")" @onclick=@SaveName>
                        &#10004 
                        @if (Schedule.Loading)
                        {
                            <span class="spinner-border spinner-border-sm mr-1"></span>
                        }
                    </button>
                    <button type="button" class="btn btn-danger @(Schedule.Loading ? "disabled" : "")" @onclick=@ResetName>&#128473;</button>
                </div>
                <div class="d-flex hover-button pointer @(EditName ? " d-none" : "")" @onclick=@EditNameClick> 
                    <div>@Bind(Schedule, x => x.Name)</div>
                    <div class="hover-button-text">
                        <span class="oi oi-pencil" />
                    </div>
                </div>
            }
            else
            {
                <div>@Bind(Schedule, x => x.Name)</div>
            }
        </LoadingHeader>
        <div class="card-body overflow-scroll">
            @if(Schedule.Events != null)
            {
                <table class="table table-striped table-hover">
                    <thead>
                        <tr>
                            <th>Nr.</th>
                            <th>Date</th>
                            <th>Name</th>
                            <th>Track</th>
                            <th>Laps</th>
                            <th>Start</th>
                            <th>Duration</th>
                            <th>Practice</th>
                            <th>Qualy</th>
                            @for(int i=0; i<maxRaceCount; i++)
                            {
                                <th>Race @(i+1)</th>
                            }
                        </tr>
                    </thead>
                    <tbody>
                    @foreach((var @event, var index) in @Bind(Schedule, x => x.Events).Select((x, i) => (x, i)))
                    {
                        var eventId = @event.EventId;
                        var races = @Bind(@event, x => x.Races);

                        <tr @onclick="@(() => OnTableRowClick(@event))" class="@(ReadOnly ? "" : "pointer")">
                            <td>@(index + 1).</td>
                            <td>@(@event.Date.ToString(@"dd.MM.yyyy"))</td>
                            <td>@(@event.Name)</td>
                            <td>@(@event.TrackName)@(@event.ConfigName == "-" ? "" : $" - {@event.ConfigName}")</td>
                            <td>@(@event.Laps)</td>
                            <td>@(@event.StartTime.ToString(@"HH:mm"))</td>
                            <td>@(@event.Duration.ToString(@"HH:mm"))</td>
                            <td>@(DurationString(@event.Practice))</td>
                            <td>@(DurationString(@event.Qualifying))</td>
                            @for(int i=0; i<maxRaceCount; i++)
                            {
                                var race = races.ElementAtOrDefault(i);
                                @if (race != null)
                                {
                                    <td>@DurationString(race)</td>
                                }
                                else 
                                {
                                    <td></td>
                                }
                            }
                        </tr>
                    }
                    </tbody>
                </table>
            }
        </div>
    </div>
</div>

@code {
    [CascadingParameter]
    public IModalService ModalService { get; set; } = default!;
    [Parameter, EditorRequired]
    public ScheduleViewModel Schedule { get; set; } = default!;
    [Parameter(CaptureUnmatchedValues = true)]
    public IDictionary<string, object>? AdditionalAttributes { get; set; }
    [Parameter]
    public bool ReadOnly { get; set; } = false;

    private ElementReference ScheduleNameInput { get; set; }

    private bool editName;
    public bool EditName
    {
        get => editName;
        set
        {
            editName = value;
            InvokeAsync(StateHasChanged);
        }
    }

    protected override void OnParametersSet()
    {
        _ = Schedule ?? throw new InvalidOperationException($"Parameter {nameof(Schedule)} not allowed to be null");
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (EditName)
        {
            await ScheduleNameInput.FocusAsync();
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    private string DurationString(SessionViewModel? session)
    {
        if (session == null)
        {
            return "-";
        }

        var parts = new List<string>();
        if (session.Duration.TimeOfDay != TimeSpan.Zero)
        {
            parts.Add(session.Duration.ToString(@"HH:mm"));
        }
        if (session.Laps > 0)
        {
            parts.Add(session.Laps.ToString() + " Laps");
        }

        if (parts.Count == 0)
        {
            return "-";
        }

        return string.Join(" / ", parts);
    }

    private void EditNameClick()
    {
        EditName = true;
        InvokeAsync(StateHasChanged);
    }

    private async Task SaveName()
    {
        var success = await Schedule.SaveChangesAsync();
        await Task.Delay(1000);
        if (success)
        {
            EditName = false;
        }
    }

    private async Task OnTableRowClick(EventViewModel eventViewModel)
    {
        if (ReadOnly)
        {
            return;
        }
        //navigationManager.NavigateTo($"{LeagueName}/Results/Session/{sessionId}");
        var parameters = new ModalParameters()
            .Add(nameof(EditEventModal.EventModel), eventViewModel.CopyModel());
        var options = new ModalOptions()
        {
            Size = ModalSize.Medium,
            DisableBackgroundCancel = true,
        };
        var modal = ModalService.Show<EditEventModal>("Edit Event", parameters, options);
        var result = await modal.Result;
        if (result.Confirmed && result.Data is EventModel eventModel)
        {
            eventViewModel.SetModel(eventModel);
        }
    }

    private async Task ResetName()
    {
        if (EditName == false)
        {
            return;
        }
        await Schedule.Reload();
        EditName = false;
    }
}
