@using System.Text.Json
@using iRLeagueApiCore.Common.Models
@using iRLeagueManager.Web.ViewModels
@inherits MvvmComponentBase
@inject EventViewModel Event
@inject JsonSerializerOptions jsonOptions


<EditForm Model=Event OnValidSubmit=Submit>
    <InputGroup Label="Name"> 
        <InputText class="form-control" placeholder="Event Name" aria-label="EventName" id="name" @bind-Value="Event.Name"/>
    </InputGroup>
    <InputGroup Label="Date">
        <InputDate class="form-control" aria-label="Date" id="date" @bind-Value="Event.Date" />
    </InputGroup>
    <InputGroup Label="Start-Time">
        <input class="form-control" type="time" arial-label="StartTime" @bind="Event.StartTime"/>
    </InputGroup>
    <InputGroup Label="TrackId">
        <input class="form-control" type="number" placholder="123" aria-label="TrackId" @bind="Event.TrackIdString"/>
    </InputGroup>
    <InputGroup Label="Duration">
        <input class="form-control" type="time" aria-label="Duration" @bind="Event.Duration"/>
    </InputGroup>
    <div class="card m-2">
        <div class="card-body">
            <div class="card-card-title">
                <div class="input-group">
                    <div class="input-group-prepend">
                        <div class="input-group-text d-block">
                            <InputCheckbox @bind-Value="Event.HasPractice"/>
                        </div>
                    </div>
                    <label class="form-control">Practice</label>
                </div>
            </div>
            @if (@Bind(Event, x => x.Practice) != null)
            {
                <InputGroup Label="Duration">
                    <input class="form-control" type="time" arial-label="StartTime" @bind="Event.Practice!.Duration"/>
                </InputGroup>
            }
        </div>
    </div>
    @if (@Bind(Event, x => x.Qualifying) != null)
    {
        <div class="card m-2">
            <div class="card-body">
                <h5 class="cart-title">Qualifying</h5>
                <InputGroup Label="Duration">
                    <input class="form-control" type="time" arial-label="StartTime" @bind="Event.Qualifying!.Duration"/>
                </InputGroup>
            </div>
        </div>
    }
    @if (@Bind(Event, x => x.Race) != null)
    {
        <div class="card m-2">
            <div class="card-body">
                <h5 class="card-Title">Race</h5>
                <InputGroup Label="Duration">
                    <input class="form-control" type="time" arial-label="StartTime" @bind="Event.Race!.Duration"/>
                </InputGroup>
            </div>
        </div>
    }
    @*@foreach(var session in @Bind(Event, x => x.Sessions))
    {
        <div class="p-2 m-2 border border-primary">
            <label>@Bind(session, x => x.SessionNr)</label>
            <InputGroup Label="Name">
                <InputText class="form-control" placeholder="Session Name" aria-label="@($"Session{@session.SessionNr}")" id="@($"session_{session.SessionNr}_name")"
                    @bind-Value="session.Name" />
            </InputGroup>
        </div>
    }*@
    <CancelSubmitButtons ModelState=Event OnCancel=Cancel/>
</EditForm>

@code {
    private CancellationTokenSource cts = new();

    [CascadingParameter]
    public BlazoredModalInstance? ModalInstance { get; set; }
    //[Parameter]
    //public EventViewModel Event { get; set; } = default!;
    [Parameter]
    public EventModel EventModel { get; set; } = default!;

    protected override void OnParametersSet()
    {
        _ = EventModel ?? throw new InvalidOperationException($"Error while setting parameters on {nameof(EditEventModal)}. ${nameof(EventModel)} is not allowed to be null but was null");
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender == false)
        {
            return;
        }
        // create deep copy of model
        var modelCopy = JsonSerializer.Deserialize<EventModel>(JsonSerializer.Serialize(EventModel, jsonOptions), jsonOptions)
            ?? throw new InvalidOperationException("Could not create copy of EventModel while opening Modal");
        Event.SetModel(modelCopy);
    }

    private async Task Submit()
    {
        var success = await Event.SaveChangesAsync(cts.Token);
        if (success && ModalInstance != null)
        {
            var result = ModalResult.Ok(Event.GetModel());
            await ModalInstance.CloseAsync(result);
        }
    }

    private async Task Cancel()
    {
        if (ModalInstance != null)
        {
            await ModalInstance.CancelAsync();   
        }
    }

    protected override void Dispose(bool disposing)
    {
        if (disposing == false)
        {
            cts.Cancel();
            cts.Dispose();
        }
        base.Dispose(disposing);
    }
}
