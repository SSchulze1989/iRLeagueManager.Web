@using System.Text.Json
@using iRLeagueApiCore.Common.Enums
@using iRLeagueApiCore.Common.Models
@using iRLeagueApiCore.Common.Models.Tracks
@using iRLeagueManager.Web.ViewModels
@inherits MvvmComponentBase
@inject EventViewModel Event
@inject JsonSerializerOptions jsonOptions
@inject TrackListService trackListService

<EditForm Model=Event OnValidSubmit=Submit>
    <div class="input-group-list mb-2">
        <InputGroup Label="Name"> 
            <InputText class="form-control" placeholder="Event Name" aria-label="EventName" id="name" @bind-Value="Event.Name"/>
        </InputGroup>
        <InputGroup Label="Date">
            <InputDate class="form-control" aria-label="Date" id="date" @bind-Value="Event.Date" />
        </InputGroup>
        <InputGroup Label="Start-Time">
            <input class="form-control" type="time" arial-label="StartTime" @bind="Event.StartTime"/>
        </InputGroup>
        <InputGroup Label="Track">
            <BlazoredTypeahead @bind-Value=SelectedTrack  
                               SearchMethod=SearchTracks 
                               MinimumLength=1
                               MaximumSuggestions=100
                               EnableDropDown=true
                               class="form-control py-0 px-0 ps-1 border border-top-0"
                               style="border-color: #ced4da !important"
                               placeholder="Search by Track name...">
                <SelectedTemplate Context=track >
                    @track?.TrackName
                </SelectedTemplate>
                <ResultTemplate Context=track>
                    @track.TrackName
                </ResultTemplate>
            </BlazoredTypeahead>
        </InputGroup>
        <InputGroup Label="Config"  Class="">
            <select class="form-select" aria-label="SelectTrackConfig" @bind="Event.TrackId"
                placeholder="..."
                disabled="@(SelectedTrack == null)">
                @if (SelectedTrack != null)
                {
                    @foreach(var config in SelectedTrack.Configs)
                    {
                        <option value="@config.TrackId">@config.ConfigName</option>
                    }
                }
            </select>
        </InputGroup>
    </div>
    <div class="input-group-list mb-2">
        <div class="input-group">
            <div class="input-group-text">
                <InputCheckbox class="form-check-input mt-0" @bind-Value="Event.HasPractice"/>
            </div>
            <label class="form-control">Practice</label>
        </div>
        <EditSession Session=Event.Practice />
    </div>
    <div class="input-group-list mb-2">
        <div class="input-group">
            <div class="input-group-text">
                <InputCheckbox class="form-check-input mt-0" @bind-Value="Event.HasQualifying"/>
            </div>
            <label class="form-control">Qualifying</label>
        </div>
        <EditSession Session=Event.Qualifying />
    </div>
    <div class="card mb-2">
        <div class="card-body">
            <div class="card-title">
                Race Sessions
            </div>
            @foreach(var session in @Bind(Event, x => x.Races))
            {
                <div class="input-group-list">
                    <div class="input-group">
                        <InputText class="form-control" @bind-Value="session.Name"/>
                        <button class="btn btn-outline-danger" type="button" style="border-bottom: 1px; border-bottom-style: solid; margin-bottom: -1px" @onclick="@(() => Event.Sessions.Remove(session))"><span class="oi oi-trash"/></button>
                    </div>
                    <EditSession Session=session />
                </div>
                @if (@Event.CanMoveSessionDown(session))
                {
                    <div class="container d-flex justify-content-center my-1 py-0">
                        <button class="btn btn-outline-secondary fw-bold px-5 py-0 align-content-center" style="height: 1.5rem; font-size: 0.75rem" type="button" @onclick="@(() => Event.MoveSessionDown(session))">&uarr; &darr;</button>
                    </div>
                }
            }
            <div class="mt-3">
                <button class="btn btn-outline-secondary" type="button" @onclick="@(() => Event.AddSession("Race", SessionType.Race, onlyOnce: false))">Add Race</button>
            </div>
        </div>
    </div>
    <div class="input-group-list mb-2">
        <InputGroup Label="Result Configs">
            <BlazoredTypeahead @bind-Values=Event.ResultConfigs  
                               SearchMethod=SearchResultConfigs 
                               MinimumLength=0
                               MaximumSuggestions=10
                               EnableDropDown=true
                               DeleteItemsOnBackspace=false
                               class="form-control py-0 px-0 ps-1 border"
                               style="border-color: #ced4da !important"
                               placeholder="Enter config name...">
                <SelectedTemplate Context=config >
                    @config?.Name
                </SelectedTemplate>
                <ResultTemplate Context=config>
                    @config.Name
                </ResultTemplate>
                <NotFoundTemplate Context=name>
                    @name not found!
                </NotFoundTemplate>
            </BlazoredTypeahead>
        </InputGroup>
    </div>
    <CancelSubmitButtons ModelState=Event SubmitText="Save" OnCancel=Cancel/>
</EditForm>

@code {
    private CancellationTokenSource cts = new();

    [CascadingParameter]
    public BlazoredModalInstance ModalInstance { get; set; } = default!;

    [Parameter]
    public EventModel EventModel { get; set; } = default!;

    private IList<TrackGroupModel> TrackList { get; set; } = Array.Empty<TrackGroupModel>();

    private TrackGroupModel? selectedTrack;
    private TrackGroupModel? SelectedTrack
    {
        get => selectedTrack;
        set
        {
            if (selectedTrack != value)
            {
                SetSelectedTrack(value);
            }
        }
    }

    private IEnumerable<ResultConfigInfoModel> ResultConfigs { get; set; } = Array.Empty<ResultConfigInfoModel>();

    protected override void OnParametersSet()
    {
        _ = ModalInstance ?? throw BlazorParameterNullException.New(this, ModalInstance);
        _ = EventModel ?? throw BlazorParameterNullException.New(this, EventModel);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender == false)
        {
            return;
        }
        Event.SetModel(EventModel);
        TrackList = await trackListService.GetTracks();
        SelectedTrack = TrackList.FirstOrDefault(x => x.Configs.Any(y => y.TrackId == EventModel.TrackId));
        await Event.LoadAvailableResultConfigs();
        ResultConfigs = Event.AvailableResultConfigs;
        await InvokeAsync(StateHasChanged);
    }

    private void SetSelectedTrack(TrackGroupModel? track)
    {
        if (track == null)
        {
            selectedTrack = null;
            Event.TrackId = null;
            return;
        }

        selectedTrack = track;
        var trackGroup = track.Configs.FirstOrDefault(x => x.TrackId == Event.TrackId)
            ?? track.Configs.FirstOrDefault();
        Event.TrackId = trackGroup?.TrackId;
    }

    private async Task<IEnumerable<TrackGroupModel>> SearchTracks(string search)
    {
        return await Task.FromResult(TrackList.Where(x => x.TrackName.Contains(search, StringComparison.OrdinalIgnoreCase)));
    }

    private async Task<IEnumerable<ResultConfigInfoModel>> SearchResultConfigs(string name)
    {
        return await Task.FromResult(ResultConfigs
            .Where(x => x.Name.Contains(name, StringComparison.OrdinalIgnoreCase) || x.DisplayName.Contains(name, StringComparison.OrdinalIgnoreCase)));
    }

    private async Task Submit()
    {
        var status = await Event.SaveChangesAsync(cts.Token);
        var result = ModalResult.Ok(Event.GetModel());
        await ModalInstance.CloseAsync(result);
    }

    private async Task Cancel()
    {
        await ModalInstance.CancelAsync();
    }

    protected override void Dispose(bool disposing)
    {
        if (disposing == false)
        {
            cts.Cancel();
            cts.Dispose();
        }
        base.Dispose(disposing);
    }
}
