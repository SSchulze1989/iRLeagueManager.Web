@using System.Collections.Specialized
@using System.Globalization
@using iRLeagueManager.Web.ViewModels
@using System.Linq

<div @attributes=AdditionalAttributes class=@CssClass >
    <label class="input-group-text">Select Event</label>
    <select @bind=SelectedIndex class="form-select">
        @foreach((var @event, var index) in Events.Select((x, i) => (x, i)))
        {
            <option value="@(index)">@((index + 1).ToString("00")). @(@event.Date) - @(@event.Name)</option>
        }
    </select>
    <button class="btn btn-outline-secondary" type="button" @onclick=EventMovePrevious disabled=@(SelectedIndex == 0)><span class="oi oi-chevron-left"></span></button>
    <button class="btn btn-outline-secondary" type="button" @onclick=EventMoveNext disabled=@(SelectedIndex == Events.Count-1)><span class="oi oi-chevron-right"></span></button>
</div>

@code {
    [Parameter(CaptureUnmatchedValues=true)]
    public IReadOnlyDictionary<string, object>? AdditionalAttributes { get; set; }
    private IList<EventViewModel> events = default!;
    [Parameter, EditorRequired]
    public IList<EventViewModel> Events
    {
        get => events;
        set
        {
            if (events is INotifyCollectionChanged oldCollectionChanged)
            {
                oldCollectionChanged.CollectionChanged -= OnEventsCollectionChanged;
            }
            if (events != value)
            {
                events = value;
                OnEventsChanged();
            }
            if (events is INotifyCollectionChanged newCollectionChanged)
            {
                newCollectionChanged.CollectionChanged += OnEventsCollectionChanged;
            }
        }
    }

    private EventViewModel? selected = default;
    [Parameter]
    public EventViewModel? Selected 
    { 
        get => selected;
        set
        {
            if (value != this.selected)
            {
                this.selected = value;
                _ = SelectedChanged.InvokeAsync(value);
            }
        }
    }

    [Parameter]
    public EventCallback<EventViewModel?> SelectedChanged { get; set; }

    private const string BaseClass = "input-group w-50";
    private string CssClass
    {
        get
        {
            if (AdditionalAttributes == null || AdditionalAttributes.TryGetValue("class", out var @class) == false)
            {
                return BaseClass;
            }
            var classAttributeValue = Convert.ToString(@class, CultureInfo.InvariantCulture);
            return $"{BaseClass} {classAttributeValue}";
        }
    }

    private int selectedIndex = 0;
    public int SelectedIndex
    {
        get => selectedIndex;
        set
        {
            if (selectedIndex != value)
            {
                selectedIndex = value;
                _ =OnSelectionChanged();
            }
        }
    }

    protected override void OnParametersSet()
    {
        if (Selected != null && Events.IndexOf(Selected) != selectedIndex)
        {
            SelectedIndex = Events.IndexOf(Selected);
        }
    }

    private void OnEventsCollectionChanged(object? sender, NotifyCollectionChangedEventArgs e)
    {
        // Update selectedIndex
        if (Selected != null && Events.IndexOf(Selected) != selectedIndex)
        {
            SelectedIndex = Events.IndexOf(Selected);
        }
        StateHasChanged();
    }

    private void OnEventsChanged()
    {
        // Update selectedIndex
        if (Selected != null && Events.IndexOf(Selected) != selectedIndex)
        {
            SelectedIndex = Events.IndexOf(Selected);
        }
        StateHasChanged();
    }

    private async Task OnSelectionChanged()
    {
        Selected = Events.ElementAtOrDefault(SelectedIndex) ?? Selected;
        await Task.FromResult(true);
    }

    private void EventMoveNext()
    {
        if (SelectedIndex < Events.Count-1)
        {
            SelectedIndex++;
        }
    }

    private void EventMovePrevious()
    {
        if (SelectedIndex > 0)
        {
            SelectedIndex--;
        }
    }
}
