@implements IDisposable
@using System.Collections.Specialized
@using System.Globalization
@using System.Collections.ObjectModel
@using System.ComponentModel
@using iRLeagueManager.Web.ViewModels
@using System.Linq
@inherits MudComponentBase

<MudSelect ToStringFunc="@GetEventText" Label="Event" Class="flex-grow-1" @bind-Value="EventList.Selected" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomLeft" TransformOrigin="Origin.TopLeft">
    @foreach(var @event in EventList.EventList)
    {
        <MudSelectItem Value="@(@event)">@GetEventText(@event)</MudSelectItem>
    }
</MudSelect>
<MudIconButton Icon="@Icons.Material.Filled.ChevronLeft" OnClick=EventMovePrevious Variant="Variant.Filled"/>
<MudIconButton Icon="@Icons.Material.Filled.ChevronRight" OnClick=EventMoveNext Variant="Variant.Filled" />

@code {
    [CascadingParameter]
    public LeagueApiService ApiService { get; set; } = default!;

    private EventListViewModel eventList = default!;
    [CascadingParameter]
    public EventListViewModel EventList 
    {
        get => eventList;
        set
        {
            if (eventList != null)
            {
                eventList.EventList.CollectionChanged -= OnEventsCollectionChanged;
                eventList.PropertyChanged -= OnEventListPropertyChanged;
            }
            eventList = value;
            if (eventList != null)
            {
                eventList.EventList.CollectionChanged += OnEventsCollectionChanged;
                eventList.PropertyChanged += OnEventListPropertyChanged;
            }
        }
    }

    private ObservableCollection<EventViewModel> Events => EventList.EventList;

    private EventViewModel? Selected 
    { 
        get => eventList?.Selected;
        set
        {
            if (eventList != null && value != eventList.Selected)
            {
                eventList.Selected = value;
                _ = SelectedChanged.InvokeAsync(value);
            }
        }
    }

    [Parameter]
    public EventCallback<EventViewModel?> SelectedChanged { get; set; }

    private int selectedIndex = 0;
    public int SelectedIndex
    {
        get => selectedIndex;
        set
        {
            if (selectedIndex != value)
            {
                selectedIndex = value;
                _ =OnSelectionChanged();
            }
        }
    }

    protected override void OnParametersSet()
    {
        if (Selected != null && Events.IndexOf(Selected) != selectedIndex)
        {
            SelectedIndex = Events.IndexOf(Selected);
        }
    }

    private void OnEventsCollectionChanged(object? sender, NotifyCollectionChangedEventArgs e)
    {
        // Update selectedIndex
        if (Selected != null && Events.IndexOf(Selected) != selectedIndex)
        {
            SelectedIndex = Events.IndexOf(Selected);
        }
        InvokeAsync(StateHasChanged);
    }

    private void OnEventListPropertyChanged(object? sender, PropertyChangedEventArgs e)
    {
        switch (e?.PropertyName)
        {
            case nameof(EventListViewModel.Selected):
                OnEventsChanged();
                break;
        }
    }

    private void OnEventsChanged()
    {
        // Update selectedIndex
        if (Selected != null && Events.IndexOf(Selected) != selectedIndex)
        {
            SelectedIndex = Events.IndexOf(Selected);
        }
        InvokeAsync(StateHasChanged);
    }

    private async Task OnSelectionChanged()
    {
        Selected = Events.ElementAtOrDefault(SelectedIndex) ?? Selected;
        await Task.FromResult(true);
    }

    private void EventMoveNext()
    {
        if (SelectedIndex < Events.Count-1)
        {
            SelectedIndex++;
        }
    }

    private void EventMovePrevious()
    {
        if (SelectedIndex > 0)
        {
            SelectedIndex--;
        }
    }

    private string? GetEventText(EventViewModel? @event)
    {
        if (@event is null)
        {
            return null;
        }
        var index = EventList.EventList.IndexOf(@event);
        return $"{(index + 1).ToString("00")}. {@event.Date.ToString("dd.MM.yy")}: {@event.TrackName}" + (@event.ConfigName != "-" ? $" - {@event.ConfigName}" : "");
    }

    public void Dispose()
    {
        if (eventList != null)
        {
            eventList.EventList.CollectionChanged -= OnEventsCollectionChanged;
            eventList.PropertyChanged -= OnEventListPropertyChanged;
        }
    }
}
