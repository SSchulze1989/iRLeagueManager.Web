@implements IDisposable
@using System.Collections.Specialized
@using System.Globalization
@using System.Collections.ObjectModel
@using System.ComponentModel
@using iRLeagueManager.Web.ViewModels
@using System.Linq
@inherits MudComponentBase

<div style="width: 45em; max-width: 100%">
    <MudSelect @bind-Value="EventList.Selected"
               Variant="Variant.Outlined"
               AnchorOrigin="Origin.BottomLeft"
               TransformOrigin="Origin.TopLeft"
               Margin="Margin.Dense">
        @foreach (var (index, @event) in EventList.EventList.Select((x, i) => (i, x)))
        {
            <MudSelectItem Value="@(@event)">
                <div class="d-flex align-center">
                    @GetEventText(@event, index)
                    @if (@event.HasResult)
                    {
                        <MudIcon Class="ms-2" Color="Color.Tertiary" Icon="@Icons.Material.Filled.FlagCircle" Size="Size.Small" />
                    }
                </div>
            </MudSelectItem>
        }
    </MudSelect>
</div>
<MudIconButton Icon="@Icons.Material.Filled.KeyboardArrowLeft" OnClick="EventMovePrevious" Variant="Variant.Text" Disabled="!CanMovePrevious" />
<MudIconButton Icon="@Icons.Material.Filled.KeyboardArrowRight" OnClick="EventMoveNext" Variant="Variant.Text" Disabled="!CanMoveNext" />
<MudIconButton Icon="@Icons.Material.Filled.KeyboardDoubleArrowRight" OnClick="EventMoveLastWithResult" Variant="Variant.Text" Disabled="!CanMoveLast" />

@code {
    [CascadingParameter]
    public LeagueApiService ApiService { get; set; } = default!;

    private EventListViewModel? eventListPrivate;
    [CascadingParameter]
    public EventListViewModel EventList { get; set; } = default!;

    private List<EventViewModel> Events => EventList.EventList;

    private EventViewModel? Selected
    {
        get => EventList.Selected;
        set
        {
            EventList.Selected = value;
            _ = SelectedChanged.InvokeAsync(value);
        }
    }

    private bool CanMovePrevious => SelectedIndex > 0;
    private bool CanMoveNext => SelectedIndex < Events.Count - 1;
    private bool CanMoveLast => SelectedIndex != Events.FindLastIndex(x => x.HasResult);

    [Parameter]
    public EventCallback<EventViewModel?> SelectedChanged { get; set; }

    private int selectedIndex = 0;
    public int SelectedIndex
    {
        get => selectedIndex;
        set
        {
            if (selectedIndex != value)
            {
                selectedIndex = value;
                _ = OnSelectionChanged();
            }
        }
    }

    protected override void OnParametersSet()
    {
        if (eventListPrivate != null)
        {
            eventListPrivate.PropertyChanged -= OnEventListPropertyChanged;
        }

        BlazorParameterNullException.ThrowIfNull(this, EventList);
        eventListPrivate = EventList;
        EventList.PropertyChanged += OnEventListPropertyChanged;

        if (Selected != null && Events.IndexOf(Selected) != selectedIndex)
        {
            SelectedIndex = Events.IndexOf(Selected);
        }
        InvokeAsync(StateHasChanged);
    }

    private void OnEventListPropertyChanged(object? sender, PropertyChangedEventArgs e)
    {
        switch (e?.PropertyName)
        {
            case nameof(EventListViewModel.EventList):
            case nameof(EventListViewModel.Selected):
                OnEventsChanged();
                InvokeAsync(StateHasChanged);
                break;
        }
    }

    private void OnEventsChanged()
    {
        // Update selectedIndex
        if (Selected != null && Events.IndexOf(Selected) != selectedIndex)
        {
            SelectedIndex = Events.IndexOf(Selected);
        }
    }

    private async Task OnSelectionChanged()
    {
        Selected = Events.ElementAtOrDefault(SelectedIndex) ?? Selected;
        await Task.CompletedTask;
    }

    private void EventMoveNext()
    {
        if (SelectedIndex < Events.Count - 1)
        {
            SelectedIndex++;
        }
    }

    private void EventMovePrevious()
    {
        if (SelectedIndex > 0)
        {
            SelectedIndex--;
        }
    }

    private void EventMoveLastWithResult()
    {
        var lastEventWithResult = Events
            .LastOrDefault(x => x.HasResult);
        if (lastEventWithResult is null)
        {
            return;
        }
        SelectedIndex = Events.IndexOf(lastEventWithResult);
    }

    private string? GetEventText(EventViewModel? @event, int? index = null)
    {
        if (@event is null)
        {
            return null;
        }
        index ??= EventList.EventList.IndexOf(@event);
        return $"{(index + 1).Value.ToString("00")}. {@event.Date.GetValueOrDefault().ToString("dd.MM.yy")}: {@event.TrackName}" + (@event.ConfigName != "-" ? $" - {@event.ConfigName}" : "");
    }

    public void Dispose()
    {
        if (eventListPrivate != null)
        {
            eventListPrivate.PropertyChanged -= OnEventListPropertyChanged;
        }
    }
}
