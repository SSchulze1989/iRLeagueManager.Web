@using System.Collections.Specialized
@using System.Diagnostics.CodeAnalysis
@using iRLeagueApiCore.Common.Models.Members
@*@inherits InputBase<IEnumerable<MemberInfoModel>>*@

<select @attributes=AdditionalAttributes value=SelectedMemberIds @onchange=OnSelectionChange multiple>
    @foreach(var member in MemberList)
    {
        <option value=@(member.MemberId)>@member.FirstName @member.LastName</option>
    }
</select>

@code {
    [Parameter(CaptureUnmatchedValues = true)]
    public IReadOnlyDictionary<string, object>? AdditionalAttributes { get; set; }

    private IEnumerable<MemberInfoModel> memberList = default!;
    [Parameter, EditorRequired]
    public IEnumerable<MemberInfoModel> MemberList
    {
        get => memberList;
        set
        {
            if (memberList is INotifyCollectionChanged oldCollectionChanged)
            {
                oldCollectionChanged.CollectionChanged -= OnMemberListCollectionChanged;
            }
            memberList = value;
            if (memberList is INotifyCollectionChanged newCollectionChanged)
            {
                newCollectionChanged.CollectionChanged += OnMemberListCollectionChanged;
            }
        }
    }

    private IEnumerable<MemberInfoModel> value = default!;
    [Parameter]
    public IEnumerable<MemberInfoModel> Value
    {
        get => value;
        set
        {
            if (this.value != value)
            {
                this.value = value;
                if (ValueChanged.HasDelegate)
                {
                    _ = ValueChanged.InvokeAsync(value);
                }
            }
        }
    }
    [Parameter]
    public EventCallback<IEnumerable<MemberInfoModel>> ValueChanged { get; set; }

    private IEnumerable<long> selectedMemberIds = Array.Empty<long>();
    private IEnumerable<long> SelectedMemberIds
    {
        get => selectedMemberIds;
        set
        {
            if (selectedMemberIds != value)
            {
                selectedMemberIds = value;
            }
        }
    }

    private void OnSelectionChange(ChangeEventArgs e)
    {
        if (e.Value is IEnumerable<string> selected == false)
        {
            return;
        }
        // get ids from string
        var selectedIds = selected.Select(x => long.TryParse(x, out long result) ? result : default(long));
        // set selected members 
        Value = selectedIds.Select(x => MemberList.First(y => y.MemberId == x));
    }

    private void OnMemberListCollectionChanged(object? sender, NotifyCollectionChangedEventArgs e)
    {
        StateHasChanged();
    }

    //protected override void Dispose(bool disposing)
    //{
    //    if (disposing == false)
    //    {
    //        if (memberList is INotifyCollectionChanged collectionChanged)
    //        {
    //            collectionChanged.CollectionChanged -= OnMemberListCollectionChanged;
    //        }
    //    }
    //    base.Dispose(disposing);
    //}

    //protected override bool TryParseValueFromString(string value, [MaybeNullWhen(false)] out IEnumerable<MemberInfoModel> result, [NotNullWhen(false)] out string validationErrorMessage)
    //{
    //    throw new NotImplementedException();
    //}
}
