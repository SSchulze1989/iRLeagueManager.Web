@namespace iRLeagueManager.Web.Components
@using System.Linq.Expressions
@using iRLeagueApiCore.Common.Enums;
@using iRLeagueApiCore.Common.Models
@using iRLeagueManager.Web.ViewModels
@inherits MvvmComponentBase
@inject IDialogService DialogService

<MudElement HtmlTag="div" Class="@Class" Style="@Style">
    <MudStack Class="px-2 pt-2" AlignItems="AlignItems.Center" Row="true">
        <MudText Typo="Typo.h6">@Result.SessionName</MudText>
            <MudSpacer />
            <MudIconButton Icon="@Icons.Material.Filled.Info" Title="Show penalties" OnClick=ShowBonusesPenaltiesClick />
        </MudStack>
        @{
        var resultRows = Result.ResultRows;
        var displayBonusPoints = resultRows.Any(x => x.BonusPoints != 0);
        var displayStartPos = resultRows.Any(x => x.StartPosition != 0);
        var displayChange = displayStartPos;
        var displayQualyLap = resultRows.Any(x => x.QualifyingTime > TimeSpan.FromSeconds(1));
    }
    <ResultTable Data=Result.ResultRows>
        <HeaderTemplate>
            <ResultTableHeader Text="Pos." Sort=@(x => x.FinalPosition) Default=true />
            @if (isTeamResult == false)
            {
                @if (displayStartPos)
                {
                    <ResultTableHeader Text="Start" Sort=@(x => x.StartPosition) />
                }
                <ResultTableHeader Text="Name" Sort="@(x => x.Firstname)" />
            }
            <ResultTableHeader Text="Team" Sort=@(x => x.TeamName) />
            @if (displayQualyLap)
            {
                <ResultTableHeader Text="Qualy Lap" Sort="@(x => x.QualifyingTime == TimeSpan.Zero ? TimeSpan.MaxValue : x.QualifyingTime)" />

            }
            <ResultTableHeader Text="Fastest Lap" Sort="@(x => x.FastestLapTime == TimeSpan.Zero ? TimeSpan.MaxValue : x.FastestLapTime)" />
            <ResultTableHeader Text="Avg. Lap" Sort="@(x => x.AvgLapTime == TimeSpan.Zero ? TimeSpan.MaxValue : x.AvgLapTime)" />
            <ResultTableHeader Text="Interval" Sort="@(x => x.Interval)" />
            <ResultTableHeader Text="Laps Lead" Sort="@(x => x.LeadLaps)" Direction="SortDirection.Descending" />
            <ResultTableHeader Text="Laps Compl." Sort="@(x => x.CompletedLaps)" Direction="SortDirection.Descending" />
            <ResultTableHeader Text="Race Pts." Sort="@(x => x.RacePoints)" Direction="SortDirection.Descending" />
            @if (displayBonusPoints)
            {
                <ResultTableHeader Text="Bonus Pts." Sort="@(x => x.BonusPoints)" Direction="SortDirection.Descending" />
            }
            <ResultTableHeader Text="Penalty" TextShort="Pen." Breakpoint="Breakpoint.Xl" Sort="@(x => x.PenaltyPoints)" />
            <ResultTableHeader Text="Total Pts." Sort="@(x => x.TotalPoints)" Direction="SortDirection.Descending" />
            @if (isTeamResult == false)
            {
                <ResultTableHeader Text="@($"IR ({EvenStrengthOfField(Result)})")" Sort="@(x => x.OldIrating)" Direction="SortDirection.Descending" />
            }
            <ResultTableHeader Text="Incs." Sort="@(x => x.Incidents)" />
            <th style="width: 1em"></th>
            @if (CanEdit)
            {
                <th style="width: 1em"></th>
            }
        </HeaderTemplate>
        <RowTemplate Context=Row>
            <td class="px-2 py-1">
                <ValueChange Value=Row.FinalPosition Change=@(displayChange ? Row.FinalPositionChange : 0)>
                    <ValueTemplate Context=Value>
                        @Value.
                    </ValueTemplate>
                </ValueChange>
            </td>
            @if (isTeamResult == false)
            {
                @if (displayStartPos)
                {
                    <td class="px-1 py-1">@Row.StartPosition.</td>
                }
                <td class="px-1 py-1" style="white-space: nowrap">@Row.Firstname @Row.Lastname</td>
            }
            <td class="px-1 py-1" style="color: @(Row.TeamColor); white-space: nowrap">@(Row.TeamName)</td>
            @if (displayQualyLap)
            {
                <td class="px-1 py-1 @(IsFastestLap(resultRows, Row, x => x.QualifyingTime) ? "fw-bold" : "")">@Row.QualifyingTime.LapTimeString()</td>
            }
            <td class="px-1 py-1 @(IsFastestLap(resultRows, Row, x => x.FastestLapTime) ? "fw-bold" : "")">@Row.FastestLapTime.LapTimeString() @(Row.FastLapNr != 0 ? $"({Row.FastLapNr})" : "")</td>
            <td class="px-1 py-1 @(IsFastestLap(resultRows, Row, x => x.AvgLapTime) ? "fw-bold" : "")">@Row.AvgLapTime.LapTimeString()</td>
            <td class="px-1 py-1">+@(Row.Interval.Laps == 0 ? Row.Interval.Time.LapTimeString() : $"{Row.Interval.Laps} Laps")</td>
            <td class="px-1 py-1">@Row.LeadLaps</td>
            <td class="px-1 py-1">@Row.CompletedLaps</td>
            <td class="px-1 py-1">@Row.RacePoints</td>
            @if (displayBonusPoints)
            {
                <td class="px-1 py-1">@Row.BonusPoints</td>
            }
            <td class="px-1 py-1" style="@(@Row.PenaltyPoints != 0 ? "color:red" : "")">
                @(Row.PenaltyPoints != 0 ? -Row.PenaltyPoints : "")
            </td>
            <td class="px-1 py-1">@Row.TotalPoints</td>
            @if (isTeamResult == false)
            {

                <td class="px-1 py-1">@Row.OldIrating</td>

            }
            <td class="px-1 py-1">@Row.Incidents</td>
            <td class="pa-0">
                @if (Row.Status == RaceStatus.Disqualified)
                {
                    <MudElement HtmlTag="div" Class="d-flex justify-center">
                        <MudTooltip Text="Disqualified">
                            <MudIcon Icon="@Icons.Material.Filled.Flag" Style="color: black;" Size="Size.Small" />
                        </MudTooltip>
                    </MudElement>
                }
            </td>
            @if (CanEdit)
            {
                <td class="pa-0">
                    <MudMenu Icon="@Icons.Material.Filled.MoreVert" Dense="true" Size="Size.Small">
                        <MudMenuItem OnClick="() => AddBonusPentalyClick(Row)">Add Bonus/Penalty</MudMenuItem>
                        <MudMenuItem OnClick="() => ShowBonusesPenaltiesClick(Row)">Show Bonuses/Penalties</MudMenuItem>
                    </MudMenu>
                </td>
            }
        </RowTemplate>
    </ResultTable>
</MudElement>

@code {
    [CascadingParameter]
    private EventListViewModel EventList { get; set; } = default!;
    [Parameter, EditorRequired]
    public SessionResultViewModel Result { get; set; } = default!;
    [Parameter]
    public string Class { get; set; } = string.Empty;
    [Parameter]
    public string Style { get; set; } = string.Empty;
    [Parameter]
    public bool CanEdit { get; set; } = false;

    private bool isTeamResult = false;

    private bool showDisqualification = false;

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        BlazorParameterNullException.ThrowIfNull(this, EventList);
        BlazorParameterNullException.ThrowIfNull(this, Result);
        isTeamResult = Result.ResultRows.Any(x => x.MemberId == null);
        showDisqualification = Result.ResultRows.Any(x => x.Status == RaceStatus.Disqualified);
    }

    private bool IsFastestLap(IEnumerable<ResultRowModel> resultRows, ResultRowModel row, Func<ResultRowModel, TimeSpan> selector)
    {
        var rowValue = selector(row);
        var minValue = resultRows
        .Select(x => selector(x))
        .Where(x => x > TimeSpan.FromSeconds(1))
        .MinOrDefault();
        return rowValue == minValue;
    }

    private int EvenStrengthOfField(SessionResultViewModel result)
    {
        return result.EventResult?.StrengthOfField ?? 0;
    }

    private async Task AddBonusPentalyClick(ResultRowModel row)
    {
        var parameters = new DialogParameters<EditAddPenaltyDialog>()
        {
            {x => x.Model, new()},
            {x => x.AvailableSessions, Result.EventResult?.GetModel().SessionResults ?? Array.Empty<ResultModel>()},
            {x => x.SelectedSession, Result.GetModel()},
            {x => x.SelectedRow, row},
            {x => x.CanSelectSession, true},
            {x => x.OnSubmit, async (p, ct) => await p.SaveNew(ct)},
            {x => x.IsTeamResult, isTeamResult},
        };

        var result = await DialogService.Show<EditAddPenaltyDialog>("Add Bonus/Penalty", parameters).Result;
    }

    private Task ShowBonusesPenaltiesClick()
    {
        return ShowBonusesPenaltiesClick(null);
    }

    private async Task ShowBonusesPenaltiesClick(ResultRowModel? row)
    {
        if (Result.EventResult is null)
        {
            return;
        }
        async Task<IEnumerable<PenaltyModel>> GetPenalties()
        {
            var penalties = await Result.EventResult.GetPenalties();
            if (penalties.IsSuccess == false || penalties.Content is null)
            {
                return Array.Empty<PenaltyModel>();
            }
            var getPenalties = penalties.Content.Where(x => Result.SessionNr == 999 || x.SessionNr == Result.SessionNr);
            if (row is not null)
            {
                getPenalties = getPenalties.Where(x => isTeamResult ? x.Team?.TeamId == row.TeamId : x.Member?.MemberId == row.MemberId);
            }
            return getPenalties;
        }
        var parameters = new DialogParameters<ShowPenaltiesDialog>()
        {
            {x => x.GetPenalties, GetPenalties},
            {x => x.CanEdit, CanEdit},
            {x => x.IsTeamResult, isTeamResult},
        };
        var options = new DialogOptions()
            {
                DisableBackdropClick = false,
                Position = DialogPosition.Center,
                FullWidth = true,
                CloseButton = true,
            };
        await DialogService.Show<ShowPenaltiesDialog>("Bonuses/Penalties", parameters, options).Result;
    }
}
