@using System.Linq.Expressions
@using iRLeagueApiCore.Common.Models
@using iRLeagueManager.Web.ViewModels
@inherits MvvmComponentBase

<div @attributes=AdditionalAttributes>
    <div class="card my-2" id="results-session-@Bind(Result, x => x.SessionName)">
        <div class="card-header">
            @Bind(Result, x => x.SessionName)
        </div>
        @{
            var resultRows = Result.ResultRows;
            var displayBonusPoints = resultRows.Any(x => x.BonusPoints != 0);
            var displayStartPos = resultRows.Any(x => x.StartPosition != 0);
            var displayQualyLap = resultRows.Any(x => x.QualifyingTime > TimeSpan.FromSeconds(1));
        }
        <div class="card-body overflow-scroll m-0 p-1">
            <table class="table table-sm table-striped table-hover" style="font-size: 0.9rem; line-height: 1rem">
                <thead>
                    <tr>
                        <th @onclick="() => SetOrderProperty(Result, row => row.FinalPosition)">Pos.</th>
                        @if (isTeamResult == false)
                        {
                            @if (displayStartPos)
                            {
                                <th @onclick="() => SetOrderProperty(Result, row => row.StartPosition)">Start</th>
                            }
                            <th @onclick="() => SetOrderProperty(Result, row => row.Firstname)">Name</th>
                        }
                        <th @onclick="() => SetOrderProperty(Result, row => row.TeamName)">Team</th>
                        @if (displayQualyLap)
                        {
                            <th @onclick="() => SetOrderProperty(Result, row => row.QualifyingTime)">Qualy Lap</th>
                        }
                        <th @onclick="() => SetOrderProperty(Result, row => row.FastestLapTime)">Fastest Lap</th>
                        <th @onclick="() => SetOrderProperty(Result, row => row.AvgLapTime)">Avg. Lap</th>
                        @if (isTeamResult == false)
                        {
                            <th @onclick="() => SetOrderProperty(Result, row => row.Interval)">Interval</th>
                            <th @onclick="() => SetOrderProperty(Result, row => row.LeadLaps)">Laps Lead</th>
                            <th @onclick="() => SetOrderProperty(Result, row => row.CompletedLaps)">Laps Compl.</th>
                        }
                        <th @onclick="() => SetOrderProperty(Result, row => row.RacePoints)">Race Pts.</th>
                        @if (displayBonusPoints)
                        {
                            <th @onclick="() => SetOrderProperty(Result, row => row.BonusPoints)">Bonus Pts.</th>
                        }
                        <th @onclick="() => SetOrderProperty(Result, row => row.PenaltyPoints)">Penalty</th>
                        <th @onclick="() => SetOrderProperty(Result, row => row.TotalPoints)">Total Pts.</th>
                        <th @onclick="() => SetOrderProperty(Result, row => row.Incidents)">Incs.</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach(var row in resultRows)
                    {
                        <tr>
                            <td><ValueChange Value=row.FinalPosition Change=row.FinalPositionChange /></td>
                            @if (isTeamResult == false)
                            {
                                @if (displayStartPos)
                                {
                                    <td>@row.StartPosition</td>
                                }
                                <td>@row.Firstname @row.Lastname</td>
                            }
                            <td style="color:@row.TeamColor">@row.TeamName</td>
                            @if (displayQualyLap)
                            {
                                <td class="@(IsFastestLap(resultRows, row, x => x.QualifyingTime) ? "fw-bold" : "")">@row.QualifyingTime.LapTimeString()</td>
                            }
                            <td class="@(IsFastestLap(resultRows, row, x => x.FastestLapTime) ? "fw-bold" : "")">@row.FastestLapTime.LapTimeString() (@row.FastLapNr)</td>
                            <td class="@(IsFastestLap(resultRows, row, x => x.AvgLapTime) ? "fw-bold" : "")">@row.AvgLapTime.LapTimeString()</td>
                            @if (isTeamResult == false)
                            {
                                <td>+@(row.Interval.Laps == 0 ? row.Interval.Time.LapTimeString() : $"{row.Interval.Laps} Laps")</td>
                                <td>@row.LeadLaps</td>
                                <td>@row.CompletedLaps</td>
                            }
                            <td>@row.RacePoints</td>
                            @if (displayBonusPoints)
                            {
                                <td>@row.BonusPoints</td>
                            }
                            <td style="@(@row.PenaltyPoints != 0 ? "color:red" : "")">
                                @(row.PenaltyPoints != 0 ? $"-{row.PenaltyPoints}" : "")
                            </td>
                            <td>@row.TotalPoints</td>
                            <td>@row.Incidents</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>

@code {
    [Parameter(CaptureUnmatchedValues = true)]
    public IDictionary<string, object>? AdditionalAttributes { get; set; }
    [Parameter, EditorRequired]
    public SessionResultViewModel Result { get; set; } = default!;

    private bool isTeamResult = false;

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        isTeamResult = Result?.ResultRows.Any(x => x.MemberId == null) ?? false;
    }

    private void SetOrderProperty(SessionResultViewModel result, Expression<Func<ResultRowModel, IComparable>> selector, bool descending = false)
    {
        result.OrderByPropertySelector = selector;
    }

    private bool IsFastestLap(IEnumerable<ResultRowModel> resultRows, ResultRowModel row, Func<ResultRowModel, TimeSpan> selector)
    {
        var rowValue = selector(row);
        var minValue = resultRows
            .Select(x => selector(x))
            .Where(x => x > TimeSpan.FromSeconds(1))
            .MinOrDefault();
        return rowValue == minValue;
    }
}
