@using System.Linq.Expressions
@using iRLeagueApiCore.Common.Enums;
@using iRLeagueApiCore.Common.Models
@using iRLeagueManager.Web.ViewModels
@inherits MvvmComponentBase

<div @attributes=AdditionalAttributes>
    <div class="card my-2" id="results-session-@Bind(Result, x => x.SessionName)">
        <div class="card-header d-flex justify-content-between">
            <label>@Bind(Result, x => x.SessionName)</label>
            <button class="btn p-0 m-0 text-danger" title="Show penalties" @onclick=ShowPenaltiesClick>
                <span class="bi bi-exclamation-diamond" />
            </button>
        </div>
        @{
            var resultRows = Result.ResultRows;
            var displayBonusPoints = resultRows.Any(x => x.BonusPoints != 0);
            var displayStartPos = resultRows.Any(x => x.StartPosition != 0);
            var displayChange = displayStartPos;
            var displayQualyLap = resultRows.Any(x => x.QualifyingTime > TimeSpan.FromSeconds(1));
        }
        <div class="card-body overflow-auto p-1">        
            <ResultTable Data=Result.ResultRows>
                <HeaderTemplate>
                    <ResultTableHeader Text="Pos." Sort=@(x => x.FinalPosition) Default=true/>
                    @if (isTeamResult == false)
                    {
                        @if (displayStartPos)
                        {
                            <ResultTableHeader Text="Start" Sort=@(x => x.StartPosition) />
                        }
                        <ResultTableHeader Text="Name" Sort="@(x => x.Firstname)" />
                    }
                    <ResultTableHeader Text="Team" Sort=@(x => x.TeamName)/>
                    @if (displayQualyLap)
                    {
                        <ResultTableHeader Text="Qualy Lap" Sort="@(x => x.QualifyingTime)" />
                    }
                    <ResultTableHeader Text="Fastest Lap" Sort="@(x => x.FastestLapTime)" />
                    <ResultTableHeader Text="Avg. Lap" Sort="@(x => x.AvgLapTime)" />
                    <ResultTableHeader Text="Interval" Sort="@(x => x.Interval)" />
                    <ResultTableHeader Text="Laps Lead" Sort="@(x => x.LeadLaps)" Direction="SortDirection.Descending" />
                    <ResultTableHeader Text="Laps Compl." Sort="@(x => x.CompletedLaps)" Direction="SortDirection.Descending" />
                    <ResultTableHeader Text="Race Pts." Sort="@(x => x.RacePoints)" Direction="SortDirection.Descending" />
                    @if (displayBonusPoints)
                    {
                        <ResultTableHeader Text="Bonus Pts." Sort="@(x => x.BonusPoints)" Direction="SortDirection.Descending" />
                    }
                    <ResultTableHeader Text="Penalty" Sort="@(x => x.PenaltyPoints)" />
                    <ResultTableHeader Text="Total Pts." Sort="@(x => x.TotalPoints)" Direction="SortDirection.Descending" />
                    @if (isTeamResult == false)
                    {
                        <ResultTableHeader Text="@($"IR ({EvenStrengthOfField(Result)})")" Sort="@(x => x.OldIrating)" Direction="SortDirection.Descending" />
                    }
                    <ResultTableHeader Text="Incs." Sort="@(x => x.Incidents)" />
                    @if (showDisqualification)
                    {
                        <th></th>
                    }
                    @if (CanEdit)
                    {
                        <th></th>
                    }
                </HeaderTemplate>
                <RowTemplate Context=Row>
                    <td>
                        <ValueChange Value=Row.FinalPosition Change=@(displayChange ? Row.FinalPositionChange : 0)>
                            <ValueTemplate Context=Value>
                                @Value.
                            </ValueTemplate>
                        </ValueChange>
                    </td>
                    @if (isTeamResult == false)
                    {
                        @if (displayStartPos)
                        {
                            <td>@Row.StartPosition.</td>
                        }
                        <td>@Row.Firstname @Row.Lastname</td>
                    }
                    <td style="color:@(Row.TeamColor)">@(Row.TeamName)</td>
                    @if (displayQualyLap)
                    {
                        <td class="@(IsFastestLap(resultRows, Row, x => x.QualifyingTime) ? "fw-bold" : "")">@Row.QualifyingTime.LapTimeString()</td>
                    }
                    <td class="@(IsFastestLap(resultRows, Row, x => x.FastestLapTime) ? "fw-bold" : "")">@Row.FastestLapTime.LapTimeString() @(Row.FastLapNr != 0 ? $"({Row.FastLapNr})" : "")</td>
                    <td class="@(IsFastestLap(resultRows, Row, x => x.AvgLapTime) ? "fw-bold" : "")">@Row.AvgLapTime.LapTimeString()</td>
                    <td>+@(Row.Interval.Laps == 0 ? Row.Interval.Time.LapTimeString() : $"{Row.Interval.Laps} Laps")</td>
                    <td>@Row.LeadLaps</td>
                    <td>@Row.CompletedLaps</td>
                    <td>@Row.RacePoints</td>
                    @if (displayBonusPoints)
                    {
                        <td>@Row.BonusPoints</td>
                    }
                    <td style="@(@Row.PenaltyPoints != 0 ? "color:red" : "")">
                        @(Row.PenaltyPoints != 0 ? $"-{Row.PenaltyPoints}" : "")
                    </td>
                    <td>@Row.TotalPoints</td>
                    @if (isTeamResult == false)
                    {
                        <td>@Row.OldIrating</td>
                    }
                    <td>@Row.Incidents</td>
                    @if (showDisqualification)
                    {
                        <td>
                            @if (Row.Status == RaceStatus.Disqualified)
                            {
                                <span class="bi bi-flag-fill" style="color: black" title="Disqualified"/>
                            }
                        </td>
                    }
                    @if (CanEdit)
                    {
                        <td>
                            <div>
                                @{
                                    var rowId = $"table-row-{Row.GetHashCode()}";
                                }
                                <div class="table-row-action" type="button" id="@rowId" data-bs-toggle="dropdown" aria-expanded="false">
                                    <span class="bi bi-three-dots-vertical"/>
                                </div>
                                <ul class="dropdown-menu">
                                    <li><a class="dropdown-item" @onclick=@(() => OnRowOptionsClick(Row))>Add Penalty</a></li>
                                    <li><a class="dropdown-item" @onclick=@(() => ShowPenaltiesClick())>Show Penalties</a></li>
                                </ul>
                            </div>
                        </td>
                    }
                </RowTemplate>
            </ResultTable>
        </div>
    </div>
</div>

@code {
    [CascadingParameter]
    private EventListViewModel EventList { get; set; } = default!;
    [CascadingParameter]
    public IModalService ModalService { get; set; } = default!;
    [Parameter(CaptureUnmatchedValues = true)]
    public IDictionary<string, object>? AdditionalAttributes { get; set; }
    [Parameter, EditorRequired]
    public SessionResultViewModel Result { get; set; } = default!;
    [Parameter]
    public bool CanEdit { get; set; } = false;

    private bool isTeamResult = false;

    private bool showDisqualification = false;

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        BlazorParameterNullException.ThrowIfNull(this, EventList);
        BlazorParameterNullException.ThrowIfNull(this, ModalService);
        BlazorParameterNullException.ThrowIfNull(this, Result);
        isTeamResult = Result.ResultRows.Any(x => x.MemberId == null);
        showDisqualification = Result.ResultRows.Any(x => x.Status == RaceStatus.Disqualified);
    }

    private bool IsFastestLap(IEnumerable<ResultRowModel> resultRows, ResultRowModel row, Func<ResultRowModel, TimeSpan> selector)
    {
        var rowValue = selector(row);
        var minValue = resultRows
        .Select(x => selector(x))
        .Where(x => x > TimeSpan.FromSeconds(1))
        .MinOrDefault();
        return rowValue == minValue;
    }

    private int EvenStrengthOfField(SessionResultViewModel result)
    {
        return result.EventResult?.StrengthOfField ?? 0;
    }

    private async Task OnRowOptionsClick(ResultRowModel row)
    {
        var parameters = new ModalParameters<EditAddPenaltyModal>()
            .Add(x => x.Model, new())
            .Add(x => x.AvailableSessions, Result.EventResult?.GetModel().SessionResults ?? Array.Empty<ResultModel>())
            .Add(x => x.SelectedSession, Result.GetModel())
            .Add(x => x.SelectedRow, row)
            .Add(x => x.CanSelectSession, true)
            .Add(x => x.OnSubmit, async (p, ct) => await p.SaveNew(ct))
            .Add(x => x.IsTeamResult, isTeamResult);
        var result = await ModalService.Show<EditAddPenaltyModal>("Add Penalty", parameters).Result;
    }

    private async Task ShowPenaltiesClick()
    {
        if (Result.EventResult is null)
        {
            return;
        }
        async Task<IEnumerable<PenaltyModel>> GetPenalties() {
            var penalties = await Result.EventResult.GetPenalties();
            if (penalties.IsSuccess == false || penalties.Content is null)
            {
                return Array.Empty<PenaltyModel>();
            }
            return penalties.Content.Where(x => Result.SessionNr == 999 || x.SessionNr == Result.SessionNr);
        }

        var parameters = new ModalParameters<ShowPenaltiesModal>()
            .Add(x => x.GetPenalties, GetPenalties)
            .Add(x => x.CanEdit, CanEdit)
            .Add(x => x.IsTeamResult, isTeamResult);
        var options = new ModalOptions()
        {
            DisableBackgroundCancel = false,
        };
        var result = await ModalService.Show<ShowPenaltiesModal>("Penalties", parameters, options).Result;
    }
}
