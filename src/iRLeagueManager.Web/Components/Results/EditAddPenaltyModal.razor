@using iRLeagueApiCore.Common.Models;
@using iRLeagueApiCore.Common.Enums;
@inherits EditMudModalBase<AddPenaltyViewModel, PenaltyModel>

<EditForm Model=@Model>
    <MudDialog>
        <DialogContent>
            <StatusResultValidator @ref="ResultValidator" />
            <MudStack Class="gap-2">
                @if (AvailableSessions.Any())
                {
                    <MudSelect Label="Session" @bind-Value="Vm.SessionResult" Variant="Variant.Filled">
                        @foreach(var session in AvailableSessions)
                        {
                            <MudSelectItem Value="@session">@session.SessionName</MudSelectItem>
                        }
                    </MudSelect>
                }
                @if (CanSelectDriver)
                {
                    @*<BlazoredTypeahead @bind-Value=Vm.ResultRow
                        class="form-control p-0"
                                        style="border-top-right-radius:0; border-top-left-radius:0;"
                                        EnableDropDown=true
                                        SearchMethod=SearchResultRow
                                        MinimumLength=1
                                        MaximumSuggestions=100
                                        DeleteItemsOnBackspace=false
                                        placeholder="Search driver by name...">

                        <SelectedTemplate Context=row>
                            @(row?.FinalPosition). @row?.Firstname @row?.Lastname
                        </SelectedTemplate>
                        <ResultTemplate Context=row>
                            @(row.FinalPosition). @row.Firstname @row.Lastname
                        </ResultTemplate>
                        <NotFoundTemplate Context=name>
                            <span>Driver <b>@name</b> Not found!</span>
                        </NotFoundTemplate>
                    </BlazoredTypeahead>*@
                    <MudAutocomplete @bind-Value=Vm.ResultRow
                                 T=ResultRowModel
                                 SearchFunc="SearchResultRow"
                                 Label="Driver"
                                 Placeholder="Search driver by name..."
                                 ToStringFunc="@(x => x == null ? null : $"{x.FinalPosition}. {x.Firstname} {x.Lastname}")"
                                 Variant="Variant.Filled">
                    <ItemSelectedTemplate Context="row">
                        @(row?.FinalPosition). @row?.Firstname @row?.Lastname
                    </ItemSelectedTemplate>
                    <ItemTemplate Context="row">
                        @(row?.FinalPosition). @row?.Firstname @row?.Lastname
                    </ItemTemplate>
                </MudAutocomplete>
                }
                else
                {
                    <label class="form-select disabled">@Vm.Firstname @Vm.Lastname</label>
                }
                <MudTextField Label="Reason" @bind-Value="Vm.Reason" Variant="Variant.Filled"/>
                <MudSelect Label="Penalty Type" @bind-Value="Vm.Type" Variant="Variant.Filled">
                    @foreach(var penaltyType in Enum.GetValues<PenaltyType>())
                    {
                        <MudSelectItem Value="@penaltyType" />
                    }
                </MudSelect>
                @switch (Vm.Type)
                {
                    case PenaltyType.Points:
                        <MudNumericField Label="Points" @bind-Value="Vm.Points" Variant="Variant.Filled"/>
                        break;
                    case PenaltyType.Position:
                        <MudNumericField Label="Positions" @bind-Value="Vm.Positions" Variant="Variant.Filled" />
                        break;
                    case PenaltyType.Time:
                        <MudNumericField Label="Time" @bind-Value="Vm.Points" Variant="Variant.Filled" Adornment="Adornment.End" AdornmentText="seconds"/>
                        break;
                }
            </MudStack>
            <ValidationSummary />
            <FormValidationMessage TValue=string Message=@ResultValidator?.ErrorMessage />
        </DialogContent>
        <DialogActions>
            <MudButton OnClick="Cancel">Cancel</MudButton>
            <MudButton OnClick="Submit" Color="Color.Primary">Submit</MudButton>
        </DialogActions>
    </MudDialog>
</EditForm>

@code {
    /// <summary>
    /// List of available Sessions (must at least contain SelectedSession)
    /// </summary>
    [Parameter]
    public IEnumerable<ResultModel> AvailableSessions { get; set; } = Array.Empty<ResultModel>();
    /// <summary>
    /// Selected session when opening the modal (may be changed by user if CanSelectSession = True)
    /// </summary>
    [Parameter]
    public ResultModel? SelectedSession { get; set; } = null;
    /// <summary>
    /// Selected row when opening the modal (may be changed by user)
    /// </summary>
    [Parameter]
    public ResultRowModel? SelectedRow { get; set; } = null;
    /// <summary>
    /// If False the user cannot change the selected session from within the modal
    /// </summary>
    [Parameter]
    public bool CanSelectSession { get; set; } = false;
    [Parameter]
    public bool CanSelectDriver { get; set; } = true;
    [Parameter]
    public bool IsTeamResult { get; set; } = false;

    private long SelectedSessionId
    {
        get => Vm.SessionResult?.SessionResultId ?? 0;
        set => Vm.SessionResult = AvailableSessions.FirstOrDefault(x => x.SessionResultId == value);
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender == false)
        {
            return;
        }
        Vm.SessionResult ??= SelectedSession;
        Vm.ResultRow ??= SelectedRow;
        await InvokeAsync(StateHasChanged);
    }

    private async Task<IEnumerable<ResultRowModel?>> SearchResultRow(string searchString)
    {
        if (SelectedSession is null)
        {
            return Array.Empty<ResultRowModel>();
        }

        if (string.IsNullOrEmpty(searchString))
        {
            return await Task.FromResult(SelectedSession.ResultRows);
        }

        var terms = searchString.ToLower().Split(',', ' ', ';')
        .Where(x => string.IsNullOrWhiteSpace(x) == false)
            .ToArray();
        return await Task.FromResult(SelectedSession.ResultRows
            .Where(x => MatchSearchTerms(x, terms)));
    }

    private bool MatchSearchTerms(ResultRowModel row, params string[] terms)
    {
        var searchName = row.Firstname + " " + row.Lastname + row.TeamName;
        return terms.Any(x => searchName.Contains(x, StringComparison.OrdinalIgnoreCase));
    }
}
