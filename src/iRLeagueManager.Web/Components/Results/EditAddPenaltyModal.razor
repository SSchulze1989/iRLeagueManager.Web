@using iRLeagueApiCore.Common.Models;
@using iRLeagueApiCore.Common.Enums;
@inherits EditModalBase<AddPenaltyViewModel, PenaltyModel>

<EditForm Model=@Model>
    <StatusResultValidator @ref="ResultValidator" />
    <div class="input-group-list">
        @if (AvailableSessions.Any())
        {
            <InputGroup Label="Session">
                <InputSelect class="form-select" @bind-Value="SelectedSessionId" disabled="@(!CanSelectSession)">
                    @foreach (var session in AvailableSessions)
                    {
                        <option value="@session.SessionResultId">@session.SessionName</option>
                    }
                </InputSelect>
            </InputGroup>
        }
        <InputGroup Label="Driver">
            @if (CanSelectDriver)
            {
                <BlazoredTypeahead @bind-Value=Vm.ResultRow
                    class="form-control p-0"
                                   style="border-top-right-radius:0; border-top-left-radius:0;"
                                   EnableDropDown=true
                                   SearchMethod=SearchResultRow
                                   MinimumLength=1
                                   MaximumSuggestions=100
                                   DeleteItemsOnBackspace=false
                                   placeholder="Search driver by name...">

                    <SelectedTemplate Context=row>
                        @(row?.FinalPosition). @row?.Firstname @row?.Lastname
                    </SelectedTemplate>
                    <ResultTemplate Context=row>
                        @(row.FinalPosition). @row.Firstname @row.Lastname
                    </ResultTemplate>
                    <NotFoundTemplate Context=name>
                        <span>Driver <b>@name</b> Not found!</span>
                    </NotFoundTemplate>
                </BlazoredTypeahead>
            }
            else
            {
                <label class="form-select disabled">@Vm.Firstname @Vm.Lastname</label>
            }
        </InputGroup>
        <InputGroup Label="Reason">
            <InputText class="form-control" @bind-Value="Vm.Reason" />
        </InputGroup>
        <InputGroup Label="Penalty Type">
            <InputSelect class="form-select" @bind-Value="Vm.Type">
                @foreach(var penaltyType in Enum.GetValues<PenaltyType>())
                {
                    <option value="@penaltyType">@penaltyType</option>
                }
            </InputSelect>
        </InputGroup>
        @switch (Vm.Type)
        {
            case PenaltyType.Points:
                <InputGroup Label="Points">
                    <InputNumber class="form-control" @bind-Value="Vm.Points" />
                </InputGroup>
                break;
            case PenaltyType.Position:
                <InputGroup Label="Positions">
                    <InputNumber class="form-control" @bind-Value="Vm.Positions" />
                </InputGroup>
                break;
            case PenaltyType.Time:
                <InputGroup Label="Time">
                    <InputNumber class="form-control" @bind-Value="Vm.TimeSeconds" />
                    <label class="input-group-text">Seconds</label>
                </InputGroup>
                break;
        }
    </div>
    <ValidationSummary />
    <FormValidationMessage TValue=string Message=@ResultValidator?.ErrorMessage />
    <CancelSubmitButtons OnSubmit=Submit OnCancel=Cancel ModelState="Vm"/>
</EditForm>

@code {
    /// <summary>
    /// List of available Sessions (must at least contain SelectedSession)
    /// </summary>
    [Parameter]
    public IEnumerable<ResultModel> AvailableSessions { get; set; } = Array.Empty<ResultModel>();
    /// <summary>
    /// Selected session when opening the modal (may be changed by user if CanSelectSession = True)
    /// </summary>
    [Parameter]
    public ResultModel? SelectedSession { get; set; } = null;
    /// <summary>
    /// Selected row when opening the modal (may be changed by user)
    /// </summary>
    [Parameter]
    public ResultRowModel? SelectedRow { get; set; } = null;
    /// <summary>
    /// If False the user cannot change the selected session from within the modal
    /// </summary>
    [Parameter]
    public bool CanSelectSession { get; set; } = false;
    [Parameter]
    public bool CanSelectDriver { get; set; } = true;

    private long SelectedSessionId
    {
        get => Vm.SessionResult?.SessionResultId ?? 0;
        set => Vm.SessionResult = AvailableSessions.FirstOrDefault(x => x.SessionResultId == value);
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender == false)
        {
            return;
        }
        Vm.SessionResult ??= SelectedSession;
        Vm.ResultRow ??= SelectedRow;
        await InvokeAsync(StateHasChanged);
    }

    private async Task<IEnumerable<ResultRowModel>> SearchResultRow(string searchString)
    {
        if (SelectedSession is null)
        {
            return Array.Empty<ResultRowModel>();
        }

        if (string.IsNullOrEmpty(searchString))
        {
            return await Task.FromResult(SelectedSession.ResultRows);
        }

        var terms = searchString.ToLower().Split(',', ' ', ';')
        .Where(x => string.IsNullOrWhiteSpace(x) == false)
            .ToArray();
        return await Task.FromResult(SelectedSession.ResultRows
            .Where(x => MatchMemberSearchTerms(x, terms)));
    }

    private bool MatchMemberSearchTerms(ResultRowModel row, params string[] terms)
    {
        var searchName = row.Firstname + row.Lastname;
        return terms.Any(x => searchName.Contains(x, StringComparison.OrdinalIgnoreCase));
    }
}
