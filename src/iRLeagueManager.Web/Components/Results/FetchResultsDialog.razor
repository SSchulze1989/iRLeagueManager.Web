@namespace iRLeagueManager.Web.Components
@using System.Net
@using iRLeagueApiCore.Common.Models
@inherits PromptDialog<string>

<MudDialog>
    <DialogContent>
        <MudTextField @bind-Value="Value"
        Label="@Label"
        HelperText="@HelperText"
        Variant="Variant"
        InputType="InputType.Text"
        Placeholder="1234567"
        Clearable="true"
        Error="hasError"
        ErrorText="@errorText"
        Disabled="Loading" />
    </DialogContent>
    <DialogActions>
        <PromptDialogButtons OkClick="Submit" OkText="Upload" CancelClick="Cancel" DisableOkClick="Loading" OkLoading="Loading" />
    </DialogActions>
</MudDialog>

@code {
    [Parameter] public EventModel Event { get; set; } = default!;

    private bool hasError = false;
    private string errorText = string.Empty;

    private async Task<StatusResult> FetchResults(int subsessionId) 
    {
        if (ApiService.CurrentLeague is null)
        {
            return LeagueNullResult();
        }

        try
        {
            Loading = true;
            var request = ApiService.CurrentLeague
                .Events()
                .WithId(Event.Id)
                .Results()
                .Fetch()
                .FromIracingSubSession(subsessionId)
                .Post(CancellationToken).ConfigureAwait(false);
            var result = await request;
            if (result.Success == false)
            {
                hasError = true;
                errorText = result.HttpStatusCode switch
                {
                    HttpStatusCode.NotFound => @"Subsession id not found. Please check that the id is correct and that the results are visible to public",
                    _ => @"Fetching results from iracing api failed. Please check that the id is correct and that the the results are visible to public.
Please use JSON upload if this does not work",
                };
            }
            return result.ToStatusResult();
        }
        finally
        {
            Loading = false;
        }
    }

    protected override async Task Submit()
    {
        hasError = false;
        errorText = string.Empty;

        if (int.TryParse(Value, out int subsessionId) == false)
        {
            hasError = true;
            errorText = "Subsession id must be a valid number";
            return;
        }

        var result = await FetchResults(subsessionId);

        if (result.IsSuccess)
        {
            MudDialog.Close(Value);
        }
        else if (result.Status == LeagueNullResult().Status)
        {
            MudDialog.Cancel();
        }
    }
}
