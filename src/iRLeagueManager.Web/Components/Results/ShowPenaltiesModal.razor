@using iRLeagueApiCore.Common.Enums;
@using iRLeagueApiCore.Common.Models;
@inject SharedStateService Shared
@inject AddPenaltyViewModel Vm

@{
    var showSessionName = penalties
        .Select(x => x.SessionNr)
        .Distinct()
        .Count() > 1;
}

@foreach(var penalty in penalties)
{
    <div class="card mb-2">
        @if(showSessionName)
        {
            <div class="card-header">
                <label>@penalty.SessionName</label>
            </div>
        }
        <div class="card-body">
            <div class="row mb-2">
                <div class="col-6">
                    <h6 class="text-muted">Driver</h6>
                    @if (IsTeamResult)
                    {
                        @penalty.Team?.Name
                    }
                    else
                    {
                        @penalty.Member?.FirstName @penalty.Member?.LastName
                    }
                </div>
                <div class="col-3">
                    @if (string.IsNullOrWhiteSpace(penalty.Lap) == false)
                    {
                        <h6 class="text-muted">Lap</h6>
                        @penalty.Lap
                    }
                </div>
                <div class="col-3">
                    @if (string.IsNullOrWhiteSpace(penalty.Corner) == false)
                    {
                        <h6 class="text-muted">Corner</h6>
                        @penalty.Corner
                    }
                </div>
            </div>
            <div class="row mb-2">
                <div class="col-6">
                    <label style="color: @GetPenaltyColor(penalty)">@((MarkupString)GetPenaltyValue(penalty))</label>
                </div>
                <div class="col-6">
                    @penalty.Reason
                </div>
            </div>
            <div class="d-flex justify-content-end position-absolute top-0 end-0">
                @if (penalty.ReviewId != null)
                {
                    <a class="btn text-muted" href="@($"/{Shared.LeagueName}/Reviews/Events/{penalty.EventId}?reviewId={penalty.ReviewId}")">
                        <span class="bi bi-clipboard2-data" />
                    </a>
                }
                @if (penalty.AddPenaltyId != null && CanEdit)
                {
                    <a class="btn text-muted" @onclick="@(() => EditAddPenaltyAsync(penalty))">
                        <span class="bi bi-pencil-square" />
                    </a>
                    <a class="btn text-muted" @onclick="@(() => DeleteAddPenaltyAsync(penalty))">
                        <span class="bi bi-trash" />
                    </a>
                }
            </div>
        </div>
    </div>
}

@code {
    [CascadingParameter]
    public BlazoredModalInstance ModalInstance { get; set; } = default!;
    [CascadingParameter]
    public IModalService ModalService { get; set; } = default!;
    [Parameter]
    public bool CanEdit { get; set; } = false;
    [Parameter]
    public bool IsTeamResult { get; set; } = false;
    [Parameter]
    public Func<Task<IEnumerable<PenaltyModel>>> GetPenalties { get; set; } = default!;

    private IEnumerable<PenaltyModel> penalties = Array.Empty<PenaltyModel>();

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        BlazorParameterNullException.ThrowIfNull(this, ModalInstance);
        BlazorParameterNullException.ThrowIfNull(this, ModalService);
        BlazorParameterNullException.ThrowIfNull(this, GetPenalties);
        await RefreshPenalties();
    }

    private string GetPenaltyTypeString(PenaltyType type) => type switch
    {
        PenaltyType.Points => "Points",
        PenaltyType.Position => "Positions",
        PenaltyType.Time => "Time",
        PenaltyType.Disqualification => "DSQ",
        _ => string.Empty,
    };

    private string GetPenaltyValue(PenaltyModel penalty) => penalty.Type switch
    {
        PenaltyType.Points => $"- {penalty.Points} pt{(penalty.Points != 1 ? "s" : "")}",
        PenaltyType.Position => $"+ {penalty.Positions.ToString()} position{(penalty.Positions != 1 ? "s" : "")}",
        PenaltyType.Time => $"+ {penalty.Time.ToString()}",
        PenaltyType.Disqualification => """DSQ <span class="bi bi-flag-fill" style="color: black"/>""",
        _ => string.Empty,
    };

    private string GetPenaltyColor(PenaltyModel penalty) => penalty.Type switch
    {
        PenaltyType.Position or PenaltyType.Points => "red",
        _ => "inherit",
    };

    private async Task EditAddPenaltyAsync(PenaltyModel penalty)
    {
        var parameters = new ModalParameters<EditAddPenaltyModal>()
            .Add(x => x.Model, penalty)
            .Add(x => x.CanSelectSession, false)
            .Add(x => x.CanSelectDriver, false)
            .Add(x => x.OnSubmit, async (p, ct) => await p.SaveChanges(ct));
        await ModalService.Show<EditAddPenaltyModal>("Edit penalty", parameters).Result;
        await RefreshPenalties();
    }

    private async Task DeleteAddPenaltyAsync(PenaltyModel penalty)
    {
        var text = IsTeamResult switch
        {
            true => $"Really delete this penalty for {penalty.Team?.Name}?",
            false => $"Really delete this penalty for {penalty.Member?.FirstName} {penalty.Member?.LastName}?",
        };
        var parameters = new ModalParameters<ConfirmModal>()
            .Add(x => x.Text, text)
            .Add(x => x.ButtonTypes, ButtonTypes.YesNo);
        var confirmed = await ModalService.Show<ConfirmModal>("Delete penalty", parameters).Result;
        if (confirmed.Confirmed == false)
        {
            return;
        }
        Vm.SetModel(penalty);
        var result = await Vm.Delete();
        if (result.IsSuccess)
        {
            penalties = penalties.Where(x => x != penalty);
        }
        await RefreshPenalties();
    }

    private async Task RefreshPenalties()
    {
        penalties = await GetPenalties();
    }
}
