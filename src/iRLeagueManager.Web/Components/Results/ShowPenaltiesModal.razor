@using iRLeagueApiCore.Common.Enums;
@using iRLeagueApiCore.Common.Models;
@inherits UtilityComponentBase
@inject AddPenaltyViewModel Vm
@inject IDialogService DialogService

<MudDialog>
    <DialogContent>
        <MudStack Spacing="2">
            @foreach(var penalty in Penalties)
            {
                <MudCard Outlined="true">
                    <MudCardHeader>
                        <CardHeaderContent>
                            @if (ShowSessionName)
                            {
                                <MudText Typo="Typo.h6">@penalty.SessionName</MudText>
                            }
                        </CardHeaderContent>
                        <CardHeaderActions>
                            @if (penalty.ReviewId != null)
                            {
                                <MudTooltip Text="Open Review">
                                    <MudIconButton OnClick="@(() => NavigateTo($"/{Shared.LeagueName}/Reviews/Events/{penalty.EventId}?reviewId={penalty.ReviewId}"))" 
                                        Icon="@Icons.Material.Filled.Reviews"
                                        Size="Size.Small" />
                                </MudTooltip>
                            }
                            @if (penalty.AddPenaltyId != null && CanEdit)
                            {
                                <MudTooltip Text="Edit">
                                    <MudIconButton OnClick="@(() => EditAddPenaltyAsync(penalty))" Icon="@Icons.Material.Filled.Edit" Size="Size.Small"/>
                                </MudTooltip>
                                <MudTooltip Text="Delete">
                                    <MudIconButton OnClick="@(() => DeleteAddPenaltyAsync(penalty))" Icon="@Icons.Material.Filled.Delete" Size="Size.Small" />
                                </MudTooltip>
                            }
                        </CardHeaderActions>
                    </MudCardHeader>
                    <MudCardContent>
                        <MudGrid>
                            <MudItem xs="6">
                                <MudText Typo="Typo.caption">Driver</MudText>
                                <MudText>@penalty.Member?.FirstName @penalty.Member?.LastName</MudText>
                            </MudItem>
                            <MudItem xs="3">
                                @if (string.IsNullOrWhiteSpace(penalty.Lap) == false)
                                {
                                    <MudText Typo="Typo.caption">Lap</MudText>
                                    <MudText>@penalty.Lap</MudText>
                                }
                            </MudItem>
                            <MudItem xs="3">
                                @if (string.IsNullOrWhiteSpace(penalty.Corner) == false)
                                {
                                    <MudText Typo="Typo.caption">Corner</MudText>
                                    <MudText>@penalty.Corner</MudText>
                                }
                            </MudItem>
                            <MudItem xs="6">
                                <MudText Style="@($"color: {GetPenaltyColor(penalty)}")">@GetPenaltyValueString(penalty)</MudText>
                            </MudItem>
                            <MudItem xs="6">
                                <MudText>@penalty.Reason</MudText>
                            </MudItem>
                        </MudGrid>
                    </MudCardContent>
                </MudCard>
            }
        </MudStack>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="@(() => DialogInstance.Close())">Close</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter]
    public MudDialogInstance DialogInstance { get; set; } = default!;
    [Parameter]
    public bool CanEdit { get; set; } = false;
    [Parameter]
    public bool IsTeamResult { get; set; } = false;
    [Parameter]
    public Func<Task<IEnumerable<PenaltyModel>>> GetPenalties { get; set; } = default!;

    private bool ShowSessionName => Penalties
        .Select(x => x.SessionNr)
        .Distinct()
        .Count() > 1;

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        BlazorParameterNullException.ThrowIfNull(this, Penalties);
        await RefreshPenalties();
    }

    private string GetPenaltyTypeString(PenaltyType type) => type switch
    {
        PenaltyType.Points => "Points",
        PenaltyType.Position => "Positions",
        PenaltyType.Time => "Time",
        PenaltyType.Disqualification => "DSQ",
        _ => string.Empty,
    };

    private string GetPenaltyValue(PenaltyModel penalty) => penalty switch
    {
        { Type: PenaltyType.Points, Points: >= 0 } => $"{-penalty.Points} pt{(penalty.Points != 1 ? "s" : "")}",
        { Type: PenaltyType.Points, Points: < 0 } => $"+{-penalty.Points} pt{(penalty.Points != 1 ? "s" : "")}",
        { Type: PenaltyType.Position } => $"+ {penalty.Positions.ToString()} position{(penalty.Positions != 1 ? "s" : "")}",
        { Type: PenaltyType.Time } => $"+ {penalty.Time.ToString()}",
        { Type: PenaltyType.Disqualification } => """DSQ <span class="bi bi-flag-fill" style="color: black"/>""",
        _ => string.Empty,
    };

    private string GetPenaltyColor(PenaltyModel penalty) => penalty switch
    {
        { Type: PenaltyType.Position, Positions: >= 0 } or {Type: PenaltyType.Points, Points: >= 0}  => "red",
        { Type: PenaltyType.Position, Positions: < 0 } or { Type: PenaltyType.Points, Points: < 0 } => "green",
        _ => "inherit",
    };

    private async Task EditAddPenaltyAsync(PenaltyModel penalty)
    {
        var parameters = new DialogParameters<EditAddPenaltyModal>()
        {
            {x => x.Model, penalty},
            {x => x.CanSelectSession, false},
            {x => x.CanSelectDriver, false},
            {x => x.OnSubmit, async (p, ct) => await p.SaveChanges(ct)},
        };
        await DialogService.Show<EditAddPenaltyModal>("Edit penalty", parameters).Result;
    }

    private async Task DeleteAddPenaltyAsync(PenaltyModel penalty)
    {
        var parameters = new DialogParameters<MudConfirmModal>()
        {
            {x => x.Text, $"Really delete this penalty for {penalty.Member?.FirstName} {penalty.Member?.LastName}?"},
            {x => x.ButtonTypes, ButtonTypes.YesNo},
        };
        var confirmed = await DialogService.Show<MudConfirmModal>("Delete penalty", parameters).Result;
        if (confirmed.Canceled)
        {
            return;
        }
        Vm.SetModel(penalty);
        var result = await Vm.Delete();
        if (result.IsSuccess)
        {
            penalties = penalties.Where(x => x != penalty);
        }
        await RefreshPenalties();
    }

    private async Task RefreshPenalties()
    {
        penalties = await GetPenalties();
    }
}
