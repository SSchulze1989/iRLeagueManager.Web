@using iRLeagueApiCore.Client.ResultsParsing
@using iRLeagueApiCore.Common.Models
@using System.Text.Json
@inject LeagueApiService apiService
@inherits MvvmComponentBase

<div class="mb-3">
    <label for="selectJsonResultInput" class="form-label">Select json File</label>
    <div class="input-group">
        <InputFile OnChange=OnFileChanged class="form-control" id="selectJsonResultInput" accept=".json"/>
        <div class="input-group-text" style="min-width: 2.75rem">
            @if (FileLoading)
            {
                <span class="oi spinner-border-sm"/>
            }
            else if (ParsingFailed)
            {
                <span class="oi oi-delete text-danger"/>
            }
            else if (ParsedResult is not null)
            {
                <span class="oi oi-check text-success"/>
            }
            else
            {
                <span class="oi oi-check visually-hidden"/>
            }
        </div>
    </div>
    <FormValidationMessage TValue=string Message=@ValidationMessage/>
    <CancelSubmitButtons CanSubmit=@(ParsedResult is not null) 
                         SubmitText="Upload" 
                         CancelText="Cancel" 
                         OnSubmit=Submit 
                         OnCancel=Cancel 
                         IsLoading=Loading/>
</div>

@code {
    private CancellationTokenSource cts = new();

    [CascadingParameter]
    public BlazoredModalInstance? ModalInstance { get; set; }

    [Parameter]
    public EventModel Event { get; set; } = default!;

    private bool FileLoading { get; set; } = false;

    private bool ParsingFailed { get; set; } = false;

    private bool Loading { get; set; } = false;

    private ParseSimSessionResult? ParsedResult;

    private string? ValidationMessage { get; set; }

    protected override void OnParametersSet()
    {
        _ = Event ?? throw new InvalidOperationException($"Parameter {nameof(Event)} must have a value");
    }

    private async Task Submit()
    {
        if (ParsedResult is null || apiService.CurrentLeague is null)
        {
            return;
        }

        try
        {
            Loading = true;
            var request = apiService.CurrentLeague.Events()
                .WithId(Event.Id)
                .Results()
                .Upload()
                .Post(ParsedResult, cts.Token);
            var result = await request;

            if (result.Success == false)
            {
                var statusResult = result.ToStatusResult();
                ValidationMessage = statusResult.Message;
                return;
            }

            if (ModalInstance is not null)
            {
                await ModalInstance.CloseAsync();
            }
        }
        finally
        {
            Loading = false;
        }
    }

    private async Task Cancel()
    {
        if (ModalInstance is not null)
        {
            await ModalInstance.CancelAsync();
        }
    }

    private async Task OnFileChanged(InputFileChangeEventArgs e)
    {
        // try parse the json file
        try
        {
            FileLoading = true;
            ParsedResult = null;
            var browserFile = e.File;
            using var stream = browserFile.OpenReadStream();
            ParsedResult = await JsonSerializer.DeserializeAsync<ParseSimSessionResult>(stream);
            ParsingFailed = false;
        }
        catch (Exception ex) when (ex is IOException || ex is JsonException || ex is ArgumentNullException)
        {
            ParsingFailed = true;
        }
        finally
        {
            FileLoading = false;
        }
    }

    protected override void Dispose(bool disposing)
    {
        if (disposing == false)
        {
            cts.Cancel();
            cts.Dispose();
        }
        base.Dispose(disposing);
    }
}
