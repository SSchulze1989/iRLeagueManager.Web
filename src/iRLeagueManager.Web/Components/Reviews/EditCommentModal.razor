@using iRLeagueApiCore.Common.Enums
@using iRLeagueApiCore.Common.Models
@using iRLeagueApiCore.Common.Models.Results;
@using iRLeagueApiCore.Common.Models.Reviews
@using iRLeagueManager.Web.ViewModels
@inherits EditMudModalBase<ReviewCommentViewModel, ReviewCommentModel>
@inject LeagueApiService ApiService

<EditForm Model=Vm OnValidSubmit=Submit>
    <MudDialog>
        <DialogContent>
            <MudStack Spacing="2">
                <MudTextField Label="Text" FullWidth="true" Lines="6" @bind-Value="Vm.Text" Variant="Variant.Outlined"/>
                <MudGrid Spacing="1">
                    @foreach(var vote in Vm.Votes)
                    {
                        <MudItem xs="5">
                            <MudSelect Label="Vote" @bind-Value="vote.VoteCategoryId" Variant="Variant.Outlined">
                                @foreach (var cat in VoteCategories)
                                {
                                    <MudSelectItem Value=@((long?)cat.CatId)>@cat.Text</MudSelectItem>
                                }
                            </MudSelect>
                        </MudItem>
                        <MudItem xs="6">
                            <MudSelect Label="Driver at fault" 
                                        @bind-Value="vote.MemberAtFault" 
                                        Variant="Variant.Outlined" 
                                        ToStringFunc="@(member => member != null ? $"{member.FirstName} {member.LastName}" : string.Empty)">
                                <MudSelectItem Value="default(MemberInfoModel)"></MudSelectItem>
                                @foreach (var member in InvolvedMembers)
                                {
                                    <MudSelectItem Value="@member" />
                                }
                            </MudSelect>
                        </MudItem>
                        <MudItem xs="1" Class="d-flex align-center">
                            <MudIconButton Icon="@Icons.Material.Filled.Remove" Color="Color.Error" OnClick="@(() => Vm.RemoveVote(vote))"/>
                        </MudItem>
                    }
                    <MudItem xs="5">
                        <MudSelect Label="Vote" @bind-Value="NewValue" Variant="Variant.Outlined" @ref=@NewValueInput>
                            @foreach (var cat in VoteCategories)
                            {
                                <MudSelectItem Value=@((long?)cat.CatId)>@cat.Text</MudSelectItem>
                            }
                        </MudSelect>
                    </MudItem>
                </MudGrid>
            </MudStack>
        </DialogContent>
        <DialogActions>
            <MudButton Color="Color.Secondary" OnClick="Cancel">Cancel</MudButton>
            <MudButton Color="Color.Primary" OnClick="Submit">Submit</MudButton>
        </DialogActions>
    </MudDialog>
</EditForm>

@code {
    [Parameter]
    public IEnumerable<MemberInfoModel> InvolvedMembers { get; set; } = Array.Empty<MemberInfoModel>();
    [Parameter]
    public IEnumerable<VoteCategoryViewModel> VoteCategories { get; set; } = default!;

    private long? NewValue
    {
        get => default;
        set
        {
            if(value is not null)
            {
                _ = SetNewValue(value);
            }
        }
    }

    private MudSelect<long?> NewValueInput { get; set; } = default!;

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        BlazorParameterNullException.ThrowIfNull(this, InvolvedMembers);
        BlazorParameterNullException.ThrowIfNull(this, VoteCategories);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender == false)
        {
            return;
        }
        
        await InvokeAsync(StateHasChanged);
        foreach (var vote in Vm.Votes)
        {
            var tmp = vote.VoteCategoryId;
            vote.VoteCategoryId = 0;
            vote.VoteCategoryId = tmp;
        }
    }

    private async Task SetNewValue(long? value)
    {
        var voteCat = VoteCategories.FirstOrDefault(x => x.CatId == value);
        if (voteCat is not null)
        {
            var vote = new VoteModel()
            {
                VoteCategoryId = voteCat.CatId,
                VoteCategoryText = voteCat.Text,
            };
            Vm.AddVote(vote);
        }
        await NewValueInput.FocusAsync();
    }

    private void SetMemberAtFault(VoteViewModel vote, long? memberId)
    {
        var member = InvolvedCars
            .Select(x => x.Members.FirstOrDefault())
            .NotNull()
            .FirstOrDefault(x => x.MemberId == memberId);

        if (memberId is null || member is null)
        {
            vote.MemberAtFault = null;
            return;
        }
        vote.MemberAtFault = new MemberInfoModel()
        {
            MemberId = memberId.Value,
            FirstName = member.FirstName,
            LastName = member.LastName,
        };
    }
}
