@using iRLeagueApiCore.Common.Enums
@using iRLeagueApiCore.Common.Models
@using iRLeagueApiCore.Common.Models.Results;
@using iRLeagueApiCore.Common.Models.Reviews
@using iRLeagueManager.Web.ViewModels
@inherits MvvmComponentBase
@inject LeagueApiService ApiService
@inject ReviewCommentViewModel Comment

<EditForm Model=Comment OnValidSubmit=Submit>
    <div class="input-group-list">
        <InputGroup Label="Text">
            <InputTextArea class="form-control" @bind-Value=Comment.Text style="height: 140px;"/>
        </InputGroup>
        @foreach(var vote in Comment.Votes)
        {
            <InputGroup Label="Vote">
                <InputSelect class="form-select" @bind-Value=vote.VoteCategoryId>
                    @foreach(var cat in AvailableVoteCategories)
                    {
                        <option value=@cat.Id>@cat.Text</option>
                    }
                </InputSelect>
                @if (IsTeamEvent)
                {
                    <InputSelect class="form-select" @bind-Value=vote.TeamAtFaultId>
                        <option value=0></option>
                        @foreach (var car in InvolvedCars)
                        {

                            var team = car.Team ?? new();
                            <option value=@team.TeamId>@car.Number @team.Name</option>
                        }
                    </InputSelect>
                }
                else
                {
                    <InputSelect class="form-select" @bind-Value=vote.MemberAtFaultId>
                        <option value=0></option>
                        @foreach (var car in InvolvedCars)
                        {

                            var member = car.Members.FirstOrDefault() ?? new();
                            <option value=@member.MemberId>#@car.Number @member.FirstName @member.LastName</option>
                        }
                    </InputSelect>
                }
                <button class="btn btn-outline-danger" type="button" @onclick=@(() => Comment.RemoveVote(vote))>
                    <span class="oi oi-x"/>
                </button>
            </InputGroup>
        }
        <InputGroup Label="Vote">
            <InputSelect class="form-select" @bind-Value=@NewValue @ref=@NewValueInput>
                <option value=""></option>
                @foreach(var cat in AvailableVoteCategories)
                {
                    <option value=@cat.Id>@cat.Text</option>
                }
            </InputSelect>
            <div class="input-group-text" type="button">
                <span class="oi oi-x invisible"/>
            </div>
        </InputGroup>
    </div>
    <CancelSubmitButtons ModelState=Comment SubmitText="Save" OnCancel=Cancel/>
</EditForm>

@code {
    private CancellationTokenSource cts = new();

    [CascadingParameter]
    public BlazoredModalInstance? ModalInstance { get; set; }
    [Parameter]
    public IEnumerable<EventCarInfoModel> InvolvedCars { get; set; } = Array.Empty<EventCarInfoModel>();
    //[Parameter]
    //public ReviewViewModel Review { get; set; } = default!;
    [Parameter]
    public ReviewCommentModel Model { get; set; } = default!;
    [Parameter]
    public Func<ReviewCommentViewModel, CancellationToken, Task<StatusResult>>? OnSubmit { get; set; }
    [Parameter]
    public bool IsTeamEvent { get; set; } = false;

    private long? NewValue
    {
        get => default;
        set
        {
            if(value is not null)
            {
                _ = SetNewValue(value);
            }
        }
    }

    private InputSelect<long?> NewValueInput { get; set; } = default!;

    private IEnumerable<VoteCategoryModel> AvailableVoteCategories = Array.Empty<VoteCategoryModel>();

    protected override void OnParametersSet()
    {
        _ = Model ?? throw new InvalidOperationException($"Parameter {nameof(Model)} must have a value");
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender == false)
        {
            return;
        }
        AvailableVoteCategories = await GetAvailableVoteCategories();
        Comment.SetModel(Model);
        await InvokeAsync(StateHasChanged);
    }

    private async Task SetNewValue(long? value)
    {
        var voteCat = AvailableVoteCategories.FirstOrDefault(x => x.Id == value);
        if (voteCat is not null)
        {
            var vote = new VoteModel()
            {
                VoteCategoryId = voteCat.Id,
                VoteCategoryText = voteCat.Text,
            };
            Comment.AddVote(vote);
        }
        if (NewValueInput.Element  is not null)
        {
            await NewValueInput.Element.Value.FocusAsync();
        }
    }

    private void SetMemberAtFault(VoteViewModel vote, long? memberId)
    {
        var member = InvolvedCars
            .Select(x => x.Members.FirstOrDefault())
            .NotNull()
            .FirstOrDefault(x => x.MemberId == memberId);

        if (memberId is null || member is null)
        {
            vote.MemberAtFault = null;
            return;
        }
        vote.MemberAtFault = new MemberInfoModel()
        {
            MemberId = memberId.Value,
            FirstName = member.FirstName,
            LastName = member.LastName,
        };
    }

    private async Task Submit()
    {
        //var success = await Review.SaveChangesAsync(cts.Token);
        bool success = true;
        if (OnSubmit != null)
        {
            success &= (await OnSubmit.Invoke(Comment, cts.Token)).IsSuccess;
        }
        if (success && ModalInstance != null)
        {
            var result = ModalResult.Ok(Comment.GetModel());
            await ModalInstance.CloseAsync(result);
        }
    }

    private async Task Cancel()
    {
        if (ModalInstance != null)
        {
            await ModalInstance.CancelAsync();   
        }
    }

    private async Task<IEnumerable<VoteCategoryModel>> GetAvailableVoteCategories()
    {
        if (ApiService.CurrentLeague is null)
        {
            return Array.Empty<VoteCategoryModel>();
        }

        var request = ApiService.CurrentLeague
            .VoteCategories()
            .Get();
        var result = await request;
        if (result.Success && result.Content is IEnumerable<VoteCategoryModel> models)
        {
            return models;
        }
        return Array.Empty<VoteCategoryModel>();
    }

    protected override void Dispose(bool disposing)
    {
        if (disposing == false)
        {
            cts.Cancel();
            cts.Dispose();
        }
        base.Dispose(disposing);
    }
}
