@using Blazored.Typeahead
@using iRLeagueApiCore.Common.Enums
@using iRLeagueApiCore.Common.Models
@using iRLeagueApiCore.Common.Models.Results;
@using iRLeagueApiCore.Common.Models.Reviews
@using iRLeagueManager.Web.ViewModels
@inherits MvvmComponentBase
@inject ReviewViewModel Review

<EditForm Model=Review OnValidSubmit=Submit>
    <StatusResultValidator @ref=ResultValidator/>
    <div class="input-group-list p-1">
        <InputGroup Label="Session">
            <InputSelect class="form-select" placeholder="Select Session" ariaaria-label="Select Session" id="incident_session" @bind-Value="Review.SessionId"> 
                @if (EventList.Selected != null)
                {
                    @foreach(var session in EventList.Selected.Sessions)
                    {
                        <option value=@session.SessionId>@session.Name</option>
                    }
                }
            </InputSelect>
        </InputGroup>
        <FormValidationMessage For=@(() => Review.SessionId) />
        <InputGroup Label="Nr.">
            <InputText class="form-control" placeholder="Incident Nr." aria-label="IncidentNr" id="incident_nr" @bind-Value="Review.IncidentNr"/>
        </InputGroup>
        <InputGroup Label="Lap">
            <InputText class="form-control" placeholder="Lap" aria-label="Lap" id="incident_lap" @bind-Value="Review.OnLap" />
        </InputGroup>
        <InputGroup Label="Corner">
            <InputText class="form-control" placeholder="Corner" aria-label="Corner" id="incident_corner" @bind-Value="Review.Corner" />
        </InputGroup>
        <InputGroup Label="Incident">
            <InputText class="form-control" placeholder="Incident Kind" aria-label="Incident Kind" id="incident_kind" @bind-Value="Review.IncidentKind" />
        </InputGroup>
        <InputGroup Label="Description">
            <InputTextArea class="form-control" placeholder="Description" aria-label="Description" id="description" @bind-Value="Review.FullDescription" style="height: 140px;"/>
        </InputGroup>
    </div>
    <FormValidationMessage For=@(() => Review.IncidentKind) />
    <div class="p-1">
        <div class="row g-0">
            <div class="input-group-text" style="border-bottom-left-radius:0; border-bottom-right-radius:0; border-bottom: none">
                <span>Involved Cars</span>
            </div>
        </div>
        <div>
            <BlazoredTypeahead @bind-Values=InvolvedCars
                                class="form-control p-0"
                                style="border-top-right-radius:0; border-top-left-radius:0;"
                                EnableDropDown=true
                                SearchMethod=SearchCars
                                MinimumLength=1
                                MaximumSuggestions=100
                                DeleteItemsOnBackspace=false
                                placeholder="Search Team by name or driver...">
                <SelectedTemplate Context=car>
                    #@car.Number @(IsTeamEvent ? car.Team?.Name : $"{car.Members.FirstOrDefault()?.FirstName} {car.Members.FirstOrDefault()?.LastName}")
                </SelectedTemplate>
                <ResultTemplate Context=car>
                    #@car.Number @(IsTeamEvent ? $"{car.Team?.Name} ({string.Join(',', car.Members.Select(x => $"{x.FirstName} {x.LastName}"))}" : $"{car.Members.FirstOrDefault()?.FirstName} {car.Members.FirstOrDefault()?.LastName}")
                </ResultTemplate>
                <NotFoundTemplate Context=name>
                    <span>Team Not found!</span>
                </NotFoundTemplate>
            </BlazoredTypeahead>
        </div>
    </div>
    <FormValidationMessage For=@(() => Review.InvolvedMembers) />
    <FormValidationMessage For=@(() => Review.InvolvedTeams) />
    <FormValidationMessage TValue=string Message=@ResultValidator?.ErrorMessage />
    <CancelSubmitButtons ModelState=Review SubmitText="Save" OnCancel=Cancel/>
</EditForm>

@code {
    private CancellationTokenSource cts = new();

    [CascadingParameter]
    public BlazoredModalInstance? ModalInstance { get; set; }
    [CascadingParameter]
    public EventListViewModel EventList { get; set; } = default!;

    [Parameter]
    public ReviewModel Model { get; set; } = default!;

    [Parameter]
    public CarListModel EventCars { get; set; } = new();

    [Parameter]
    public Func<ReviewViewModel, CancellationToken, Task<StatusResult>>? OnSubmit { get; set; }

    private StatusResultValidator? ResultValidator { get; set; }

    private IList<EventCarInfoModel> InvolvedCars { get; set; } = Array.Empty<EventCarInfoModel>();

    private bool IsTeamEvent => EventCars.IsTeamEvent;

    protected override void OnParametersSet()
    {
        _ = Model ?? throw new InvalidOperationException($"Parameter {nameof(Model)} must have a value");
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender == false)
        {
            return;
        }
        Review.SetModel(Model);
        InvolvedCars = GetInvolvedCars().ToList();
    }

    private async Task Submit()
    {
        UpdateInvolved();
        bool success = true;
        if (OnSubmit != null)
        {
            var result = await OnSubmit.Invoke(Review, cts.Token);
            ResultValidator?.ValidateResult(result);
            success &= result.IsSuccess;
        }
        if (success && ModalInstance != null)
        {
            var result = ModalResult.Ok(Review.GetModel());
            await ModalInstance.CloseAsync(result);
        }
    }

    private async Task Cancel()
    {
        if (ModalInstance != null)
        {
            await ModalInstance.CancelAsync();   
        }
    }

    private async Task<IEnumerable<EventCarInfoModel>> SearchCars(string searchString)
    {
        var filteredCars = await Task.FromResult(EventCars.Cars
            .Where(x => InvolvedCars.Contains(x) == false));
        if (string.IsNullOrEmpty(searchString))
        {
            return filteredCars;
        }

        var terms = searchString.ToLower().Split(',', ' ', ';');
        return filteredCars
            .Where(x => MatchCarSearchTerms(x, terms));
    }

    private bool MatchCarSearchTerms(EventCarInfoModel car, params string[] terms)
    {
        var carMatchString = $"#{car.Number} {car.Team?.Name ?? ""} {string.Join(" ", car.Members.Select(member => member.FirstName + " " + member.LastName))}";
        return terms.Any(x => carMatchString.Contains(x, StringComparison.OrdinalIgnoreCase));
    }

    private IEnumerable<EventCarInfoModel> GetInvolvedCars()
    {
        if (IsTeamEvent)
        {
            return EventCars.Cars
                .Where(car => Review.InvolvedTeams.Any(team => team.TeamId == car.Team?.TeamId))
                .OrderBy(x => x.Number);
        }
        return EventCars.Cars
            .Where(car => Review.InvolvedMembers.Any(member => car.Members.Any(carMember => carMember.MemberId == member.MemberId)))
            .OrderBy(x => x.Number);
    }

    private void UpdateInvolved()
    {
        if (IsTeamEvent)
        {
            Review.InvolvedTeams = InvolvedCars.Select(x => x.Team).NotNull().ToList();
            Review.InvolvedMembers.Clear();
            return;
        }
        Review.InvolvedMembers = InvolvedCars.SelectMany(x => x.Members).ToList();
        Review.InvolvedTeams.Clear();
    }

    protected override void Dispose(bool disposing)
    {
        if (disposing == false)
        {
            cts.Cancel();
            cts.Dispose();
        }
        base.Dispose(disposing);
    }
}
