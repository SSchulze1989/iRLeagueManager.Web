@using Blazored.Typeahead
@using iRLeagueApiCore.Common.Enums
@using iRLeagueApiCore.Common.Models.Members
@using iRLeagueApiCore.Common.Models.Reviews
@using iRLeagueManager.Web.ViewModels
@inherits MvvmComponentBase
@inject ReviewViewModel Review

<EditForm Model=Review OnValidSubmit=Submit>
    <InputGroup Label="Session">
        <InputSelect class="form-select" placeholder="Select Session" ariaaria-label="Select Session" id="incident_session" @bind-Value="Review.SessionId"> 
            @if (EventList.Selected != null)
            {
                @foreach(var session in EventList.Selected.Sessions)
                {
                    <option value=@session.SessionId>@session.Name</option>
                }
            }
        </InputSelect>
    </InputGroup>
    <InputGroup Label="Nr.">
        <InputText class="form-control" placeholder="Incident Nr." aria-label="IncidentNr" id="incident_nr" @bind-Value="Review.IncidentNr"/>
    </InputGroup>
    <InputGroup Label="Lap">
        <InputText class="form-control" placeholder="Lap" aria-label="Lap" id="incident_lap" @bind-Value="Review.OnLap" />
    </InputGroup>
    <InputGroup Label="Corner">
        <InputText class="form-control" placeholder="Corner" aria-label="Corner" id="incident_corner" @bind-Value="Review.Corner" />
    </InputGroup>
    <InputGroup Label="Incident">
        <InputText class="form-control" placeholder="Incident Kind" aria-label="Incident Kind" id="incident_kind" @bind-Value="Review.IncidentKind" />
    </InputGroup>
    <div class="p-1 mt-2">
        <div class="row g-0">
            <div class="input-group-text" style="border-bottom-left-radius:0; border-bottom-right-radius:0; border-bottom: none">
                <label>Involved Drivers</label>
            </div>
        </div>
        <div>
            <BlazoredTypeahead
                @bind-Values=Review.InvolvedMembers
                class="form-control p-0"
                style="border-top-right-radius:0; border-top-left-radius:0;"
                EnableDropDown=true  
                SearchMethod=SearchMembers 
                MinimumLength=1
                MaximumSuggestions=100
                DeleteItemsOnBackspace=false
                placeholder="Search driver by name...">

                <SelectedTemplate Context=member>
                    @member.FirstName @member.LastName
                </SelectedTemplate>
                <ResultTemplate Context=member>
                    @member.FirstName @member.LastName
                </ResultTemplate>
                <NotFoundTemplate Context=name>
                    <span>Driver <b>@name</b> Not found!</span>
                </NotFoundTemplate>
            </BlazoredTypeahead>
        </div>
    </div>
    <CancelSubmitButtons ModelState=Review SubmitText="Save" OnCancel=Cancel/>
</EditForm>

@code {
    private CancellationTokenSource cts = new();

    [CascadingParameter]
    public BlazoredModalInstance? ModalInstance { get; set; }
    [CascadingParameter]
    public EventListViewModel EventList { get; set; } = default!;
    //[Parameter]
    //public ReviewViewModel Review { get; set; } = default!;

    [Parameter]
    public ReviewModel Model { get; set; } = default!;

    [Parameter]
    public IEnumerable<MemberInfoModel> EventMembers { get; set; } = Array.Empty<MemberInfoModel>();

    [Parameter]
    public Func<ReviewViewModel, CancellationToken, Task<bool>>? OnSubmit { get; set; }

    protected override void OnParametersSet()
    {
        _ = Model ?? throw new InvalidOperationException($"Parameter {nameof(Model)} must have a value");
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender == false)
        {
            return;
        }
        Review.SetModel(Model);
    }

    private async Task Submit()
    {
        //var success = await Review.SaveChangesAsync(cts.Token);
        bool success = true;
        if (OnSubmit != null)
        {
            success |= await OnSubmit.Invoke(Review, cts.Token);
        }
        if (success && ModalInstance != null)
        {
            var result = ModalResult.Ok(Review.GetModel());
            await ModalInstance.CloseAsync(result);
        }
    }

    private async Task Cancel()
    {
        if (ModalInstance != null)
        {
            await ModalInstance.CancelAsync();   
        }
    }

    private Task<IEnumerable<MemberInfoModel>> SearchMembers(string searchString)
    {
        if (string.IsNullOrEmpty(searchString))
        {
            return Task.FromResult(EventMembers
                .Where(x => Review.InvolvedMembers.Any(r => r.MemberId == x.MemberId) == false));
        }

        var terms = searchString.ToLower().Split(',', ' ', ';')
        .Where(x => string.IsNullOrWhiteSpace(x) == false)
            .ToArray();
        return Task.FromResult(EventMembers
            .Where(x => MatchMemberSearchTerms(x, terms))
            .Where(x => Review.InvolvedMembers.Any(r => r.MemberId == x.MemberId) == false));
    }

    private bool MatchMemberSearchTerms(MemberInfoModel member, params string[] terms)
    {
        var searchName = member.FirstName + member.LastName;
        return terms.Any(x => searchName.Contains(x, StringComparison.OrdinalIgnoreCase));
    }

    protected override void Dispose(bool disposing)
    {
        if (disposing == false)
        {
            cts.Cancel();
            cts.Dispose();
        }
        base.Dispose(disposing);
    }
}
