@using Blazored.Typeahead
@using iRLeagueApiCore.Common.Enums
@using iRLeagueApiCore.Common.Models
@using iRLeagueApiCore.Common.Models.Results;
@using iRLeagueApiCore.Common.Models.Reviews
@using iRLeagueManager.Web.ViewModels
@inherits EditMudModalBase<ReviewViewModel, ReviewModel>

<EditForm Model=Vm OnValidSubmit=Submit>
    <StatusResultValidator @ref=ResultValidator />
    <MudDialog Style="background-color: var(--mud-palette-background-grey);">
        <DialogContent>
            <MudGrid Spacing="1">
                <MudItem xs=12>
                    <MudSelect Label="Session" @bind-Value="Vm.SessionId" For="@(() => Vm.SessionId)" Variant="Variant.Filled">
                        @if (EventList.Selected != null)
                        {
                            @foreach (var session in EventList.Selected.Sessions)
                            {
                                <MudSelectItem Value=@((long?)session.SessionId)>@session.Name</MudSelectItem>
                            }
                        }
                    </MudSelect>
                </MudItem>
                <MudItem xs="4">
                    <MudTextField Label="Incident Nr." @bind-Value="Vm.IncidentNr" Variant="Variant.Filled"/>
                </MudItem>
                <MudItem xs="4">
                    <MudTextField Label="Lap" @bind-Value="Vm.OnLap" Variant="Variant.Filled" />
                </MudItem>
                <MudItem xs="4">
                    <MudTextField Label="Corner" @bind-Value="Vm.Corner" Variant="Variant.Filled" />
                </MudItem>
                <MudItem xs="12">
                    <MudTextField Label="Incident Kind" @bind-Value="Vm.IncidentKind" For="@(() => Vm.IncidentKind)" Variant="Variant.Filled" id="incident_kind"/>
                </MudItem>
                <MudItem xs="12">
                    <MudTextField Label="Description" @bind-Value="Vm.FullDescription" Lines="4" Variant="Variant.Filled" />
                </MudItem>
                <MudItem xs="12">
                    <MultiSelectAutoComplete Label="Members"
                                             @bind-Values=Vm.InvolvedMembers
                                             SearchFunc="SearchMembers"
                                             ToStrinFunc="@(member => member is null ? string.Empty : $"{member.FirstName} {member.LastName}")"
                                             Variant="Variant.Filled"/>
                </MudItem>
            </MudGrid>
            <FormValidationMessage TValue=string Message=@ResultValidator?.ErrorMessage />
        </DialogContent>
        <DialogActions>
            <MudButton Color="Color.Secondary" OnClick="Cancel">Cancel</MudButton>
            <ProgressButton Color="Color.Primary" OnClick="Submit" Loading="Loading" Disabled="!HasChanged">Save</ProgressButton>
        </DialogActions>
    </MudDialog>
</EditForm>

@code {
    [Parameter]
    public EventListViewModel EventList { get; set; } = default!;
    //[Parameter]
    //public ReviewViewModel Review { get; set; } = default!;

    [Parameter]
    public ReviewModel Model { get; set; } = default!;

    [Parameter]
    public CarListModel EventCars { get; set; } = new();

    [Parameter]
    public Func<ReviewViewModel, CancellationToken, Task<StatusResult>>? OnSubmit { get; set; }

    private StatusResultValidator? ResultValidator { get; set; }

    protected override void OnParametersSet()
    {
        _ = Model ?? throw new InvalidOperationException($"Parameter {nameof(Model)} must have a value");
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender == false)
        {
            return;
        }
        Review.SetModel(Model);
    }

    private async Task Submit()
    {
        //var success = await Review.SaveChangesAsync(cts.Token);
        bool success = true;
        if (OnSubmit != null)
        {
            var result = await OnSubmit.Invoke(Review, cts.Token);
            ResultValidator?.ValidateResult(result);
            success &= result.IsSuccess;
        }
        if (success && ModalInstance != null)
        {
            var result = ModalResult.Ok(Review.GetModel());
            await ModalInstance.CloseAsync(result);
        }
    }

    private async Task Cancel()
    {
        if (ModalInstance != null)
        {
            await ModalInstance.CancelAsync();   
        }
    }

    private Task<IEnumerable<MemberInfoModel>> SearchMembers(string searchString)
    {
        var filteredCars = await Task.FromResult(EventCars.Cars
            .Where(x => InvolvedCars.Contains(x) == false));
        if (string.IsNullOrEmpty(searchString))
        {
            return Task.FromResult(EventMembers
                .Where(x => Review.InvolvedMembers.Any(r => r.MemberId == x.MemberId) == false));
        }

        var terms = searchString.ToLower().Split(',', ' ', ';')
        .Where(x => string.IsNullOrWhiteSpace(x) == false)
            .ToArray();
        return Task.FromResult(EventMembers
            .Where(x => MatchMemberSearchTerms(x, terms))
            .Where(x => Review.InvolvedMembers.Any(r => r.MemberId == x.MemberId) == false));
    }

    private void UpdateInvolved()
    {
        if (IsTeamEvent)
        {
            Review.InvolvedTeams = InvolvedCars.Select(x => x.Team).NotNull().ToList();
            Review.InvolvedMembers.Clear();
            return;
        }
        Review.InvolvedMembers = InvolvedCars.SelectMany(x => x.Members).ToList();
        Review.InvolvedTeams.Clear();
    }
}
