@using iRLeagueApiCore.Common.Enums
@using iRLeagueApiCore.Common.Models
@using iRLeagueApiCore.Common.Models.Results;
@using iRLeagueApiCore.Common.Models.Reviews
@using iRLeagueManager.Web.ViewModels
@inherits EditMudModalBase<ReviewViewModel, ReviewModel>
@inject LeagueApiService ApiService

<EditForm Model=Vm OnValidSubmit=Submit>
    <MudDialog>
        <DialogContent>
            <MudStack Spacing="2">
                <MudTextField Label="Text" @bind-Value="Vm.ResultText" Lines="6" Variant="Variant.Outlined"/>
                <MudGrid Spacing="1" Style="width: 100%">
                    @foreach (var vote in Vm.Votes)
                    {
                        <MudItem xs="5">
                            <MudSelect Label="Vote"
                                   @bind-Value="vote.VoteCategoryId"
                                   Variant="Variant.Outlined"
                                   AnchorOrigin="Origin.BottomLeft"
                                   TransformOrigin="Origin.TopLeft">
                                @foreach (var cat in VoteCategories)
                                {
                                    <MudSelectItem Value=@((long?)cat.CatId)>@cat.Text</MudSelectItem>
                                }
                            </MudSelect>
                        </MudItem>
                        <MudItem xs="6">
                            <MudSelect Label="Driver at fault"
                                   Placeholder="No Driver Selected"
                                   @bind-Value="vote.MemberAtFault"
                                   Variant="Variant.Outlined"
                                   ToStringFunc="@(member => member != null ? $"{member.FirstName} {member.LastName}" : string.Empty)"
                                   AnchorOrigin="Origin.BottomLeft"
                                   TransformOrigin="Origin.TopLeft"
                                   Clearable="true">
                                @foreach (var member in InvolvedMembers)
                                {
                                    <MudSelectItem Value="@member" />
                                }
                            </MudSelect>
                        </MudItem>
                        <MudItem xs="1" Class="d-flex align-center">
                            <MudIconButton Icon="@Icons.Material.Filled.Remove" Color="Color.Error" OnClick="@(() => Vm.RemoveVote(vote))" />
                        </MudItem>
                    }
                    <MudItem xs="5">
                        <MudSelect Label="Vote"
                                   @bind-Value="NewValue"
                                   Variant="Variant.Outlined"
                                   AnchorOrigin="Origin.BottomLeft"
                                   TransformOrigin="Origin.TopLeft"
                                   @ref=@NewValueInput>
                            @foreach (var cat in VoteCategories)
                            {
                                <MudSelectItem Value=@((long?)cat.CatId)>@cat.Text</MudSelectItem>
                            }
                        </MudSelect>
                    </MudItem>
                </MudGrid>
            </MudStack>
        </DialogContent>
        <DialogActions>
            <MudButton Color="Color.Secondary" OnClick="Cancel">Cancel</MudButton>
            <ProgressButton Color="Color.Primary" ButtonType="ButtonType.Submit" Loading="Vm.Loading">Save</ProgressButton>
        </DialogActions>
    </MudDialog>
</EditForm>

@code {
    [Parameter]
    public IEnumerable<MemberInfoModel> InvolvedMembers { get; set; } = Array.Empty<MemberInfoModel>();
    [Parameter]
    public IEnumerable<VoteCategoryViewModel> VoteCategories { get; set; } = Array.Empty<VoteCategoryViewModel>();

    [Parameter]
    public bool IsTeamEvent { get; set; } = false;

    private long? NewValue
    {
        get => default;
        set
        {
            if(value is not null)
            {
                _ = SetNewValue(value);
            }
        }
    }

    private MudSelect<long?> NewValueInput { get; set; } = default!;

    private async Task SetNewValue(long? value)
    {
        var voteCat = VoteCategories.FirstOrDefault(x => x.CatId == value);
        if (voteCat is not null)
        {
            var vote = new VoteModel()
            {
                    VoteCategoryId = voteCat.CatId,
                VoteCategoryText = voteCat.Text,
            };
            Vm.AddVote(vote);
        }
        await NewValueInput.FocusAsync();
    }

    private void SetMemberAtFault(VoteViewModel vote, long? memberId)
    {
        var member = InvolvedCars
            .Select(x => x.Members.FirstOrDefault())
            .NotNull()
            .FirstOrDefault(x => x.MemberId == memberId);

        if (memberId is null || member is null)
        {
            vote.MemberAtFault = null;
            return;
        }
        vote.MemberAtFault = new MemberInfoModel()
        {
            MemberId = member.MemberId,
            FirstName = member.FirstName,
            LastName = member.LastName,
        };
    }
}
