@inherits MvvmComponentBase
@using System.ComponentModel
@using Blazored.Typeahead
@using iRLeagueApiCore.Common.Models.Members
@using iRLeagueApiCore.Common.Models.Reviews
@using iRLeagueManager.Web.ViewModels

<CascadingValue Value=Review.InvolvedMembers>
<div @attributes=AdditionalAttributes>
    <div class="card">
        <div class="card-header accordion-header review-header">
            <div class="row">
                <div class="col d-md-flex justify-content-start">
                    <span>@Review.SessionName:</span>
                    <span>@Bind(Review, x => x.IncidentNr)</span>
                    <span class="oi oi-flag m-1" /><span>@Bind(Review, x => x.OnLap)</span>
                    <span class="oi oi-timer m-1" /><span>@Bind(Review, x => x.Corner)</span>
                    <span class="oi oi-chevron-right m1" /><span>@Bind(Review, x => x.IncidentKind)</span>
                    <span class="oi oi-chat m1" /><span>@Bind(Review, x => x.Comments).Count</span>
                    <span class="oi oi-task" /><span>@Bind(Review, x => x.Comments).Where(x => x.Votes.Any()).Count()</span>
                </div>
                <div class="col-md-auto d-grid d-flex flex-nowrap justify-content-end">
                    @if (EditClick.HasDelegate && ReadOnly == false)
                    {
                        <button class="oi oi-pencil btn review-header-button" @onclick=EditClick />
                    }
                    @if (Collapsed)
                    {
                        <button class="oi oi-chevron-bottom btn review-header-button" @onclick=ToggleCollapsed/>
                    }
                    else
                    {
                        <button class="oi oi-chevron-top btn review-header-button" @onclick=ToggleCollapsed/>
                    }
                    @if (DeleteClick.HasDelegate && ReadOnly == false)
                    {
                        <button class="oi oi-x btn review-header-button" @onclick=DeleteClick/>
                    }
                </div>
            </div>
        </div>
        <div class="card-body">
            <div class="container @(Collapsed ? "" : " collapse")">
                <div class="row">
                    <div class="col-md-auto">
                        <h5>Involved</h5>
                    </div>
                    <div class="col">
                        @foreach(var member in @Bind(Review, x => x.InvolvedMembers))
                        {
                            <span class="badge bg-secondary h-auto me-1">@member.FirstName @member.LastName</span>
                        }
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-auto">
                        <h5>Result</h5>
                    </div>
                    <div class="col">
                        @foreach(var vote in @Bind(Review, x => x.Votes))
                        {
                            var member = @Bind(vote, x => x.MemberAtFault);
                            <span class="badge bg-danger h-auto me-1">@Bind(vote, x => x.VoteCategoryText)@(member != null ? $": {member.FirstName} {member.LastName}" : string.Empty)</span>
                        }
                    </div>
                </div>
            </div>
            <div class="container @(Collapsed ? " collapse" : "")" id="review_text_@Review.ReviewId" @ref=ReviewText>
                <div class="row">
                    <div class="col">
                        <h5>Involved Drivers</h5>
                        <div class="d-flex flex-wrap">
                            @foreach(var member in @Bind(Review, x => x.InvolvedMembers))
                            {
                                <span class="badge bg-secondary me-1 mb-1">@member.FirstName @member.LastName</span>
                            }
                        </div>
                    </div>
                    <div class="col">
                        <h5>Votes</h5>
                        <div class="d-flex flex-wrap">
                            @foreach(var countedVote in @Bind(Review, x => x.CountedVotes))
                            {
                                var member = countedVote.Vote.MemberAtFault;
                                <span class="badge bg-warning me-1 mb-1">
                                    @countedVote.Vote.VoteCategoryText@(member != null ? $": {member.FirstName} {member.LastName}" : string.Empty)
                                    <span class="badge rounded-pill bg-danger ms-1">@(countedVote.Count)x</span>
                                </span>
                            }
                        </div>
                    </div>
                </div>
                <hr/>
                <div>
                    <h5>Result</h5>
                    <div>
                        @foreach(var vote in @Bind(Review, x => x.Votes))
                        {
                            var member = vote.MemberAtFault;
                            <span class="badge bg-danger me-1 mb-1">
                                @vote.VoteCategoryText@(member != null ? $": {member.FirstName} {member.LastName}" : string.Empty)
                            </span>
                        }
                    </div>
                    <div>
                        @Bind(Review, x => x.ResultText)
                    </div>
                    @if (IsSteward && ReadOnly == false)
                    {
                        <div class="mt-2">
                            <button class="btn btn-outline-secondary py-0" @onclick=EditResultClick>Edit</button>
                        </div>
                    }
                </div>
                <hr/>
                @if (IsSteward)
                {
                    <div>
                        <h5>Comments</h5>
                        <ul class="list-group">
                            @foreach (var comment in @Bind(Review, x => x.Comments))
                            {
                                <li class="list-group-item">
                                    <ReviewComment Comment=comment OnStateHasChanged=@(async () => await InvokeAsync(StateHasChanged))/>
                                </li>
                            }
                        </ul>
                    </div>
                }
            </div>
        </div>
    </div>
</div>
</CascadingValue>

@code {
    [CascadingParameter(Name = nameof(EventMembers))]
    public IEnumerable<MemberInfoModel> EventMembers { get; set; } = default!;
    [CascadingParameter]
    public IModalService ModalService { get; set; } = default!;
    [Parameter(CaptureUnmatchedValues=true)]
    public IReadOnlyDictionary<string, object>? AdditionalAttributes { get; set; }
    [Parameter, EditorRequired]
    public ReviewViewModel Review { get; set; } = default!;
    [Parameter]
    public EventCallback<MouseEventArgs> EditClick { get; set; } 
    [Parameter]
    public EventCallback<MouseEventArgs> DeleteClick { get; set; }
    [Parameter]
    public bool IsSteward { get; set; } = false;
    [Parameter]
    public bool ReadOnly { get; set; } = false;

    private ElementReference ReviewText { get; set; }

    public bool Collapsed { get; set; } = true;

    protected override void OnParametersSet()
    {
        _ = Review ?? throw new InvalidOperationException($"Parameter {nameof(Review)} must have a value");
        _ = ModalService ?? throw BlazorParameterNullException.New(this, ModalService);
        base.OnParametersSet();
    }

    private void ToggleCollapsed()
    {
        Collapsed = !Collapsed;
    }

    private async Task Delete()
    {
        await Review.DeleteAsync();
    }

    private async Task EditResultClick()
    {
        var parameters = new ModalParameters()
            .Add(nameof(EditReviewResultModal.Model), Review.CopyModel())
            .Add(nameof(EditReviewResultModal.InvolvedMembers), Review.InvolvedMembers)
            .Add(nameof(EditReviewResultModal.OnSubmit), 
                new Func<ReviewViewModel, CancellationToken, Task<StatusResult>>(async (review, cancellationToken) => await review.SaveChangesAsync(cancellationToken)));
        var options = new ModalOptions()
        {
            DisableBackgroundCancel = true,
        };
        var result = await ModalService.Show<EditReviewResultModal>("Edit Result", parameters, options).Result;
        if (result.Confirmed && result.Data is ReviewModel reviewModel)
        {
            Review.SetModel(reviewModel);
        }
    }
}
