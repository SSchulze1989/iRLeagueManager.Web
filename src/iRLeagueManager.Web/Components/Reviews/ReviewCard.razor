@inherits MvvmComponentBase
@inject IJSRuntime JsRuntime
@using System.ComponentModel
@using Blazored.Typeahead
@using iRLeagueApiCore.Common.Models
@using iRLeagueApiCore.Common.Models.Results;
@using iRLeagueApiCore.Common.Models.Reviews
@using iRLeagueApiCore.Common.Models.Users;
@using iRLeagueManager.Web.ViewModels
@inject NavigationManager NavigationManager
@inject IDialogService DialogService

<CascadingValue Value=Review.InvolvedMembers>
<CascadingValue Value="ChipSize" Name="ChipSize">
    <MudCard Elevation="2">
        <MudExpansionPanel DisableGutters="true" Dense="true" HideIcon="true" Style="background-color: var(--mud-palette-background-grey)">
            <TitleContent>
                <MudStack Row="true" AlignItems="AlignItems.Center"
                    Style="@($@"
                        margin: -16px -24px -16px -24px; 
                        padding: 10px 1.5em; 
                        border-top: 6px; border-top-color: var(--mud-palette-{StatusColor}); 
                        border-top-style: solid;")">
                    <div class="d-flex flex-wrap align-center gap-1">
                        <div>@Review.SessionName:</div>
                        <div>@Review.IncidentNr</div>
                        <MudIcon Icon="@Icons.Material.Outlined.Flag"/>@Review.OnLap
                        <MudIcon Icon="@Icons.Material.Outlined.TurnLeft" />@Review.Corner
                        <MudIcon Icon="@Icons.Material.Outlined.ChevronRight"/><div style="flex: 1 0 60px;">@Review.IncidentKind</div>
                        <MudIcon Icon="@Icons.Material.Outlined.Comment"/>@Review.Comments.Count()
                        <MudIcon Icon="@Icons.Material.Outlined.CheckBox" />@Review.Comments.Where(x => x.Votes.Any()).Count()
                        @if (UserHasCommented(Review))
                        {
                            <MudIcon Icon="@Icons.Material.Filled.CheckCircle" Color="Color.Success" Size="Size.Small"/>
                        }
                    </div>
                    <MudSpacer />
                    <MudIcon Icon="@(IsExpanded ? Icons.Material.Filled.KeyboardArrowUp : Icons.Material.Filled.KeyboardArrowDown)" />
                    <MudMenu AnchorOrigin="Origin.BottomRight" TransformOrigin="Origin.TopRight">
                        <ActivatorContent>
                            <MudIconButton Icon="@Icons.Material.Outlined.Menu" Style="padding: 6px; margin: -6px"/>
                        </ActivatorContent>
                        <ChildContent>
                            <MudMenuItem Icon="@Icons.Material.Outlined.Link" OnClick="CopyDirectLink">Copy Link</MudMenuItem>
                            @if (OnEditClick.HasDelegate && ReadOnly == false)
                            {
                                <MudMenuItem Icon="@Icons.Material.Outlined.Edit" OnClick="OnEditClick">Edit</MudMenuItem>
                            }
                            @if (OnDeleteClick.HasDelegate && ReadOnly == false)
                            {
                                <MudMenuItem Icon="@Icons.Material.Filled.Delete" IconColor="Color.Error" OnClick="OnDeleteClick">Delete</MudMenuItem>
                            }
                        </ChildContent>
                    </MudMenu>
                </MudStack>
            </TitleContent>
            <ChildContent>
                <MudCard Class="pa-0" Outlined="false" Elevation="0">
                    <MudStack Spacing="0">
                        <MudDivider />
                        <MudGrid Spacing="0">
                            <MudItem xs="12">
                                @if (string.IsNullOrWhiteSpace(Review.FullDescription) == false)
                                {
                                    <MudCard Elevation="0">
                                        <MudCardHeader Class="py-1">
                                            <CardHeaderContent>
                                                <MudText Typo="Typo.h6">Description</MudText>
                                            </CardHeaderContent>
                                            <CardHeaderActions>
                                                <div style="margin: 8px 8px 0px 0px">
                                                    @if (IsSteward && ReadOnly == false)
                                                    {
                                                        <MudTooltip Text="Edit Review">
                                                            <MudIconButton Icon="@Icons.Material.Filled.Edit" Color="Color.Tertiary" OnClick=OnEditClick />
                                                        </MudTooltip>
                                                    }
                                                </div>
                                            </CardHeaderActions>
                                        </MudCardHeader>
                                        <MudCardContent>
                                            <MudText Typo="Typo.body2" Class="ps-2" Style="white-space: pre-wrap">
                                                @Review.FullDescription
                                            </MudText>
                                        </MudCardContent>
                                    </MudCard>
                                }
                            </MudItem>
                            <MudItem xs="12" sm="6">
                                    <MudCard Elevation="0">
                                    <MudCardHeader Class="py-1">
                                        <CardHeaderContent>
                                            <MudText Typo="Typo.h6">Involved</MudText>
                                        </CardHeaderContent>
                                        <CardHeaderActions>
                                            <MudHidden Breakpoint="Breakpoint.SmAndUp">
                                                <div style="margin: 8px 8px 0px 0px">
                                                    @if (IsSteward && ReadOnly == false && string.IsNullOrWhiteSpace(Review.FullDescription))
                                                    {
                                                        <MudTooltip Text="Edit Review">
                                                            <MudIconButton Icon="@Icons.Material.Filled.Edit" Color="Color.Tertiary" OnClick=OnEditClick />
                                                        </MudTooltip>
                                                    }
                                                </div>
                                            </MudHidden>
                                        </CardHeaderActions>
                                    </MudCardHeader>
                                    <MudCardContent>
                                        <MudChipSet ReadOnly="true">
                                            @foreach (var member in Bind(Review, x => x.InvolvedMembers))
                                            {
                                                <MudChip Icon="@Icons.Material.Outlined.Person" Label="true" Size="ChipSize" Variant="Variant.Outlined">@member.FirstName @member.LastName</MudChip>
                                            }
                                        </MudChipSet>
                                    </MudCardContent>
                                </MudCard>
                            </MudItem>
                            <MudItem xs="12" sm="6">
                                    <MudCard Elevation="0">
                                    <MudCardHeader Class="py-1">
                                        <CardHeaderContent>
                                            <MudText Typo="Typo.h6">Votes</MudText>
                                        </CardHeaderContent>
                                        <CardHeaderActions>
                                            <MudHidden Breakpoint="Breakpoint.SmAndUp" Invert="true">
                                                <div style="margin: 8px 8px 0px 0px">
                                                    @if (IsSteward && ReadOnly == false && string.IsNullOrWhiteSpace(Review.FullDescription))
                                                    {
                                                        <MudTooltip Text="Edit Review">
                                                            <MudIconButton Icon="@Icons.Material.Filled.Edit" Color="Color.Tertiary" OnClick=OnEditClick/>
                                                        </MudTooltip>
                                                    }
                                                </div>
                                            </MudHidden>
                                        </CardHeaderActions>
                                    </MudCardHeader>
                                    <MudCardContent>
                                        <MudChipSet ReadOnly="true" Class="d-flex gap-2">
                                            @foreach (var vote in @Bind(Review, x => x.CountedVotes))
                                            {
                                                var member = vote.Vote.MemberAtFault;
                                                <MudBadge Content="@vote.Count" Overlap="true" Color="Color.Primary">
                                                    <MudChip Color="Color.Warning" Size="ChipSize" Label="true">
                                                        @vote.Vote.VoteCategoryText@(member != null ? $": {member.FirstName} {member.LastName}" : string.Empty)
                                                    </MudChip>
                                                </MudBadge>
                                            }
                                        </MudChipSet>
                                    </MudCardContent>
                                </MudCard>
                            </MudItem>
                        </MudGrid>
                        <MudDivider />
                        <MudCard Elevation="0">
                            <MudCardHeader Class="py-0">
                                <CardHeaderContent>
                                    <MudText Typo="Typo.h6">Result</MudText>
                                </CardHeaderContent>
                                <CardHeaderActions>
                                    <div style="margin: 8px 8px 0px 0px">
                                        @if (IsSteward && ReadOnly == false)
                                        {
                                            <MudTooltip Text="Edit Result">
                                                <MudIconButton Icon="@Icons.Material.Filled.Edit" Color="Color.Tertiary" OnClick=EditResultClick/>
                                            </MudTooltip>
                                        }
                                    </div>
                                </CardHeaderActions>
                            </MudCardHeader>
                            <MudCardContent>
                                <MudText Typo="Typo.body2" Class="ps-2" Style="white-space: pre-wrap;">
                                    @Bind(Review, x => x.ResultText)
                                </MudText>
                                <MudChipSet ReadOnly="true">
                                    @foreach (var vote in Bind(Review, x => x.Votes))
                                    {
                                        var member = vote.MemberAtFault;
                                        <MudChip Label="true" Size="ChipSize" Color="Color.Error">
                                            @Bind(vote, x => x.VoteCategoryText)@(
                                        member != null ? $": {member.FirstName} {member.LastName}" : string.Empty
                                        )
                                        </MudChip>
                                    }
                                </MudChipSet>
                            </MudCardContent>
                        </MudCard>
                        @if (IsSteward)
                        {
                            <MudDivider/>
                            <MudStack Spacing="1">
                                @foreach (var (comment, index) in Bind(Review, x => x.Comments).Select((x,i) => (x,i)))
                                {
                                    @if (index > 0)
                                    {
                                        <MudDivider DividerType="DividerType.Middle" />
                                    }
                                    <ReviewComment Comment=comment
                                            OnStateHasChanged=@(() => CommentStateChanged(comment))
                                            OnDeleteClick=@(() => DeleteCommentClick(comment)) />
                                }
                            </MudStack>
                        }
                        @if (IsSteward && Bind(Review, x => x.Comments).Any(x => x.AuthorUserId == UserId) == false)
                        {
                            <MudButton StartIcon="@Icons.Material.Outlined.AddComment" Color="Color.Primary" Class="ma-2" OnClick="AddCommentClick">Add Comment</MudButton>
                        }
                    </MudStack>
                </MudCard>
            </ChildContent>
        </MudExpansionPanel>
        @if (IsExpanded == false)
        {
            <MudPaper Class="ma-0 pa-4" Elevation="0">
                <MudGrid>
                    <MudItem xs="2" Class="py-1 d-flex align-center">
                        <MudText Typo="Typo.h6">Involved</MudText>
                    </MudItem>
                    <MudItem xs="10" Class="py-1 d-flex align-center">
                        <MudChipSet ReadOnly="true">
                            @foreach (var member in Bind(Review, x => x.InvolvedMembers))
                            {
                                <MudChip Icon="@Icons.Material.Outlined.Person" Label="true" Size="ChipSize" Variant="Variant.Outlined">@member.FirstName @member.LastName</MudChip>
                            }
                        </MudChipSet>
                    </MudItem>
                    <MudItem xs="2" Class="py-1 d-flex align-center">
                        <MudText Typo="Typo.h6">Result</MudText>
                    </MudItem>
                    <MudItem xs="10" Class="py-1 d-flex align-center">
                        <MudChipSet ReadOnly="true">
                            @foreach (var vote in Bind(Review, x => x.Votes))
                            {
                                var member = vote.MemberAtFault;
                                <MudChip Label="true" Size="ChipSize" Color="Color.Error">
                                    @Bind(vote, x => x.VoteCategoryText)@(
                                        member != null ? $": {member.FirstName} {member.LastName}" : string.Empty
                                    )
                                </MudChip>
                            }
                        </MudChipSet>
                    </MudItem>
                </MudGrid>
            </MudPaper>
        }
    </MudCard>
</CascadingValue>
</CascadingValue>

@code {
    [CascadingParameter]
    public IEnumerable<VoteCategoryViewModel> VoteCategories { get; set; } = default!;
    [CascadingParameter]
    public Task<AuthenticationState> AuthenticationTask { get; set; } = default!;
    [CascadingParameter]
    public Breakpoint Breakpoint { get; set; }
    [CascadingParameter]
    public MudThemeProvider ThemeProvider { get; set; } = default!;
    [CascadingParameter]
    public CarListModel EventCars { get; set; } = default!;
    [Parameter(CaptureUnmatchedValues=true)]
    public IReadOnlyDictionary<string, object>? AdditionalAttributes { get; set; }
    [Parameter, EditorRequired]
    public ReviewViewModel Review { get; set; } = default!;
    [Parameter]
    public EventCallback<MouseEventArgs> OnEditClick { get; set; } 
    [Parameter]
    public EventCallback<MouseEventArgs> OnDeleteClick { get; set; }
    [Parameter]
    public bool IsSteward { get; set; } = false;
    [Parameter]
    public bool ReadOnly { get; set; } = false;
    [Parameter]
    public string UserId { get; set; } = string.Empty;
    [Parameter]
    public bool Selected { get; set; }

    private string StatusColor => GetStatusColor(Selected, Review.Status);

    private bool IsExpanded { get; set; } = false;

    private string AddCssClass { get; set; } = string.Empty;

    private Size ChipSize => Breakpoint is Breakpoint.Xs or Breakpoint.Sm ? Size.Small : Size.Medium;

    public bool Collapsed { get; set; } = true;

    private bool IsTeamEvent => EventCars.IsTeamEvent;

    private IEnumerable<EventCarInfoModel> InvolvedCars { get; set; } = Array.Empty<EventCarInfoModel>();

    protected override async Task OnParametersSetAsync()
    {
        _ = Review ?? throw new InvalidOperationException($"Parameter {nameof(Review)} must have a value");
        BlazorParameterNullException.ThrowIfNull(this, EventMembers, nameof(EventMembers));
        BlazorParameterNullException.ThrowIfNull(this, VoteCategories);
        var addClassAttribute = (AdditionalAttributes?.TryGetValue("class", out var @class) == true) ? @class : string.Empty;
        AddCssClass = addClassAttribute.ToString()!;
        Collapsed &= !Selected;
        InvolvedCars = GetInvolvedCars();
        StateHasChanged();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender == false)
        {
            return;
        }
        if (Selected)
        {
            await ScrollToElementId($"review-card-{Review.ReviewId}");
        }
    }

    private void ToggleCollapsed()
    {
        Collapsed = !Collapsed;
    }

    private async Task Delete()
    {
        await Review.DeleteAsync();
    }

    private bool UserHasCommented(ReviewViewModel review)
    {
        var hasCommented = Review.Comments.Any(x => x.AuthorUserId == UserId);
        return hasCommented;
    }

    private async Task EditResultClick()
    {
        var parameters = new DialogParameters<EditReviewResultModal>()
        {
            {x => x.Model, Review.CopyModel()},
            {x => x.InvolvedMembers, Review.InvolvedMembers},
            {x => x.VoteCategories, VoteCategories},
            {x => x.IsTeamEvent, IsTeamEvent},
            {x => x.OnSubmit, async (review, cancellation) => await review.SaveChangesAsync(cancellation)},
        };
        var result = await DialogService.Show<EditReviewResultModal>("Edit Result", parameters).Result;
        if (result.Canceled == false && result.Data is ReviewModel reviewModel)
        {
            Review.SetModel(reviewModel);
        }
    }

    private async Task AddCommentClick()
    {
        var parameters = new DialogParameters<EditCommentModal>()
        {
            {x => x.Model, new ReviewCommentModel() { Votes = new List<VoteModel>() }},
            {x => x.InvolvedMembers, Review.InvolvedMembers},
            { x => x.IsTeamEvent, IsTeamEvent },
            {x => x.OnSubmit, async (comment, cancellation) => await Review.AddComment(comment.GetModel(), cancellation)},
        };
        await DialogService.Show<EditCommentModal>("Add Comment", parameters).Result;
        await InvokeAsync(StateHasChanged);
    }

    private async Task DeleteCommentClick(ReviewCommentViewModel comment)
    {
        var parameters = new DialogParameters<MudConfirmModal>()
        {
            {x => x.Text, "Are you sure you want to delete this comment?"},
            {x => x.ButtonTypes, ButtonTypes.YesNo},
        };
        var options = new DialogOptions()
        {
            DisableBackdropClick = false,
        };
        var confirm = await DialogService.Show<MudConfirmModal>("Delete Comment", parameters, options).Result;
        if (confirm.Canceled == false)
        {
            await Review.RemoveComment(comment);
        }
    }

    private async Task CommentStateChanged(ReviewCommentViewModel comment)
    {
        Review.UpdateReviewStatus();
        await InvokeAsync(StateHasChanged);
    }

    private string GetStatusColor(bool selected, ReviewStatus status)
    {
        if (selected)
        {
            return "info";
        }
        switch(status)
        {
            case ReviewStatus.Open:
                return "warning";
            case ReviewStatus.Closed:
                return "success";
            case ReviewStatus.OpenConflicted:
                return "warning";
            case ReviewStatus.OpenEnoughVotes:
                return "primary";
        }
        return "";
    }

    private async Task CopyDirectLink()
    {
        var url = NavigationManager.GetUriWithQueryParameter("reviewId", Review.ReviewId);
        await JsRuntime.InvokeVoidAsync("clipboardCopy.copyText", url);
    }

    protected async Task ScrollToElementId(string id)
    {
        await JsRuntime.InvokeVoidAsync("scrollToElementId", id);
    }

    private IEnumerable<EventCarInfoModel> GetInvolvedCars()
    {
        if (IsTeamEvent)
        {
            return EventCars.Cars.Where(car => Review.InvolvedTeams.Any(team => team.TeamId == car.Team?.TeamId));
        }
        return EventCars.Cars.Where(car => Review.InvolvedMembers.Any(member => car.Members.Any(carMember => carMember.MemberId == member.MemberId)));
    }
}
