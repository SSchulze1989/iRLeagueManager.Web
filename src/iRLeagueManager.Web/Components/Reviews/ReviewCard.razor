@inherits MvvmComponentBase
@inject IJSRuntime JsRuntime
@using System.ComponentModel
@using Blazored.Typeahead
@using iRLeagueApiCore.Common.Models
@using iRLeagueApiCore.Common.Models.Results;
@using iRLeagueApiCore.Common.Models.Reviews
@using iRLeagueApiCore.Common.Models.Users;
@using iRLeagueManager.Web.ViewModels
@inject NavigationManager NavigationManager

<CascadingValue Value=Review.InvolvedMembers>
    <MudPaper Elevation="2">
        <MudExpansionPanel HideIcon="true" DisableGutters="true" Dense="true">
            <TitleContent>
                <MudToolBar Class="gap-1 px-0" WrapContent="true" Dense="false">
                    <span>@Review.SessionName:</span>
                    <span>@Review.IncidentNr</span>
                    <MudIcon Icon="@Icons.Material.Outlined.Flag"/>@Review.OnLap
                    <MudIcon Icon="@Icons.Material.Outlined.TurnLeft" />@Review.Corner
                    <MudIcon Icon="@Icons.Material.Outlined.ChevronRight"/>@Review.IncidentKind
                    @*<MudIcon Icon="@Icons.Material.Outlined.Comment"/>@Review.Comments.Count()
                    <MudIcon Icon="@Icons.Material.Outlined.CheckBox" />@Review.Comments.Where(x => x.Votes.Any()).Count()*@
                    @if (UserHasCommented(Review))
                    {
                        <MudIcon Icon="@Icons.Material.Filled.CheckCircle" Color="Color.Success" Size="Size.Small"/>
                    }
                    <MudSpacer />
                    <MudMenu Icon="@Icons.Material.Outlined.Menu" AnchorOrigin="Origin.BottomRight" TransformOrigin="Origin.TopRight">
                        <MudMenuItem Icon="@Icons.Material.Outlined.Link" OnClick="CopyDirectLink">Copy Link</MudMenuItem>
                        @if (OnEditClick.HasDelegate && ReadOnly == false)
                        {
                            <MudMenuItem Icon="@Icons.Material.Outlined.Edit" OnClick="OnEditClick">Edit</MudMenuItem>
                        }
                        @if (OnDeleteClick.HasDelegate && ReadOnly == false)
                        {
                            <MudMenuItem Icon="@Icons.Material.Filled.Delete" IconColor="Color.Error" OnClick="OnDeleteClick">Delete</MudMenuItem>
                        }
                    </MudMenu>
                </MudToolBar>
                <MudGrid>
                    <MudItem xs="2" Class="py-1 d-flex align-center">
                        Involved
                    </MudItem>
                    <MudItem xs="10" Class="py-1 d-flex align-center">
                        <MudChipSet ReadOnly="true">
                            @foreach(var member in Bind(Review, x => x.InvolvedMembers))
                            {
                                <MudChip Label="true" Size="Size.Small" Variant="Variant.Outlined">@member.FirstName @member.LastName</MudChip>        
                            }
                        </MudChipSet>
                    </MudItem>
                        <MudItem xs="2" Class="py-1 d-flex align-center">
                        Result
                    </MudItem>
                    <MudItem xs="10" Class="py-1 d-flex align-center">
                        <MudChipSet ReadOnly="true">
                            @foreach(var vote in Bind(Review, x => x.Votes))
                            {
                                var member = vote.MemberAtFault;
                                <MudChip Label="true" Size="Size.Small" Color="Color.Error">
                                    @Bind(vote, x => x.VoteCategoryText)@(member != null ? $": {member.FirstName} {member.LastName}" : string.Empty)
                                </MudChip>
                            }
                        </MudChipSet>
                    </MudItem>
                </MudGrid>
            </TitleContent>
            <ChildContent>
                <MudPaper Class="pa-2" Outlined="true" Style="background-color: var(--mud-palette-background)">
                    <MudStack Class="gap-1">
                        @if (string.IsNullOrWhiteSpace(Review.FullDescription) == false)
                        {
                            <MudCard Elevation="4">
                                <MudCardHeader Class="py-1">
                                    <CardHeaderContent>
                                        <MudText Typo="Typo.h6">Description</MudText>
                                    </CardHeaderContent>
                                </MudCardHeader>
                                <MudCardContent>
                                    <MudText Typo="Typo.body2" Class="ps-2" Style="white-space: pre-wrap">
                                        @Review.FullDescription
                                    </MudText>
                                </MudCardContent>
                            </MudCard>
                        }
                        <MudCard Elevation="4">
                            <MudCardHeader Class="py-1">
                                <CardHeaderContent>
                                    <MudText Typo="Typo.h6">Votes</MudText>
                                </CardHeaderContent>
                            </MudCardHeader>
                            <MudCardContent>
                                <MudChipSet ReadOnly="true" Class="d-flex gap-2">
                                    @foreach (var vote in @Bind(Review, x => x.CountedVotes))
                                    {
                                        var member = vote.Vote.MemberAtFault;
                                        <MudBadge Content="@vote.Count" Overlap="true" Color="Color.Primary">
                                            <MudChip Color="Color.Warning" Size="Size.Small" Label="true">
                                                @vote.Vote.VoteCategoryText@(member != null ? $": {member.FirstName} {member.LastName}" : string.Empty)
                                            </MudChip>
                                        </MudBadge>
                                    }
                                </MudChipSet>
                            </MudCardContent>
                        </MudCard>
                        <MudCard Elevation="4">
                            <MudCardHeader Class="py-1">
                                <CardHeaderContent>
                                    <MudText Typo="Typo.h6">Result</MudText>
                                </CardHeaderContent>
                                <CardHeaderActions>
                                    @if (IsSteward && ReadOnly == false)
                                    {
                                        <MudButton StartIcon="@Icons.Material.Filled.Edit" Color="Color.Tertiary" OnClick=EditResultClick>Edit</MudButton>
                                    }
                                </CardHeaderActions>
                            </MudCardHeader>
                            <MudCardContent>
                                <MudText Typo="Typo.body2" Class="ps-2" Style="white-space: pre-wrap;">
                                    @Bind(Review, x => x.ResultText)
                                </MudText>
                            </MudCardContent>
                        </MudCard>
                        @if (IsSteward)
                        {
                            <MudCard Elevation="4">
                                <MudCardHeader Class="py-1">
                                    <CardHeaderContent>
                                        <MudText Typo="Typo.h6">Comments</MudText>
                                    </CardHeaderContent>
                                </MudCardHeader>
                                <MudCardContent>
                                    <MudStack>
                                        @foreach (var comment in @Bind(Review, x => x.Comments))
                                        {
                                            <ReviewComment Comment=comment
                                                    OnStateHasChanged=@(() => CommentStateChanged(comment))
                                                    OnDeleteClick=@(() => DeleteCommentClick(comment)) />
                                        }
                                    </MudStack>
                                    @if (ReadOnly == false && UserHasCommented(Review) == false)
                                    {
                                        <MudButton StartIcon="@Icons.Material.Filled.AddComment" Color="Color.Tertiary" OnClick=AddCommentClick>
                                            Add Comment
                                        </MudButton>
                                    }
                                </MudCardContent>
                            </MudCard>
                        }
                    </MudStack>
                </MudPaper>
            </ChildContent>
        </MudExpansionPanel>
    </MudPaper>
</CascadingValue>

@code {
    [CascadingParameter]
    public IModalService ModalService { get; set; } = default!;
    [CascadingParameter]
    public Task<AuthenticationState> AuthenticationTask { get; set; } = default!;
    [CascadingParameter]
    public Breakpoint Breakpoint { get; set; }
    [CascadingParameter]
    public MudThemeProvider ThemeProvider { get; set; } = default!;
    [CascadingParameter]
    public CarListModel EventCars { get; set; } = default!;
    [Parameter(CaptureUnmatchedValues=true)]
    public IReadOnlyDictionary<string, object>? AdditionalAttributes { get; set; }
    [Parameter, EditorRequired]
    public ReviewViewModel Review { get; set; } = default!;
    [Parameter]
    public EventCallback<MouseEventArgs> OnEditClick { get; set; } 
    [Parameter]
    public EventCallback<MouseEventArgs> OnDeleteClick { get; set; }
    [Parameter]
    public bool IsSteward { get; set; } = false;
    [Parameter]
    public bool ReadOnly { get; set; } = false;
    [Parameter]
    public string UserId { get; set; } = string.Empty;
    [Parameter]
    public bool Selected { get; set; }

    private MudBreakpointProvider? BreakpointProvider { get; set; } = default!;

    private string AddCssClass { get; set; } = string.Empty;

    public bool Collapsed { get; set; } = true;

    private bool IsTeamEvent => EventCars.IsTeamEvent;

    private IEnumerable<EventCarInfoModel> InvolvedCars { get; set; } = Array.Empty<EventCarInfoModel>();

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        BlazorParameterNullException.ThrowIfNull(this, Review);
        BlazorParameterNullException.ThrowIfNull(this, ModalService);
        BlazorParameterNullException.ThrowIfNull(this, EventCars);
        var addClassAttribute = (AdditionalAttributes?.TryGetValue("class", out var @class) == true) ? @class : string.Empty;
        AddCssClass = addClassAttribute.ToString()!;
        Collapsed &= !Selected;
        InvolvedCars = GetInvolvedCars();
        StateHasChanged();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender == false)
        {
            return;
        }
        if (Selected)
        {
            await ScrollToElementId($"review-card-{Review.ReviewId}");
        }
    }

    private void ToggleCollapsed()
    {
        Collapsed = !Collapsed;
    }

    private async Task Delete()
    {
        await Review.DeleteAsync();
    }

    private bool UserHasCommented(ReviewViewModel review)
    {
        var hasCommented = Review.Comments.Any(x => x.AuthorUserId == UserId);
        return hasCommented;
    }

    private async Task EditResultClick()
    {
        var parameters = new ModalParameters<EditReviewResultModal>()
        {
            { x => x.Model, Review.CopyModel() },
            { x => x.InvolvedCars, InvolvedCars },
            { x => x.IsTeamEvent, IsTeamEvent },
            { x => x.OnSubmit, async (review, cancellation) => await review.SaveChangesAsync(cancellation) },
        };
        var options = new ModalOptions()
        {
            DisableBackgroundCancel = true,
        };
        var result = await ModalService.Show<EditReviewResultModal>("Edit Result", parameters, options).Result;
        if (result.Confirmed && result.Data is ReviewModel reviewModel)
        {
            Review.SetModel(reviewModel);
        }
    }

    private async Task AddCommentClick()
    {
        var parameters = new ModalParameters<EditCommentModal>()
        {
            { x => x.Model, new ReviewCommentModel() { Votes = new List<VoteModel>() } },
            { x => x.InvolvedCars, InvolvedCars },
            { x => x.IsTeamEvent, IsTeamEvent },
            { x => x.OnSubmit, async (comment, cancellation) => await Review.AddComment(comment.GetModel(), cancellation)},
        };
        var options = new ModalOptions()
        {
            DisableBackgroundCancel = false
        };
        await ModalService.Show<EditCommentModal>("Add Comment", parameters, options).Result;
        await InvokeAsync(StateHasChanged);
    }

    private async Task DeleteCommentClick(ReviewCommentViewModel comment)
    {
        var parameters = new ModalParameters()
            .Add(nameof(ConfirmModal.Text), "Are you sure you want to delete this comment?")
            .Add(nameof(ConfirmModal.ButtonTypes), ButtonTypes.YesNo);
        var confirm = await ModalService.Show<ConfirmModal>("Delete Comment", parameters).Result;
        if (confirm.Confirmed)
        {
            await Review.RemoveComment(comment);
        }
    }

    private async Task CommentStateChanged(ReviewCommentViewModel comment)
    {
        Review.UpdateReviewStatus();
        await InvokeAsync(StateHasChanged);
    }

    private string GetBorderClass(bool selected, ReviewStatus status)
    {
        if (selected)
        {
            return "border-info";
        }
        switch(status)
        {
            case ReviewStatus.Open:
                return "border-warning";
            case ReviewStatus.Closed:
                return "border-success";
            case ReviewStatus.OpenConflicted:
                return "border-warning";
            case ReviewStatus.OpenEnoughVotes:
                return "border-primary";
        }
        return "";
    }

    private async Task CopyDirectLink()
    {
        var url = NavigationManager.GetUriWithQueryParameter("reviewId", Review.ReviewId);
        await JsRuntime.InvokeVoidAsync("clipboardCopy.copyText", url);
    }

    protected async Task ScrollToElementId(string id)
    {
        await JsRuntime.InvokeVoidAsync("scrollToElementId", id);
    }

    private IEnumerable<EventCarInfoModel> GetInvolvedCars()
    {
        if (IsTeamEvent)
        {
            return EventCars.Cars.Where(car => Review.InvolvedTeams.Any(team => team.TeamId == car.Team?.TeamId));
        }
        return EventCars.Cars.Where(car => Review.InvolvedMembers.Any(member => car.Members.Any(carMember => carMember.MemberId == member.MemberId)));
    }
}
