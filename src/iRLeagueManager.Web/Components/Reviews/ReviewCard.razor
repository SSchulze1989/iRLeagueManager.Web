@inherits MvvmComponentBase
@using System.ComponentModel
@using iRLeagueManager.Web.ViewModels

<div @attributes=AdditionalAttributes>
    <div class="card">
        <div class="btn card-header accordion-header" @onclick=ToggleCollapsed>
            <div class="row">
                <div class="col d-md-flex justify-content-start review-header">
                    <span>@Review.SessionName:</span>
                    <span>@Bind(Review, x => x.IncidentNr)</span>
                    <span class="oi oi-flag m-1" /><span>@Bind(Review, x => x.OnLap)</span>
                    <span class="oi oi-timer m-1" /><span>@Bind(Review, x => x.Corner)</span>
                    <span class="oi oi-chevron-right m1" /><span>@Bind(Review, x => x.IncidentKind)</span>
                    <span class="oi oi-chat m1" /><span>@Bind(Review, x => x.Comments).Count</span>
                    <span class="oi oi-task" /><span>@Bind(Review, x => x.Comments).Where(x => x.Votes.Any()).Count()</span>
                </div>
                <div class="col d-grid d-md-flex justify-content-md-end">
                    @if (Collapsed)
                    {
                        <span class="oi oi-chevron-bottom"/>
                    }
                    else
                    {
                        <span class="oi oi-chevron-top"/>
                    }
                </div>
            </div>
        </div>
        <div class="card-body">
            <div class="container @(Collapsed ? "" : " collapse")">
                <div class="row">
                    <div class="col-1">
                        <h5>Involved</h5>
                    </div>
                    <div class="col-6">
                        @string.Join(", ", Bind(Review, x => x.InvolvedMembers).Select(x => $"{x.FirstName} {x.LastName}"))
                    </div>
                </div>
                <div class="row">
                    <div class="col-1">
                        <h5>Result</h5>
                    </div>
                    <div class="col-6">
                        @foreach(var vote in @Bind(Review, x => x.Votes))
                        {
                            var member = @Bind(vote, x => x.MemberAtFault);
                            <span class="badge bg-danger">@Bind(vote, x => x.VoteCategoryId): @member.FirstName @member.LastName</span>
                        }
                    </div>
                </div>
            </div>
            <div class="container @(Collapsed ? " collapse" : "")" id="review_text_@Review.ReviewId" @ref=ReviewText>
                <div class="row">
                    <div class="col">
                        <h5>Involved Drivers</h5>
                        <ul>
                            @foreach(var member in @Bind(Review, x => x.InvolvedMembers))
                            {
                                <li><span class="badge bg-secondary">@member.FirstName @member.LastName</span></li>
                            }
                        </ul>
                    </div>
                    <div class="col">
                        <h5>Votes</h5>
                        <ul>
                            @foreach(var vote in @Bind(Review, x => x.Comments).SelectMany(x => x.Votes))
                            {
                                <li><span class="badge bg-warning">@vote.VoteCategoryId: @vote.MemberAtFault.FirstName @vote.MemberAtFault.LastName</span></li>
                            }
                        </ul>
                    </div>
                </div>
                <hr/>
                <div>
                    <h5>Result</h5>
                    <div>
                        @foreach(var vote in @Bind(Review, x => x.Votes))
                        {
                            <span class="badge bg-danger">@vote.VoteCategoryId: @vote.MemberAtFault.FirstName @vote.MemberAtFault.LastName</span>
                        }
                    </div>
                    <div>
                        @Bind(Review, x => x.ResultText)
                    </div>
                </div>
                <hr/>
                <div>
                    <h5>Comments</h5>
                    <ul class="list-group">
                        @foreach(var comment in @Bind(Review, x => x.Comments))
                        {
                            <li class="list-group-item">
                                <ReviewComment Comment=comment />
                            </li>
                        }
                    </ul>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter(CaptureUnmatchedValues=true)]
    public IReadOnlyDictionary<string, object>? AdditionalAttributes { get; set; }
    [Parameter, EditorRequired]
    public ReviewViewModel Review { get; set; } = default!;

    private ElementReference ReviewText { get; set; }

    public bool Collapsed { get; set; } = true;

    protected override void OnParametersSet()
    {
        _ = Review ?? throw new InvalidOperationException($"Parameter {nameof(Review)} must have a value");
        base.OnParametersSet();
    }

    private void ToggleCollapsed()
    {
        Collapsed = !Collapsed;
    }
}
