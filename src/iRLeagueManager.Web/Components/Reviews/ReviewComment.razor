@inherits MvvmComponentBase
@using iRLeagueApiCore.Common.Models
@using iRLeagueApiCore.Common.Models.Reviews
@using iRLeagueApiCore.Common.Models.Users;
@using iRLeagueManager.Web.ViewModels

<div class="d-flex justify-content-between align-items-start">
    <div>
        <h6 class="fw-bold"><DisplayUser User=@GetUser(Comment.AuthorUserId) FallbackName=@Comment.AuthorName /></h6>
        <div class="m-1 preserve-format">
            @Bind(Comment, x=> x.Text)
        </div>
        <div>
            @foreach(var vote in @Bind(Comment, x => x.Votes))
            {
                var member = @Bind(vote, x => x.MemberAtFault);
                <span class="badge bg-warning">@Bind(vote, x => x.VoteCategoryText)@(member != null ? $": {member.FirstName} {member.LastName}" : string.Empty)</span>
            }
        </div>
    </div>
    @if (UserCanEdit)
    {
        <button class="btn btn-outline-danger" @onclick=@OnDeleteClick>
            <span class="oi oi-trash" />
        </button>
    }
</div>
@if (UserCanEdit)
{
    <div class="mt-2">
        <button class="btn btn-outline-secondary py-0" @onclick=EditClick>Edit</button>
    </div>
}

@code {
    [CascadingParameter]
    public IModalService ModalService { get; set; } = default!;
    [CascadingParameter]
    public IEnumerable<MemberInfoModel> InvolvedMembers { get; set; } = Array.Empty<MemberInfoModel>();
    [CascadingParameter]
    public IEnumerable<UserModel> LeagueUsers { get; set; } = Array.Empty<UserModel>();
    [Parameter, EditorRequired]
    public ReviewCommentViewModel Comment { get; set; } = default!;
    [CascadingParameter]
    private Task<AuthenticationState> AuthenticationStateTask { get; set; } = default!;
    [Parameter]
    public EventCallback OnStateHasChanged { get; set; }
    [Parameter]
    public EventCallback OnDeleteClick { get; set; }

    private bool UserCanEdit;

    //[Parameter]
    //public EventCallback<MouseEventArgs> EditClick { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        _ = Comment ?? throw BlazorParameterNullException.New(this, Comment);
        _ = AuthenticationStateTask ?? throw BlazorParameterNullException.New(this, AuthenticationStateTask);
        UserCanEdit = await GetUserCanEdit();
        base.OnParametersSet();
    }

    private async Task<bool> GetUserCanEdit()
    {
        var user = (await AuthenticationStateTask).User;

        if (user.Identity?.IsAuthenticated == false)
        {
            return false;
        }
        if (user.IsInRole("Admin"))
        {
            return true;
        }
        if (user.GetUserId() == Comment.AuthorUserId)
        {
            return true;
        }

        return false;
    }

    private async Task EditClick()
    {
        var parameters = new ModalParameters()
            .Add(nameof(EditCommentModal.Model), Comment.CopyModel())
            .Add(nameof(EditCommentModal.InvolvedMembers), InvolvedMembers)
            .Add(nameof(EditCommentModal.OnSubmit), 
                new Func<ReviewCommentViewModel, CancellationToken, Task<StatusResult>>((comment, cancellationToken) => 
                    comment.SaveChangesAsync(cancellationToken)));
        var result = await ModalService.Show<EditCommentModal>("Edit Comment", parameters).Result;
        if (result.Confirmed && result.Data is ReviewCommentModel comment)
        {
            Comment.SetModel(comment);
        }
        await NotifyStateHasChanged();
    }

    private async Task NotifyStateHasChanged()
    {
        if (OnStateHasChanged.HasDelegate)
        {
            await OnStateHasChanged.InvokeAsync();
        }
    }

    private UserModel? GetUser(string userId)
    {
        return LeagueUsers.FirstOrDefault(x => x.UserId == userId);
    }
}
