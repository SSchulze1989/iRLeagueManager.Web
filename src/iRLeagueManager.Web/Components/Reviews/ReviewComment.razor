@inherits MvvmComponentBase
@using iRLeagueApiCore.Common.Models
@using iRLeagueApiCore.Common.Models.Results;
@using iRLeagueApiCore.Common.Models.Reviews
@using iRLeagueApiCore.Common.Models.Users;
@using iRLeagueManager.Web.ViewModels
@inject IDialogService DialogService

<MudStack Spacing="2" Class="px-4 py-2">
    <div class="d-flex align-center ps-2 gap-2">
        <MudAvatar Color="Color.Secondary" Variant="Variant.Outlined">@GetAuthorInitials(GetUser(Comment.AuthorUserId), Comment.AuthorName)</MudAvatar>
        <MudStack Spacing="0">
            <MudText Typo="Typo.subtitle1"><DisplayUser User="Author" ShowUserName="false" FallbackName="@Comment.AuthorName"/></MudText>
            @if (string.IsNullOrEmpty(Author?.Firstname) == false || string.IsNullOrEmpty(Author?.Lastname) == false)
            {
                <MudText Typo="Typo.caption" GutterBottom="false">@Comment.AuthorName</MudText>
            }
        </MudStack>
        <MudSpacer/>
        @if (UserCanEdit)
        {
            <MudIconButton Icon="@Icons.Material.Filled.Edit" Color="Color.Tertiary" OnClick="EditClick"/>
            <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" OnClick="OnDeleteClick"/>
        }
    </div>
    <MudText Style="white-space: pre-wrap" Typo="Typo.body2" Class="ps-2">
        @Bind(Comment, x=> x.Text)
    </MudText>
    <MudChipSet ReadOnly="true">
        @foreach (var vote in @Bind(Comment, x => x.Votes))
        {
            var member = @Bind(vote, x => x.MemberAtFault);
            <MudChip Label="true" Color="Color.Warning" Size="ChipSize">
                @Bind(vote, x => x.VoteCategoryText)@(member != null ? $": {member.FirstName} {member.LastName}" : string.Empty)
            </MudChip>
        }
    </MudChipSet>
</MudStack>

@code {
    [CascadingParameter]
    public IEnumerable<MemberInfoModel> InvolvedMembers { get; set; } = Array.Empty<MemberInfoModel>();
    [CascadingParameter]
    public IEnumerable<UserModel> LeagueUsers { get; set; } = Array.Empty<UserModel>();
    [CascadingParameter]
    public IEnumerable<VoteCategoryViewModel> VoteCategories { get; set; } = Array.Empty<VoteCategoryViewModel>();
    [Parameter, EditorRequired]
    public ReviewCommentViewModel Comment { get; set; } = default!;
    [Parameter, EditorRequired]
    public bool IsTeamEvent { get; set; }
    [CascadingParameter]
    private Task<AuthenticationState> AuthenticationStateTask { get; set; } = default!;
    [CascadingParameter(Name = "ChipSize")]
    public Size ChipSize { get; set; }
    [Parameter]
    public EventCallback OnStateHasChanged { get; set; }
    [Parameter]
    public EventCallback OnDeleteClick { get; set; }

    private bool UserCanEdit;

    private UserModel? Author { get; set; }

    //[Parameter]
    //public EventCallback<MouseEventArgs> EditClick { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        _ = Comment ?? throw BlazorParameterNullException.New(this, Comment);
        _ = AuthenticationStateTask ?? throw BlazorParameterNullException.New(this, AuthenticationStateTask);
        BlazorParameterNullException.ThrowIfNull(this, LeagueUsers);
        BlazorParameterNullException.ThrowIfNull(this, Comment);
        Author = GetUser(Comment.AuthorUserId);
        UserCanEdit = await GetUserCanEdit();
        base.OnParametersSet();
    }

    private async Task<bool> GetUserCanEdit()
    {
        var user = (await AuthenticationStateTask).User;

        if (user.Identity?.IsAuthenticated == false)
        {
            return false;
        }
        if (user.IsInRole("Admin"))
        {
            return true;
        }
        if (user.GetUserId() == Comment.AuthorUserId)
        {
            return true;
        }

        return false;
    }

    private async Task EditClick()
    {
        var parameters = new DialogParameters<EditCommentModal>()
        {
            {x => x.Model, Comment.CopyModel()},
            {x => x.InvolvedMembers, InvolvedMembers},
            {x => x.VoteCategories, VoteCategories},
            { x => x.IsTeamEvent, IsTeamEvent },
            {x => x.OnSubmit, async (comment, cancellation) => await comment.SaveChangesAsync(cancellation)},
        };
        var result = await ModalService.Show<EditCommentModal>("Edit Comment", parameters).Result;
        if (result.Confirmed && result.Data is ReviewCommentModel comment)
        {
            Comment.SetModel(comment);
        }
        await NotifyStateHasChanged();
    }

    private async Task NotifyStateHasChanged()
    {
        if (OnStateHasChanged.HasDelegate)
        {
            await OnStateHasChanged.InvokeAsync();
        }
    }

    private UserModel? GetUser(string userId)
    {
        return LeagueUsers.FirstOrDefault(x => x.UserId == userId);
    }

    private string GetAuthorInitials(UserModel? user, string fallback)
    {
        if (user is null)
        {
            var parts = fallback.Split(' ');
            return string.Join("", parts.Take(2));
        }

        if (string.IsNullOrEmpty(user.Firstname) && string.IsNullOrEmpty(user.Lastname))
        {
            return user.UserName.Substring(0, 1);
        }

        return user.Firstname.Substring(0, 1) + user.Lastname.Substring(0, 1);
    }
}
