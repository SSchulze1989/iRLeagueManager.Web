@using iRLeagueApiCore.Common.Enums
@using iRLeagueApiCore.Common.Models
@using iRLeagueManager.Web.Components.Dialogs
@inherits UtilityComponentBase
@inject IDialogService DialogService

<EditForm Model=ChampSeason>
    <StatusResultValidator @ref=ResultValidator />
    <MudStack Spacing="1">
        <SettingsTopSection Header="General">
            <SettingsItem Label="Name"
                          Text="@ChampSeason.ChampionshipName"
                          HelperText="@(string.IsNullOrEmpty(ChampSeason.ChampionshipDisplayName) ? "" : ChampSeason.ChampionshipDisplayName)"
                          OnClick="ChampionshipNameClick" />
            <SettingsSelectPrompt @bind-Value="ChampSeason.ResultKind"
                                  Label="Type"
                                  HelperText="Championship type: Member or Team"
                                  Items="@(new[] { ResultKind.Member, ResultKind.Team })" />
        </SettingsTopSection>

        @if (multiplePointconfigs)
        {
            <SettingsTopSection Header="Point Settings">
                <SettingsSection Text="Point Settings" Expanded="multiplePointconfigs" InitiallyExpanded="true">
                    @foreach (var config in ChampSeason.ResultConfigs)
                    {
                        <SettingsItem Text="@config.Name"
                                      HelperText="@(string.IsNullOrEmpty(config.DisplayName) ? "" : config.DisplayName)"
                                      EndIcon="@Icons.Material.Filled.ArrowForward"
                                      Href="@($"/{Shared.LeagueName}/Settings/Results/Championships/{ChampSeason.ChampionshipId}/ResultConfigs/{config.ResultConfigId}")" />
                    }
                    <MudListItem Icon="@Icons.Material.Filled.Add" IconColor="Color.Tertiary">
                        <MudText Color="Color.Tertiary">
                            Add Result Config
                        </MudText>
                    </MudListItem>
                </SettingsSection>
            </SettingsTopSection>
        }
        else if (ChampSeason.ResultConfigViewModels.Count > 0)
        {
            <ResultConfigSettings Config="ChampSeason.ResultConfigViewModels.First()" ShowAdvancedSettings="false" />
        }

        <SettingsTopSection Header="Advanced">
            <SettingsSection Text="Filter Drivers"
                             HelperText="Limit drivers, teams or classes that will be scored in this championship">
                <FilterTable @bind-Filters="ChampSeason.FilterConditions" />
            </SettingsSection>
            @if (!multiplePointconfigs && ChampSeason.ResultConfigViewModels.Count > 0)
            {
                <SettingsSection Text="Conditions for Points"
                                 HelperText="Add conditions for who can score points (e.g: Driver must at least drive xx% race distance...)">
                    <FilterTable @bind-Filters="ChampSeason.ResultConfigViewModels.First().FiltersForPoints" />
                </SettingsSection>
            }
            <SettingsSwitch @bind-Checked="multiplePointconfigs" Text="Multiple point configs" HelperText="Allow different point settings for each event" />
        </SettingsTopSection>
    </MudStack>
    <FormValidationMessage TValue=string Message=@ResultValidator?.ErrorMessage />
</EditForm>

@code {
    [CascadingParameter] public IEnumerable<MemberModel> LeagueMembers { get; set; } = default!;
    [CascadingParameter] public IEnumerable<TeamModel> Teams { get; set; } = default!;
    [Parameter, EditorRequired] public ChampSeasonViewModel ChampSeason { get; set; } = default!;

    private StatusResultValidator? ResultValidator { get; set; }
    private SettingsStack SettingsStack { get; set; } = default!;

    private bool showAdvanced = false;
    private bool filtersExpanded = false;
    private bool pointsConditionsExpanded = false;
    private bool multiplePointconfigs = false;

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        BlazorParameterNullException.ThrowIfNull(this, LeagueMembers, cascading: true);
        BlazorParameterNullException.ThrowIfNull(this, Teams, cascading: true);
        BlazorParameterNullException.ThrowIfNull(this, ChampSeason);
        multiplePointconfigs = ChampSeason.ResultConfigs.Count > 1;
    }

    private async Task ChampionshipNameClick()
    {
        var parameters = new DialogParameters<DisplayNameDialog>()
        {
            { x => x.Value, (ChampSeason.ChampionshipName, ChampSeason.ChampionshipDisplayName) },
        };
        var result = await DialogService.Show<DisplayNameDialog>("", parameters).Result;
        if (!result.Canceled)
        {
            (ChampSeason.ChampionshipName, ChampSeason.ChampionshipDisplayName) = ((string, string))result.Data;
        }
    }
}
