@namespace iRLeagueManager.Web.Components
@using iRLeagueApiCore.Common.Models
@using iRLeagueApiCore.Common.Enums
@using MudBlazor.Utilities
@inherits PromptDialog<PointRuleModel>
@inject PointRuleViewModel PointRule
@inject IJSRuntime jsRuntime

<MudDialog>
    <DialogContent>
        <MudForm Model="PointRule" @ref="Form">
            <MudStack Spacing="2">
                <MudSelect @bind-Value="@PointRule.RuleType" Variant="Variant.Outlined">
                    <MudSelectItem Value=@PointRuleType.MaxPointsDropOff>Max points + Drop-off</MudSelectItem>
                    <MudSelectItem Value=@PointRuleType.PointList>Point List</MudSelectItem>
                    <MudSelectItem Value=@PointRuleType.Formula>Formula</MudSelectItem>
                </MudSelect>

                @switch (PointRule.RuleType)
                {
                    case PointRuleType.MaxPointsDropOff:
                        <MudGrid Spacing="2">
                            <MudItem xs="6">
                                <MudTextField @bind-Value="PointRule.MaxPoints" Label="Max Points" HelperText="Points awarded for 1st place" Variant="Variant.Outlined" />
                            </MudItem>
                            <MudItem xs="6">
                                <MudTextField @bind-Value="PointRule.PointDropOff" Label="Drop off" HelperText="Points difference between positions" Variant="Variant.Outlined" />
                            </MudItem>
                        </MudGrid>
                        break;
                    case PointRuleType.PointList:
                        <MudField Label="Points per position" Variant="Variant.Outlined">
                            @{
                                var pointsPerPlace = PointRule.PointsPerPlace;
                            }
                            <MudSimpleTable Elevation="0">
                                <thead>
                                    <tr>
                                        <th>Pos. </th>
                                        @foreach (var position in pointsPerPlace.Select((x, i) => i + 1))
                                        {
                                            <th>@position.</th>
                                        }
                                        <th>@(PointRule.PointsPerPlace.Count() + 1).</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    <tr>
                                        <th>Pts.</th>
                                        @foreach ((var points, var index) in pointsPerPlace.Select((x, i) => ((int?)x, i)))
                                        {
                                            <td class="px-1">
                                                <MudInput Value="points"
                                                          ValueChanged="@((int? value) => SetValue(index, value))"
                                                          Variant="Variant.Text"
                                                          HideSpinButtons="true"
                                                          DisableUnderLine="false"
                                                          FullWidth="true" />
                                            </td>
                                        }
                                        <td class="px-1">
                                            <MudInput @bind-Value="NewValue"
                                                      @ref="NewNumberInput"
                                                      Variant="Variant.Text"
                                                      DisableUnderLine="false"
                                                      FullWidth="true" />
                                        </td>
                                        <td>
                                            <span @ref=ScrollDummy />
                                        </td>
                                    </tr>
                                </tbody>
                            </MudSimpleTable>
                        </MudField>
                        break;
                    case PointRuleType.Formula:
                        <MudElement HtmlTag="div" Class="relative" Style="width: 100%">
                            <MudTextField Label="Formula"
                                          @bind-Value="PointRule.Formula"
                                          Style="font-family: Consolas, 'Lucida Console'"
                                          Variant="Variant.Outlined"
                                          AutoGrow="true"
                                          Validation="@((string formula) => ValidateFormula(formula))" 
                                          Adornment="Adornment.End"
                                          AdornmentIcon="@Icons.Material.Outlined.Help"
                                          AdornmentColor="Color.Transparent"/>
                            <MudElement HtmlTag="div" Class="absolute pt-2" Style="top: 0; right: 0;">
                                <MudTooltip ShowOnHover="false" ShowOnClick="false" ShowOnFocus="true">
                                    <ChildContent>
                                        <MudIconButton Icon="@Icons.Material.Outlined.Help" />
                                    </ChildContent>
                                    <TooltipContent>
                                        @foreach (var parameter in FormulaParameters.Parameters)
                                        {
                                            <MudText>
                                                @string.Join(", ", parameter.Aliases.Select(x => "[" + x + "]")) => @parameter.Description
                                            </MudText>
                                        }
                                    </TooltipContent>
                                </MudTooltip>
                            </MudElement>
                        </MudElement>
                        break;
                }
            </MudStack>
        </MudForm>
    </DialogContent>
    <DialogActions>
        <PromptDialogButtons OkClick="Submit" CancelClick="Cancel" />
    </DialogActions>
</MudDialog>

@code {
    MudForm Form { get; set; } = default!;
    MudIconButton? FormulaHelpButton { get; set; }
    MudInput<int?> NewNumberInput { get; set; } = default!;
    ElementReference ScrollDummy { get; set; }

    private int? newValue = default(int?);
    private int? NewValue
    {
        get => newValue;
        set
        {
            if (newValue != value)
            {
                _ = NewPointValue(value);
            }
        }
    }

    private bool formulaHelpOpen = false;

    protected override async void OnAfterRender(bool firstRender)
    {
        if (firstRender == false)
        {
            return;
        }
        if (PointRule.GetModel() != Value)
        {
            PointRule.SetModel(Value ?? new());
        }
        await InvokeAsync(StateHasChanged);
    }

    private async Task NewPointValue(int? value)
    {
        if (value > 0)
        {
            PointRule.PointsPerPlace.Add(value.Value);
        }
        await ScrollDummy.FocusAsync();
        await NewNumberInput.FocusAsync();
        await InvokeAsync(StateHasChanged);
    }

    private void SetValue(int index, int? value)
    {
        if (value is null)
        {
            PointRule.PointsPerPlace.RemoveAt(index);
            return;
        }
        PointRule.PointsPerPlace[index] = value.Value;
    }

    protected override async Task Submit()
    {
        await Form.Validate();
        if (Form.IsValid == false)
        {
            return;
        }
        if (PointRule.RuleType == PointRuleType.MaxPointsDropOff && PointRule.PointDropOff > 0)
        {
            var points = PointRule.MaxPoints;
            PointRule.PointsPerPlace.Clear();
            while (points > 0)
            {
                PointRule.PointsPerPlace.Add(points);
                points -= PointRule.PointDropOff;
            }
        }
        else
        {
            PointRule.MaxPoints = 0;
            PointRule.PointDropOff = 0;
        }
        if (PointRule.RuleType == PointRuleType.Formula)
        {
            PointRule.PointsPerPlace.Clear();
        }
        await base.Submit();
    }

    private string ValidateFormula(string formula)
    {
        var rnd = new Random();
        var expression = new NCalc.Expression(formula);
        foreach (var (key, parameter) in FormulaParameters.ParameterDict)
        {
            expression.Parameters[key] = rnd.NextDouble();
        }
        try
        {
            expression.Evaluate();
        }
        catch (Exception e) when (e is ArgumentException or NCalc.EvaluationException)
        {
            return e.Message;
        }
        return string.Empty;
    }
}
