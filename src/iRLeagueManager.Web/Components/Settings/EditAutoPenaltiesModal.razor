@using iRLeagueApiCore.Common.Enums;
@using iRLeagueApiCore.Common.Models;
@inherits EditModalBase<AutoPenaltiesCollectionViewModel, IEnumerable<AutoPenaltyConfiguration>>

@foreach(var autoPenalty in Vm)
{
    <EditForm Model="autoPenalty">
        <div class="input-group-list mb-3">
            <InputGroup Label="Description">
                <InputText class="form-control" @bind-Value="autoPenalty.Description"/>
                <button class="btn btn-outline-danger" @onclick=@(() => Vm.Remove(autoPenalty)) tabindex="-1">
                    <span class="oi oi-trash" />
                </button>
            </InputGroup>
            <InputGroup Label="Conditions">
                <label class="form-control text-muted" @onclick=@(() => OnConditionsClick(autoPenalty))>
                    @foreach(var condition in autoPenalty.Conditions)
                    {
                        <PreviewResultFilter Filter="@MapToResultFilterModel(condition)" LeagueMembers="LeagueMembers"/>
                    }
                </label>
            </InputGroup>
            <InputGroup Label="Type">
                <InputSelect class="form-select" @bind-Value="autoPenalty.Type">
                    @foreach (var penaltyType in Enum.GetValues<PenaltyType>())
                    {
                        <option value="@penaltyType">@penaltyType</option>
                    }
                </InputSelect>
            </InputGroup>
            @switch (autoPenalty.Type)
            {
                case PenaltyType.Points:
                    <InputGroup Label="Points">
                        <InputNumber class="form-control" @bind-Value="autoPenalty.Points" />
                    </InputGroup>
                    break;
                case PenaltyType.Position:
                    <InputGroup Label="Positions">
                        <InputNumber class="form-control" @bind-Value="autoPenalty.Positions" />
                    </InputGroup>
                    break;
                case PenaltyType.Time:
                    <InputGroup Label="Time">
                        <InputNumber class="form-control" @bind-Value="autoPenalty.TimeSeconds" />
                        <label class="input-group-text">Seconds</label>
                    </InputGroup>
                    break;
            }
        </div>
        <ValidationSummary />
        <FormValidationMessage TValue=string Message=@ResultValidator?.ErrorMessage />
    </EditForm>
}

<button class="btn btn-outline-secondary" @onclick=Vm.Add>
    Add Penalty
</button>
<CancelSubmitButtons SubmitText="Ok" CancelText="Cancel" OnSubmit=Submit OnCancel=Cancel ModelState="Vm" />

@code {
    [Parameter, EditorRequired]
    public IEnumerable<MemberModel> LeagueMembers { get; set; } = default!;

    private string Text { get; set; } = string.Empty;

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        BlazorParameterNullException.ThrowIfNull(this, ModalService);
        BlazorParameterNullException.ThrowIfNull(this, LeagueMembers);
    }

    private static ResultFilterModel MapToResultFilterModel(FilterConditionModel condition) => new ResultFilterModel()
    {
        Condition = condition,
    };

    private async Task OnConditionsClick(AutoPenaltyConfigViewModel autoPenalty)
    {
        var conditions = autoPenalty.CopyModel().Conditions
            .Select(MapToResultFilterModel);
        var parameters = new ModalParameters<EditResultFilterModal>()
            .Add(x => x.Model, conditions)
            .Add(x => x.LeagueMembers, LeagueMembers)
            .Add(x => x.AllowForEach, true)
            .Add(x => x.Actions, new[] { MatchedValueAction.Keep });
        var result = await ModalService.Show<EditResultFilterModal>("Penalty Conditions", parameters).Result;
        if (result.Confirmed && result.Data is IEnumerable<ResultFilterModel> model)
        {
            autoPenalty.Conditions = model
                .Select(x => x.Condition)
                .ToList();
        }
    }
}
