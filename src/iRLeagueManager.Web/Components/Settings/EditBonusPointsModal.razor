@foreach(var bonus in BonusPointConfigs)
{
    <EditForm Model="bonus">
        <div class="input-group-list mb-3">
            <InputGroup Label="Type">
                <InputSelect class="form-select" @bind-Value=bonus.OptionId>
                    @foreach(var option in BonusPointOption.Available)
                    {
                        <option value=@option.Type>@option.Description</option>
                    }
                </InputSelect>
                <button class="btn btn-outline-danger" @onclick=@(() => Remove(bonus))>
                    <span class="oi oi-trash"/>
                </button>
            </InputGroup>
            @if (bonus.Option?.HasPosition == true)
            {
                <InputGroup Label="Position">
                    <InputNumber class="form-control" @bind-Value=bonus.Position />
                </InputGroup>
            }
            <InputGroup Label="Points">
                <InputNumber class="form-control" @bind-Value=bonus.Points />
            </InputGroup>
        </div>
    </EditForm>
}
<button class="btn btn-outline-secondary" @onclick=Add>
    Add
</button>
<CancelSubmitButtons SubmitText="Ok" CancelText="Cancel" OnSubmit=Submit OnCancel=Cancel />

@code {
    [CascadingParameter]
    public BlazoredModalInstance ModalInstance { get; set; } = default!;

    [Parameter]
    public IEnumerable<BonusPointConfig> BonusPoints { get; set; } = default!;

    private List<BonusPointConfig> BonusPointConfigs { get; set; } = default!;

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        BlazorParameterNullException.ThrowIfNull(this, ModalInstance);
        BlazorParameterNullException.ThrowIfNull(this, BonusPoints);
        BonusPointConfigs ??= BonusPoints.ToList();
    }

    private void Add()
    {
        BonusPointConfigs.Add(new());
    }

    private void Remove(BonusPointConfig bonus)
    {
        BonusPointConfigs.Remove(bonus);
    }

    private async Task Submit()
    {
        await ModalInstance.CloseAsync(ModalResult.Ok(BonusPointConfigs));
    }

    private async Task Cancel()
    {
        await ModalInstance.CancelAsync();
    }
}
