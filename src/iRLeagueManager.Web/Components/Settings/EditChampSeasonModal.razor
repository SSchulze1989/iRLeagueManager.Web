@using iRLeagueApiCore.Common.Models;
@inherits EditModalBase<ChampSeasonViewModel, ChampSeasonModel>

<EditForm Model="Vm" OnValidSubmit=Submit>
    <StatusResultValidator @ref=ResultValidator />
    <div class="card">
        <div class="card-header">
            <label>Result Configurations</label>
        </div>
        <div class="list-group list-group-flush">
            @foreach(var resultConfig in Vm.ResultConfigViewModels)
            {
                <div class="list-group-item list-group-item-action">
                    <ResultConfigPreview ResultConfig="resultConfig"
                                         @onclick="@(() => OnResultConfigClick(resultConfig))"/>
                </div>
            }
        </div>
    </div>
    <FormValidationMessage TValue=string Message=@ResultValidator?.ErrorMessage />
    <CancelSubmitButtons ModelState=Vm SubmitText="Save" OnCancel=Cancel />
</EditForm>

@code {
    private IEnumerable<ResultConfigViewModel> ResultConfigs { get; set; } = Array.Empty<ResultConfigViewModel>();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender == false) return;

        await Vm.LoadResultConfigs(Cts.Token);
        await InvokeAsync(StateHasChanged);
    }

    private async Task OnResultConfigClick(ResultConfigViewModel config)
    {
        var parameters = new ModalParameters<EditResultConfigModal>()
            .Add(x => x.Model, config.CopyModel())
            .Add(x => x.OnSubmit, async (configVm, cancellationToken) => await configVm.SaveChangesAsync(cancellationToken));
        var result = await ModalService.Show<EditResultConfigModal>("Edit result config", parameters).Result;
        if (result.Confirmed && result.Data is ResultConfigModel model)
        {
            config.SetModel(model);
        }
    }
}
