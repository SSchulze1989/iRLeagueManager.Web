@using iRLeagueApiCore.Common.Models;
@inherits EditModalBase<ChampSeasonViewModel, ChampSeasonModel>

<EditForm Model="Vm" OnValidSubmit=Submit>
    <StatusResultValidator @ref=ResultValidator />
    @{
        var accordionId = $"champseason-{Vm.ChampSeasonId}-accordion";
    }
    <div class="accordion mb-3" id="@accordionId">
        <div class="accordion-item">
            <h2 class="accordion-header" id="@(accordionId)-championship-header">
                <button class="accordion-button" type="button" data-bs-toggle="collapse" data-bs-target="#collapseChampionship" aria-expanded="true" aria-controls="collapseChampionship">
                    Championship
                </button>
            </h2>
            <div class="accordion-collapse collapse show input-group-list input-group-list-flush" id="collapseChampionship" aria-labelledby="@(accordionId)-championship-header" data-bs-parent="#@(accordionId)">
                <InputGroup Label="Name">
                    <InputText class="form-control" @bind-Value=Vm.ChampionshipName placeholder="Enter championship name ..." data-bs-toggle="tooltip" title="Name to identify the championship" />
                </InputGroup>
                <InputGroup Label="Display Name">
                    <InputText class="form-control" @bind-Value=Vm.ChampionshipDisplayName placeholder="@Vm.ChampionshipName" data-bs-toggle="tooltip" title="Name of the championship to be shown displayed on results and standings" />
                </InputGroup>
            </div>
        </div>
        <div class="accordion-item">
            <h2 class="accordion-header" id="@(accordionId)-results-header">
                <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapseResults" aria-expanded="false" aria-controls="collapseResults">
                    Race Results & Points
                </button>
            </h2>
            <div class="accordion-collapse collapse" id="collapseResults" aria-labelledby="@(accordionId)-results-header" data-bs-parent="#@(accordionId)">
                <div class="card m-1">
                    <div class="card-header">
                        Result Configurations / Event types
                    </div>
                    <ul class="list-group list-group-flush">
                        @foreach (var resultConfig in Vm.ResultConfigViewModels)
                        {
                            <div class="list-group-item list-group-item-action d-flex justify-content-between" type="button" @onclick=@(() => OnResultConfigClick(resultConfig))>
                                <ResultConfigPreview ResultConfig="resultConfig" class="overflow-auto" />
                                <div class="d-flex align-self-start">
                                    <button class="btn btn-toggle" type="button" data-bs-toggle="collapse" data-bs-target="#config_@(resultConfig.ResultConfigId)_details"
                                        aria-expanded="false" @onclick:stopPropagation>
                                        <span class="oi oi-chevron-bottom btn-toggle-off" />
                                        <span class="oi oi-chevron-top btn-toggle-on" />
                                    </button>
                                    <button class="btn btn-outline-danger" type="button" @onclick=@(() =>OnDeleteResultConfigClick(resultConfig)) @onclick:stopPropagation>
                                        <span class="oi oi-trash" />
                                    </button>
                                </div>
                            </div>
                        }
                        <div class="list-group-item">
                            <button class="btn btn-outline-secondary" type="button" @onclick=OnAddResultConfigClick>
                                Add Result Configuration
                            </button>
                        </div>
                    </ul>
                </div>
            </div>
        </div>
        <div class="accordion-item" id="@(accordionId)-standings-header">
            <h2 class="accordion-header">
                <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapseStandings" aria-expanded="false" aria-controls="collapseStandings">
                    Standings
                </button>
            </h2>
            <div class="accordion-collapse collapse input-group-list input-group-list-flush" id="collapseStandings" aria-labelledby="@(accordionId)-standings-header" data-bs-parent="#@(accordionId)">
                @if (Vm.StandingConfig is not null)
                {
                    <div class="input-group">
                        <div class="input-group-text">
                            <InputCheckbox class="form-check-input mt-0" @bind-Value=Vm.StandingConfig.UseCombinedResult />
                        </div>
                        <label class="form-control" data-bs-toggle="tooltip" title="Treat events with multiple race sessions as single events (if they have a combined result). This will affect the statistics for race-nr, wins, fastest laps etc.">Treat as single event</label>
                    </div>
                    <InputGroup Label="Count Weeks">
                        <InputNumber class="form-control" @bind-Value=Vm.StandingConfig.WeeksCounted data-bs-toggle="tooltip" title="Number of races counted per season. (used for Dropweeks)" />
                    </InputGroup>
                }
            </div>
        </div>
    </div>
    <FormValidationMessage TValue=string Message=@ResultValidator?.ErrorMessage />
    <CancelSubmitButtons ModelState=Vm SubmitText="Save" OnCancel=Cancel />
</EditForm>

@code {
    private IEnumerable<ResultConfigViewModel> ResultConfigs { get; set; } = Array.Empty<ResultConfigViewModel>();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender == false) return;

        await Vm.LoadResultConfigs(Cts.Token);
        await InvokeAsync(StateHasChanged);
    }

    private async Task OnResultConfigClick(ResultConfigViewModel config)
    {
        var parameters = new ModalParameters<EditResultConfigModal>()
            .Add(x => x.Model, config.CopyModel())
            .Add(x => x.OnSubmit, (configVm, cancellationToken) => configVm.SaveChangesAsync(cancellationToken));
        var result = await ModalService.Show<EditResultConfigModal>("Edit result config", parameters).Result;
        if (result.Confirmed && result.Data is ResultConfigModel model)
        {
            config.SetModel(model);
        }
    }

    private async Task OnAddResultConfigClick()
    {
        var parameters = new ModalParameters<EditResultConfigModal>()
            .Add(x => x.Model, CreateResultConfig())
            .Add(x => x.OnSubmit, (x, c) => Vm.AddResultConfig(x.GetModel(), c));
        await ModalService.Show<EditResultConfigModal>("Add result config", parameters).Result;
    }

    private async Task OnDeleteResultConfigClick(ResultConfigViewModel config)
    {
        var parameters = new ModalParameters<ConfirmModal>()
            .Add(x => x.Text, $"Really delete result config \"{config.Name}\"?")
            .Add(x => x.ButtonTypes, ButtonTypes.YesNo);
        var result = await ModalService.Show<ConfirmModal>("Delete Result Config", parameters).Result;
        if (result.Confirmed)
        {
            await Vm.DeleteResultConfig(config.GetModel());
        }
    }

    private ResultConfigModel CreateResultConfig()
    {
        return new ResultConfigModel();
    }
}
