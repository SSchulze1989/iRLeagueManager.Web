@using iRLeagueApiCore.Common.Models;
@inherits EditModalBase<ChampSeasonViewModel, ChampSeasonModel>

<EditForm Model="Vm" OnValidSubmit=Submit>
    <StatusResultValidator @ref=ResultValidator />
        <div class="input-group-list">
            <InputGroup Label="Name">
                <InputText class="form-control" @bind-Value=Vm.ChampionshipName placeholder="Enter championship name ..." data-bs-toggle="tooltip" title="Name to identify the championship" />
            </InputGroup>
            <InputGroup Label="Display Name">
                <InputText class="form-control" @bind-Value=Vm.ChampionshipDisplayName placeholder="@Vm.ChampionshipName" data-bs-toggle="tooltip" title="Name of the championship to be shown displayed on results and standings" />
            </InputGroup>
        </div>
    <FormValidationMessage TValue=string Message=@ResultValidator?.ErrorMessage />
    <CancelSubmitButtons ModelState=Vm SubmitText="Save" OnCancel=Cancel />
</EditForm>

@code {
    private IEnumerable<ResultConfigViewModel> ResultConfigs { get; set; } = Array.Empty<ResultConfigViewModel>();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender == false) return;

        await Vm.LoadResultConfigs(Cts.Token);
        await InvokeAsync(StateHasChanged);
    }

    private async Task OnResultConfigClick(ResultConfigViewModel config)
    {
        var parameters = new ModalParameters<EditResultConfigModal>()
            .Add(x => x.Model, config.CopyModel())
            .Add(x => x.OnSubmit, (configVm, cancellationToken) => configVm.SaveChangesAsync(cancellationToken));
        var result = await ModalService.Show<EditResultConfigModal>("Edit result config", parameters).Result;
        if (result.Confirmed && result.Data is ResultConfigModel model)
        {
            config.SetModel(model);
        }
    }

    private async Task OnAddResultConfigClick()
    {
        var parameters = new ModalParameters<EditResultConfigModal>()
            .Add(x => x.Model, CreateResultConfig())
            .Add(x => x.OnSubmit, (x, c) => Vm.AddResultConfig(x.GetModel(), c));
        await ModalService.Show<EditResultConfigModal>("Add result config", parameters).Result;
    }

    private async Task OnDeleteResultConfigClick(ResultConfigViewModel config)
    {
        var parameters = new ModalParameters<ConfirmModal>()
            .Add(x => x.Text, $"Really delete result config \"{config.Name}\"?")
            .Add(x => x.ButtonTypes, ButtonTypes.YesNo);
        var result = await ModalService.Show<ConfirmModal>("Delete Result Config", parameters).Result;
        if (result.Confirmed)
        {
            await Vm.DeleteResultConfig(config.GetModel());
        }
    }

    private ResultConfigModel CreateResultConfig()
    {
        return new ResultConfigModel();
    }
}
