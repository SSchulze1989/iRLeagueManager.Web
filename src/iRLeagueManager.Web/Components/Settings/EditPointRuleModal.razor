@using iRLeagueApiCore.Common.Models
@inherits MvvmComponentBase
@inject PointRuleViewModel PointRule
@inject IJSRuntime jsRuntime

<EditForm Model=PointRule>
    <div class="input-group-list mb-3">
        <InputGroup Label="Type">
            <InputSelect class="form-select" id="rule-type-select" aria-label="rule-type-select" @bind-Value=@PointRule.RuleType>
                <option value=@PointRuleViewModel.PointRuleType.MaxPoints>Max points + Drop-off</option>
                <option value=@PointRuleViewModel.PointRuleType.PointList>Point List</option>
            </InputSelect>
        </InputGroup>
        @switch (PointRule.RuleType)
        {
            case @PointRuleViewModel.PointRuleType.MaxPoints:
                <InputGroup Label="Max Points">
                    <InputNumber class="form-control" id="rule-max-points-input" aria-label="rule-max-points-input" placeholder="Max points..." @bind-Value=PointRule.MaxPoints />
                </InputGroup>
                <InputGroup Label="Drop-Off">
                    <InputNumber class="form-control" id="rule-drop-off-input" aria-label="rule-drop-off-input" placeholder="Points drop-off..." @bind-Value=PointRule.PointDropOff />
                </InputGroup>
                break;
            case @PointRuleViewModel.PointRuleType.PointList:
                <div class="input-group">
                    <div class="form-control overflow-auto">
                        @{var pointsPerPlace = @Bind(PointRule, x => x.PointsPerPlace);}
                        <table class="mb-3">
                            <thead>
                                <tr>
                                    <th>Pos. </th>
                                    @foreach(var position in pointsPerPlace.Select((x, i) => i + 1))
                                    {
                                        <th>@position.</th>
                                    }
                                    <th>@(PointRule.PointsPerPlace.Count() + 1).</th>
                                </tr>
                            </thead>
                            <tbody>
                                <tr>
                                    <th>Pts.</th>
                                    @foreach((var points, var index) in pointsPerPlace.Select((x, i) => ((int?)x, i)))
                                    {
                                        <td>
                                            <InputNumber Value=points
                                                         ValueExpression=@(() => points) 
                                                         ValueChanged=@((int? value) => SetValue(index, value)) 
                                                         class="input-plain" 
                                                         style="width: 2rem;"/>
                                        </td>
                                    }
                                    <td>
                                        <InputNumber @bind-Value=NewValue
                                                     @ref=NewNumberInput
                                                     class="input-plain"
                                                     style="width: 2rem;"/>
                                    </td>
                                    <td>
                                        <span @ref=ScrollDummy/>
                                    </td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                </div>
                break;
            default:
                break;
        }
        <InputGroup Label="Bonus Points">
            <label class="form-control" @onclick=EditBonusClick>
                @((MarkupString)string.Join(", ", PointRule.BonusPointConfigs.Select(x => x.ToString().Replace(" ", "&nbsp;"))))
            </label>
        </InputGroup>
    </div>
    <CancelSubmitButtons SubmitText="Ok" CancelText="Cancel" OnSubmit=Submit OnCancel=Cancel />
</EditForm>

@code {
    [CascadingParameter]
    public BlazoredModalInstance ModalInstance { get; set; } = default!;
    [CascadingParameter]
    public IModalService ModalService { get; set; } = default!;

    [Parameter]
    public PointRuleModel Model { get; set; } = default!;

    InputNumber<int?> NewNumberInput { get; set; } = default!;
    ElementReference ScrollDummy { get; set; }

    private int? newValue = default(int?);
    private int? NewValue
    {
        get => newValue;
        set
        {
            if (newValue != value)
            {
                _ = NewPointValue(value);
            }
        }
    }

    protected override void OnParametersSet()
    {
        BlazorParameterNullException.ThrowIfNull(this, ModalService);
        _ = ModalInstance ?? throw BlazorParameterNullException.New(this, ModalInstance);
        _ = Model ?? throw BlazorParameterNullException.New(this, Model);
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender == false)
        {
            return;
        }
        PointRule.SetModel(Model);
    }

    private async Task NewPointValue(int? value)
    {
        if (value > 0)
        {
            PointRule.PointsPerPlace.Add(value.Value);
        }
        if (NewNumberInput.Element is not null)
        {
            await ScrollDummy.FocusAsync();
            await NewNumberInput.Element.Value.FocusAsync();
        }
    }

    private async Task EditBonusClick()
    {
        var parameters = new ModalParameters<EditBonusPointsModal>()
            .Add(x => x.BonusPoints, PointRule.BonusPointConfigs);
        var result = await ModalService.Show<EditBonusPointsModal>("Bonus points", parameters).Result;
        if (result.Confirmed && result.Data is IEnumerable<BonusPointConfig> bonusPoints)
        {
            PointRule.BonusPointConfigs = bonusPoints;
        }
    }

    private void SetValue(int index, int? value)
    {
        if (value is null)
        {
            PointRule.PointsPerPlace.RemoveAt(index);
            return;
        }
        PointRule.PointsPerPlace[index] = value.Value;
    }

    private async Task Submit()
    {
        if (PointRule.RuleType == PointRuleViewModel.PointRuleType.MaxPoints && PointRule.PointDropOff > 0)
        {
            var points = PointRule.MaxPoints;
            PointRule.PointsPerPlace.Clear();
            while(points > 0)
            {
                PointRule.PointsPerPlace.Add(points);
                points -= PointRule.PointDropOff;
            }
        }
        else
        {
            PointRule.MaxPoints = 0;
            PointRule.PointDropOff = 0;
        }
        var result = ModalResult.Ok(Model);
        await ModalInstance.CloseAsync(result);
    }

    private async Task Cancel()
    {
        await ModalInstance.CancelAsync();
    }
}
