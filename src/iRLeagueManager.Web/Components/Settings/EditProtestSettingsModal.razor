@using iRLeagueApiCore.Common.Models
@using iRLeagueApiCore.Common.Enums
@inherits EditModalBase<LeagueViewModel, LeagueModel>

<EditForm Model=Vm OnValidSubmit=Submit>
    <StatusResultValidator @ref=ResultValidator/>
    <div class="input-group-list">
        <div class="input-group" disabled>
            <div class="input-group-text">
                <InputCheckbox class="form-check-input mt-0" @bind-Value=Vm.EnableProtests/>
            </div>
            <label class="form-control">Enable Protests</label>
        </div>
        @if (Vm.EnableProtests)
        {
            <InputGroup Label="Cooldown Period">
                <InputNumber class="form-control" @bind-Value=Vm.CoolDownHrs />
                <span class="input-group-text">Hrs</span>
                <InputNumber class="form-control" @bind-Value=Vm.CoolDownMinutes />
                <span class="input-group-text">Min</span>
            </InputGroup>
            <InputGroup Label="Protests Open for">
                <InputNumber class="form-control" @bind-Value=Vm.ProtestsClosedHrs />
                <span class="input-group-text">Hrs</span>
                <InputNumber class="form-control" @bind-Value=Vm.ProtestsClosedMinutes />
                <span class="input-group-text">Min</span>
            </InputGroup>
            <InputGroup Label="Enable live reviews">
                <div class="form-control">
                    <div class="form-check">
                        <InputCheckbox @bind-Value="ProtestFormAccessPublic" class="form-check-input" disabled/>
                        <label class="form-check-label">Public</label>
                    </div>
                    <div class="form-check">
                        <InputCheckbox @bind-Value="ProtestFormAccessLeagueMembers" class="form-check-input"/>
                        <label class="form-check-label">Registered league members</label>
                    </div>
                    <div class="form-check">
                        <InputCheckbox @bind-Value="ProtestFormAccessParticipants" class="form-check-input" />
                        <label class="form-check-label">Participants in race</label>
                    </div>
                    <div class="form-check">
                        <InputCheckbox @bind-Value="ProtestFormAccessPassword" class="form-check-input" />
                        <label class="form-check-label">Password protected</label>
                    </div>
                </div>
            </InputGroup>
            @if (ProtestFormAccessPassword)
            {
                <InputGroup Label="Password">
                    @if (ShowPassword)
                    {
                        <InputText @bind-Value="Vm.ProtestAccessPassword" type="text" class="form-control" />
                    }
                    else
                    {
                        <InputText @bind-Value="Vm.ProtestAccessPassword" type="password" class="form-control" />
                    }
                    <button class="btn btn-outline-secondary" type="button" @onclick=@(() => ShowPassword = !ShowPassword)><span class="bi @(ShowPassword ? "bi-eye" : "bi-eye-slash")" /></button>
                </InputGroup>
            }
            <InputGroup Label="Show Protests public">
                <InputSelect class="form-select" @bind-Value=Vm.ProtestPublic>
                    <option value="@ProtestPublicSetting.Hidden">Hide Protests</option>
                    <option value="@ProtestPublicSetting.WithoutProtester">Show Protests without Protester</option>
                    <option value="@ProtestPublicSetting.WithProtester">Show Protests and Protester</option>
                </InputSelect>
            </InputGroup>
        }
    </div>
    <CancelSubmitButtons SubmitText="Save" CancelText="Cancel" OnCancel=Cancel ModelState=Vm />
</EditForm>

@code {
    private bool ProtestFormAccessPublic 
    { 
        get => GetFlag(~Vm.ProtestFormAccess, ProtestFormAccess.Participants | ProtestFormAccess.Password | ProtestFormAccess.LeagueMembers); 
        set => Vm.ProtestFormAccess = SetFlag(Vm.ProtestFormAccess, ProtestFormAccess.Public, value); 
    }

    private bool ProtestFormAccessPassword 
    { 
        get => GetFlag(Vm.ProtestFormAccess, ProtestFormAccess.Password); 
        set => Vm.ProtestFormAccess = SetFlag(Vm.ProtestFormAccess, ProtestFormAccess.Password, value); 
    }

    private bool ProtestFormAccessParticipants 
    { 
        get => GetFlag(Vm.ProtestFormAccess, ProtestFormAccess.Participants); 
        set => Vm.ProtestFormAccess = SetFlag(Vm.ProtestFormAccess, ProtestFormAccess.Participants, value);
    }

    private bool ProtestFormAccessLeagueMembers
    {
        get => GetFlag(Vm.ProtestFormAccess, ProtestFormAccess.LeagueMembers);
        set => Vm.ProtestFormAccess = SetFlag(Vm.ProtestFormAccess, ProtestFormAccess.LeagueMembers, value);
    }

    private bool GetFlag(ProtestFormAccess flags, ProtestFormAccess access)
    {
        var hasFlags = flags.HasFlag(access);
        return hasFlags;
    }

    private bool ShowPassword { get; set; } = false;

    private ProtestFormAccess SetFlag(ProtestFormAccess flags, ProtestFormAccess access, bool value)
    {
        if (value)
        {
            return flags | access;
        }
        return flags & ~access;
    }
}
