@using iRLeagueApiCore.Common.Enums
@using iRLeagueApiCore.Common.Models
@inherits MvvmComponentBase
@inject ResultFiltersViewModel vm

@foreach(var filter in vm)
{
    <EditForm Model=filter>
        <div class="input-group-list mb-3">
            <InputGroup Label="Column">
                <InputSelect class="form-select" id="input-column-select" aria-label="input-column-select" @bind-Value=filter.ColumnPropertyName>
                    @foreach(var name in ColumnNames)
                    {
                        <option value=@name>@name</option>
                    }
                </InputSelect>
                <button class="btn btn-outline-danger" @onclick=@(() => vm.Remove(filter))>
                    <span class="oi oi-trash"/>
                </button>
            </InputGroup>
            @if (Actions.Count() > 1)
            {
                <InputGroup Label="Action">
                    <InputSelect class="form-select" id="input-action-select" aria-label="input-action-select" @bind-Value=filter.Action>
                        @foreach(var action in Actions)
                        {
                            <option value="@action">@action.ToString()</option>
                        }
                    </InputSelect>
                </InputGroup>
            }
            @switch (filter.FilterType)
            {
                case FilterType.Member:
                    <InputGroup Label="Members">
                        <BlazoredTypeahead @bind-Values=filter.FilterValues
                                           class="form-control p-0"
                                           style="border-top-right-radius:0; border-top-left-radius:0;"
                               EnableDropDown=true
                               SearchMethod=SearchMembers
                               ConvertMethod="@(item => item.MemberId.ToString())"
                               MinimumLength=1
                               MaximumSuggestions=100
                               DeleteItemsOnBackspace=false
                                           placeholder="Search driver by name...">

                            <SelectedTemplate Context=memberId>
                                @{
                                    var member = LeagueMembers.FirstOrDefault(x => x.MemberId.ToString() == memberId);
                                }
                                @if (member is null)
                                {
                                    @memberId
                                }
                                else
                                {
                                    @member.FirstName @member.LastName
                                }
                            </SelectedTemplate>
                            <ResultTemplate Context=member>
                                @member.FirstName @member.LastName (@member.IRacingId)
                            </ResultTemplate>
                            <NotFoundTemplate Context=name>
                                <span>Driver <b>@name</b> Not found!</span>
                            </NotFoundTemplate>
                        </BlazoredTypeahead>
                    </InputGroup>
                    break;
                case FilterType.Team:
                    <InputGroup Label="Teams">
                        <BlazoredTypeahead @bind-Values=filter.FilterValues
                                           class="form-control p-0"
                                           style="border-top-right-radius:0; border-top-left-radius:0;"
                               EnableDropDown=true
                               SearchMethod=SearchTeams
                               ConvertMethod="@(item => item.TeamId.ToString())"
                               MinimumLength=1
                               MaximumSuggestions=100
                               DeleteItemsOnBackspace=false
                                           placeholder="Search driver by name...">

                            <SelectedTemplate Context=teamId>
                                @{
                                    var team = Teams.FirstOrDefault(x => x.TeamId.ToString() == teamId);
                                }
                                @if (team is null)
                                {
                                    @teamId
                                }
                                else
                                {
                                    @team.Name
                                }
                            </SelectedTemplate>
                            <ResultTemplate Context=team>
                                @team.Name@(team.IRacingTeamId != null ? $" ({@team.IRacingTeamId})" : "")
                            </ResultTemplate>
                            <NotFoundTemplate Context=name>
                                <span>Team <b>@name</b> Not found!</span>
                            </NotFoundTemplate>
                        </BlazoredTypeahead>
                    </InputGroup>
                    break;
                case FilterType.ColumnProperty:
                    <InputGroup Label="Type">
                        <InputSelect class="form-select" id="input-type-select" aria-label="input-type-select" @bind-Value=filter.Comparator>
                            @foreach (var compType in Enum.GetValues<ComparatorType>())
                            {
                                if (AllowForEach == false && compType == ComparatorType.ForEach)
                                {
                                    continue;
                                }
                                <option value=@compType>@compType.ToString()</option>
                            }
                        </InputSelect>
                    </InputGroup>
                    <InputGroup Label="@(@Bind(filter, x => x.Comparator) == ComparatorType.InList ? "Values" : "Value")">
                        @{
                            var propertyType = GetColumnPropertyType(filter.ColumnPropertyName);
                        }
                        @if (propertyType is null)
                        {
                            <label class="form-control disabled" type="text" />
                        }
                        else if (filter.Comparator == ComparatorType.InList)
                        {
                            <BlazoredTypeahead @bind-Values=filter.FilterValues
                               SearchMethod=@(str => Task.FromResult((IEnumerable<string>)Array.Empty<string>()))
                               AddItemOnEmptyResultMethod=@(str => Task.FromResult(str))
                               DeleteItemsOnBackspace=false
                                               class="form-control">
                                <SelectedTemplate Context=value>
                                    @value
                                </SelectedTemplate>
                                <ResultTemplate Context=value>
                                    @value
                                </ResultTemplate>
                                <NotFoundTemplate Context=value>
                                    @value
                                </NotFoundTemplate>
                            </BlazoredTypeahead>
                        }
                        else if (propertyType == typeof(string))
                        {
                            <InputText class="form-control" @bind-Value=filter.Value />
                        }
                        else if (propertyType == typeof(double) || propertyType == typeof(double?) || propertyType == typeof(int) || propertyType == typeof(int?))
                        {
                            <input type="number" class="form-control" value=@filter.Value @onchange=@((ChangeEventArgs args) => filter.Value = args.Value?.ToString() ?? string.Empty) />
                        }
                        else
                        {
                            <label class="form-control">Not supported</label>
                        }
                    </InputGroup>
                    break;
            }
        </div>
    </EditForm>
}
<button class="btn btn-outline-secondary" @onclick=vm.Add>
    Add Filter
</button>
<CancelSubmitButtons SubmitText="Ok" CancelText="Cancel" OnSubmit=Submit OnCancel=Cancel />

@code {
    [CascadingParameter]
    public BlazoredModalInstance ModalInstance { get; set; } = default!;

    [Parameter]
    public IEnumerable<ResultFilterModel> Model { get; set; } = default!;

    [Parameter]
    public IEnumerable<MemberModel> LeagueMembers { get; set; } = default!;
    [Parameter]
    public IEnumerable<TeamModel> Teams { get; set; } = default!;

    [Parameter]
    public bool AllowForEach { get; set; } = false;

    public static string[] DefaultColumnNames { get; } = new[]
    {
        nameof(ResultRowModel.Car),
        nameof(ResultRowModel.CarClass),
        nameof(ResultRowModel.ClassId),
        nameof(ResultRowModel.CompletedLaps),
        nameof(ResultRowModel.CompletedPct),
        nameof(ResultRowModel.SeasonStartIrating),
        nameof(ResultRowModel.Division),
        nameof(ResultRowModel.OldIrating),
        nameof(ResultRowModel.NewIrating),
        nameof(ResultRowModel.OldSafetyRating),
        nameof(ResultRowModel.NewSafetyRating),
        nameof(ResultRowModel.Incidents),
        "Member",
        "Team",
    };

    public static MatchedValueAction[] DefaultActions { get; } = new[]
    {
        MatchedValueAction.Keep,
        MatchedValueAction.Remove,
    };

    [Parameter]
    public IEnumerable<string> ColumnNames { get; set; } = DefaultColumnNames;

    [Parameter]
    public IEnumerable<MatchedValueAction> Actions { get; set; } = DefaultActions;

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        BlazorParameterNullException.ThrowIfNull(this, ModalInstance);
        BlazorParameterNullException.ThrowIfNull(this, Model);
        BlazorParameterNullException.ThrowIfNull(this, LeagueMembers);
        BlazorParameterNullException.ThrowIfNull(this, Teams);
    }

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
        if (firstRender == false)
        {
            return;
        }
        vm.SetModel(Model);
    }

    private async Task<IEnumerable<MemberModel>> SearchMembers(string searchString)
    {
        if (string.IsNullOrEmpty(searchString))
        {
            return await Task.FromResult(LeagueMembers);
        }

        var terms = searchString.ToLower().Split(',', ' ', ';')
            .Where(x => string.IsNullOrWhiteSpace(x) == false)
            .ToArray();
        return await Task.FromResult(LeagueMembers
            .Where(x => MatchMemberSearchTerms(x, terms)));
    }

    private async Task<IEnumerable<TeamModel>> SearchTeams(string searchstring)
    {
        if (string.IsNullOrWhiteSpace(searchstring))
        {
            return await Task.FromResult(Teams);
        }

        var terms = searchstring.ToLower().Split(',', ' ', ';')
            .Where(x => string.IsNullOrWhiteSpace(x) == false)
            .ToArray();
        return await Task.FromResult(Teams.
            Where(x => MatchTeamSearchTerms(x, terms)));
    }

    private bool MatchMemberSearchTerms(MemberModel member, params string[] terms)
    {
        var searchName = member.FirstName + member.LastName;
        var iracingId = member.IRacingId.ToString();
        return terms
            .Any(x => searchName.Contains(x, StringComparison.OrdinalIgnoreCase) ||
                      iracingId.Contains(x)
            );
    }

    private bool MatchTeamSearchTerms(TeamModel team, params string[] terms)
    {
        var searchName = team.Name;
        var iracingId = team.IRacingTeamId.GetValueOrDefault().ToString();
        return terms
            .Any(x => searchName.Contains(x, StringComparison.OrdinalIgnoreCase) ||
                      iracingId.Contains(x)
            );
    }

    private async Task Submit()
    {
        var result = ModalResult.Ok(vm.GetModel());
        await ModalInstance.CloseAsync(result);
    }

    private async Task Cancel()
    {
        await ModalInstance.CancelAsync();
    }

    private Type? GetColumnPropertyType(string name)
    {
        var property = typeof(ResultRowModel).GetProperty(name);
        return property?.PropertyType;
    }
}
