@inherits MvvmComponentBase
@using iRLeagueApiCore.Common.Enums
@using iRLeagueApiCore.Common.Models

<InputGroup Label="Sort First">
    <button class="form-control" type="button" @onclick=@(() => EditPointsSortOptionsClick(Scoring.PointRule)) data-bs-toggle="tooltip" title="Sort result before awarding points. Use this to define the order for points and bonuses">
        @{
            var pointsSortOptions = Scoring.PointRule.PointsSortOptions;
        }
        @if (pointsSortOptions.Any())
        {
            <div class="d-flex justify-content-start overflow-scroll">
                @foreach ((var option, var priority) in pointsSortOptions.Select((x, i) => (x, i + 1)))
                {
                    <div class="d-inline-block me-3 mb-2">
                        <span>@(priority).@option.ToString()</span>
                    </div>
                }
            </div>
        }
        else
        {
            <div class="text-muted">Default</div>
        }
    </button>
</InputGroup>
<InputGroup Label=Points>
    <button class="form-control" type="button" @onclick=EditPointsClick data-bs-toggle="tooltip" title="Define points for positions and bonus points. If no points are defined the points will be taken from the result source">
        @{var pointRule = @Bind(Scoring, x => x.PointRule);}
        @if (@Bind(pointRule, x => x.RuleType) == PointRuleViewModel.PointRuleType.MaxPoints)
        {
            <small>MaxPoints: @pointRule.MaxPoints</small>
            <small>DropOff p.Pl: @pointRule.PointDropOff</small>
        }
        <PointTable class="overflow-auto" PointRule=pointRule/>
    </button>
</InputGroup>
<InputGroup Label="Auto Penalties">
    <button class="form-control" type="button" @onclick=EditAutoPenaltiesClick>
        @if(Scoring.PointRule.AutoPenalties.Any() == false)
        {
            <div class="text-muted">Configure</div>
        }
        else
        {
            <div class="w-100 text-start">
                @string.Join(", ", Scoring.PointRule.AutoPenalties.Select(x => x.Description))
            </div>
        }
    </button>
</InputGroup>
<InputGroup Label="Sort Final">
    <button class="form-control" type="button" @onclick=@(() => EditFinalSortOptionsClick(Scoring.PointRule)) data-bs-toggle="tooltip" title="Sort for final order displayed on results page and to define final positions">
        @{
            var finalSortOptions = Scoring.PointRule.FinalSortOptions;
        }
        @if (finalSortOptions.Any())
        {
            <div class="d-flex justify-content-start overflow-scroll">
                @foreach ((var option, var priority) in finalSortOptions.Select((x, i) => (x, i + 1)))
                {
                    <div class="d-inline-block me-3 mb-2">
                        <span>@(
                          priority
                          ).@option.ToString()</span>
                    </div>
                }
            </div>
        }
        else
        {
            <div class="text-muted">Default</div>
        }
    </button>
</InputGroup>

@code {
    [CascadingParameter]
    public IModalService ModalService { get; set; } = default!;
    [CascadingParameter]
    public IEnumerable<MemberModel> LeagueMembers { get; set; } = default!;
    [CascadingParameter]
    public IEnumerable<TeamModel> Teams { get; set; } = default!;

    [Parameter]
    public ScoringViewModel Scoring { get; set; } = default!;

    protected override void OnParametersSet()
    {
        BlazorParameterNullException.ThrowIfNull(this, ModalService);
        BlazorParameterNullException.ThrowIfNull(this, LeagueMembers);
        BlazorParameterNullException.ThrowIfNull(this, Teams);
        BlazorParameterNullException.ThrowIfNull(this, Scoring);
    }

    private async Task EditPointsClick()
    {
        var parameters = new ModalParameters<EditPointRuleModal>()
            .Add(x => x.Model, Scoring.PointRule.CopyModel())
            .Add(x => x.LeagueMembers, LeagueMembers)
            .Add(x => x.Teams, Teams);
        var options = new ModalOptions()
        {
            DisableBackgroundCancel = true,
        };
        var result = await ModalService.Show<EditPointRuleModal>("Edit Points", parameters, options).Result;
        if (result.Confirmed && result.Data is PointRuleModel model)
        {
            Scoring.GetModel().PointRule = model;
            Scoring.PointRule.SetModel(model);
        }
    }

    private async Task EditPointsSortOptionsClick(PointRuleViewModel pointRule)
    {
        var parameters = new ModalParameters()
            .Add(nameof(EditSortOptionsModal.Model), pointRule.PointsSortOptions.ToList());
        var options = new ModalOptions()
        {
            DisableBackgroundCancel = true,
        };
        var result = await ModalService.Show<EditSortOptionsModal>("Sort for points", parameters, options).Result;
        if (result.Confirmed && result.Data is IList<SortOptions> sortOptions)
        {
            pointRule.PointsSortOptions = sortOptions;
        }
    }

    private async Task EditFinalSortOptionsClick(PointRuleViewModel pointRule)
    {
        var parameters = new ModalParameters()
            .Add(nameof(EditSortOptionsModal.Model), pointRule.FinalSortOptions.ToList());
        var options = new ModalOptions()
        {
            DisableBackgroundCancel = true,
        };
        var result = await ModalService.Show<EditSortOptionsModal>("Final order", parameters, options).Result;
        if (result.Confirmed && result.Data is IList<SortOptions> sortOptions)
        {
            pointRule.FinalSortOptions = sortOptions;
        }
    }

    private async Task EditAutoPenaltiesClick()
    {
        var autoPenalties = Scoring.PointRule.CopyModel().AutoPenalties;
        var parameters = new ModalParameters<EditAutoPenaltiesModal>()
            .Add(x => x.Model, autoPenalties)
            .Add(x => x.LeagueMembers, LeagueMembers)
            .Add(x => x.Teams, Teams);
        var result = await ModalService.Show<EditAutoPenaltiesModal>("Automatic Penalties", parameters).Result;
        if (result.Confirmed && result.Data is IEnumerable<AutoPenaltyConfiguration> model)
        {
            Scoring.PointRule.AutoPenalties = model.ToList();
        }
    }
}
