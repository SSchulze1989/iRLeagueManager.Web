@using iRLeagueApiCore.Common.Enums
@using iRLeagueApiCore.Common.Models
@using iRLeagueManager.Web.ViewModels
@inherits EditMudModalBase<TeamViewModel, TeamModel>

<EditForm Model=Vm OnValidSubmit=Submit>
    <StatusResultValidator @ref=ResultValidator />
    <MudDialog>
        <DialogContent>
            <MudStack Spacing="2">
                <MudTextField Label="Name" @bind-Value="Vm.Name" For="@(() => Vm.Name)" Variant="Variant.Filled"/>
                <MudColorPicker Label="Color" @bind-Text="Vm.TeamColor" style="@($"color: {Vm.TeamColor}")" ColorPickerMode="ColorPickerMode.HEX" Variant="Variant.Filled" />
                <MultiSelectAutoComplete
                    Label="Members"
                    @bind-Values=Vm.Members
                    SearchFunc="SearchMembers"
                    ToStrinFunc="@(member => member is null ? string.Empty : $"{member.FirstName} {member.LastName}")"
                    Variant="Variant.Filled" />
                <FormValidationMessage TValue=string Message=@ResultValidator?.ErrorMessage />
            </MudStack>
        </DialogContent>
        <DialogActions>
            <MudButton Color="Color.Secondary" OnClick="Cancel">Cancel</MudButton>
            <MudButton Color="Color.Primary" OnClick="Submit">Submit</MudButton>
        </DialogActions>
    </MudDialog>
</EditForm>

@code {
    [Parameter]
    public IEnumerable<MemberInfoModel> LeagueMembers { get; set; } = default!;

    protected override void OnParametersSet()
    {
        _ = Model ?? throw BlazorParameterNullException.New(this, Model);
        _ = LeagueMembers ?? throw BlazorParameterNullException.New(this, LeagueMembers);

        if (EqualityComparer<TeamModel>.Default.Equals(Model, Vm.GetModel()) == false)
        {
            Vm.SetModel(Model);
        }
    }

    private async Task<IEnumerable<MemberInfoModel>> SearchMembers(string searchString)
    {
        if (string.IsNullOrEmpty(searchString))
        {
            return await Task.FromResult(LeagueMembers);
        }

        var terms = searchString.ToLower().Split(',', ' ', ';')
        .Where(x => string.IsNullOrWhiteSpace(x) == false)
            .ToArray();
        return await Task.FromResult(LeagueMembers
            .Where(x => MatchMemberSearchTerms(x, terms)));
    }

    private bool MatchMemberSearchTerms(MemberInfoModel member, params string[] terms)
    {
        var searchName = member.FirstName + member.LastName;
        return terms.Any(x => searchName.Contains(x, StringComparison.OrdinalIgnoreCase));
    }
}
