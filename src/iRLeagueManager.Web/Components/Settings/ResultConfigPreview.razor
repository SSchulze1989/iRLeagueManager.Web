@using iRLeagueApiCore.Common.Models;
@using iRLeagueManager.Web.ViewModels

<div @attributes=AdditionalAttributes>
    <div>
        <h5>@ResultConfig.Name</h5>
        @if (ResultConfig.SourceResultConfig is not null)
        {
            <small><i>Use results from => @GetReferencedResultConfigName(ResultConfig.SourceResultConfig)</i></small>
        }
    </div>

    <div class="collapse @(Collapsed ? "" : "show") mt-2 text-muted" id="config_@(ResultConfig.ResultConfigId)_details">
        @{
            var scoringsCount = ResultConfig.Scorings.Count();
        }
        @foreach (var scoring in ResultConfig.Scorings)
        {
            var pointRule = scoring.PointRule;
            var finalSortOptions = pointRule.FinalSortOptions;
            <div class="mb-3">
                @if (scoringsCount > 1)
                {
                    <h6 class="text-decoration-underline">@scoring.Name</h6>
                }
                <div class="ms-3">
                    <small>
                        @switch(scoring.PointRule.RuleType)
                        {
                            case PointRuleViewModel.PointRuleType.MaxPoints:
                                <label>Max Points: max. points: @pointRule.MaxPoints / drop off: @pointRule.PointDropOff</label>
                                break;
                            case PointRuleViewModel.PointRuleType.PointList:
                                @if (pointRule.PointsPerPlace.Any())
                                {
                                    <label>points per place: @string.Join(",", pointRule.PointsPerPlace)</label>
                                }
                                else
                                {
                                    <label>keep points</label>
                                }
                                break;
                        }
                        <br/>
                    </small>
                    @*<PointTable PointRule=scoring.PointRule />*@
                    <small>Sort results by: @(finalSortOptions.Any() ? string.Join(" then ", finalSortOptions) : "Default")</small>
                </div>
            </div>
        }
    </div>
</div>


@code {
    [Parameter(CaptureUnmatchedValues=true)]
    public IDictionary<string, object>? AdditionalAttributes { get; set; }

    [Parameter, EditorRequired]
    public ResultConfigViewModel ResultConfig { get; set; } = default!;

    [Parameter]
    public bool Collapsed { get; set; } = false;

    protected override void OnParametersSet()
    {
        _ = ResultConfig ?? throw BlazorParameterNullException.New(this, ResultConfig);
    }

    private string GetReferencedResultConfigName(ResultConfigInfoModel config)
    {
        if (string.IsNullOrEmpty(config.ChampionshipName))
        {
            return config.Name;
        }
        return $"{config.ChampionshipName} - {config.Name}";
    }
}
