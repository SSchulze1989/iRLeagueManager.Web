@using System.Text
@using iRLeagueApiCore.Common.Enums
@using iRLeagueApiCore.Common.Models
@using iRLeagueManager.Web.Components.Dialogs
@inherits UtilityComponentBase
@inject IDialogService DialogService

<SettingsTopSection Header="Options">
    @if (AllowEditName)
    {
        <SettingsItem Label="Name"
                      Text="@Config.Name"
                      HelperText="@(string.IsNullOrEmpty(Config.DisplayName) ? "" : Config.DisplayName)"
                      OnClick="NameClick" />
    }

    <SettingsListItem @bind-Items="PointsSortOptions"
                      Text="Finish order before Points"
                      HelperText="@GetSortingHelperText(PointsSortOptions)"
                      ItemsSource="Enum.GetValues<SortOptions>()"
                      ToStringFunc="@(x => x.GetText())"
                      @bind-Expanded="finishOrderExpanded" />

    <SettingsListItem @bind-Items="FinalSortOptions"
                      Text="Final order after Points"
                      HelperText="@GetSortingHelperText(FinalSortOptions)"
                      ItemsSource="Enum.GetValues<SortOptions>()"
                      ToStringFunc="@(x => x.GetText())"
                      @bind-Expanded="finalOrderExpanded" />

    <SettingsSwitch @bind-Checked="EnableHeatRaces"
                    Text="Enable Heat Races"
                    HelperText="Allow multiple races per event" />

    <MudCollapse Expanded="EnableHeatRaces">
        <SettingsTextPrompt Value="RaceCount"
                            ValueChanged="@((int count) => RaceCountChanged(count))"
                            Label="Number of races"
                            HelperText="Number of races per event" />
    </MudCollapse>
</SettingsTopSection>

<SettingsTopSection Header="Advanced" Class="mt-4">
    <SettingsSection Text="Conditions for Points"
                     @bind-Expanded="filtersExpanded"
                     InitiallyExpanded="false"
                     HelperText="Add conditions for who can score points (e.g: Driver must at least drive xx% race distance...)">
        <FilterTable Filters="Config.FiltersForPoints" OnRowClick="OnFilterRowClick" />
        <MudListItem Icon="@Icons.Material.Filled.Add" IconColor="Color.Tertiary">
            <MudText Color="Color.Tertiary">Add Filter</MudText>
        </MudListItem>
    </SettingsSection>
</SettingsTopSection>

@code {
    [CascadingParameter] public IEnumerable<MemberModel> LeagueMembers { get; set; } = default!;
    [CascadingParameter] public IEnumerable<TeamModel> Teams { get; set; } = default!;
    [Parameter, EditorRequired] public ResultConfigViewModel Config { get; set; } = default!;
    [Parameter] public bool AllowEditName { get; set; } = false;

    private bool EnableHeatRaces { get; set; }
    private int RaceCount { get; set; }

    private bool finishOrderExpanded = false;
    private bool finalOrderExpanded = false;
    private bool filtersExpanded = false;

    private IEnumerable<SortOptions> PointsSortOptions
    {
        get => Config.Scorings.FirstOrDefault()?.PointRule.PointsSortOptions ?? Array.Empty<SortOptions>();
        set
        {
            var list = value.ToList();
            foreach (var scoring in Config.Scorings)
            {
                scoring.PointRule.PointsSortOptions = list;
            }
        }
    }

    private IEnumerable<SortOptions> FinalSortOptions
    {
        get => Config.Scorings.FirstOrDefault()?.PointRule.FinalSortOptions ?? Array.Empty<SortOptions>();
        set
        {
            var list = value.ToList();
            foreach (var scoring in Config.Scorings)
            {
                scoring.PointRule.FinalSortOptions = list;
            }
        }
    }

    private enum SortOptionsSelect
    {
        Points,
        Final,
    };

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        BlazorParameterNullException.ThrowIfNull(this, LeagueMembers, cascading: true);
        BlazorParameterNullException.ThrowIfNull(this, Teams, cascading: true);
        BlazorParameterNullException.ThrowIfNull(this, Config);

        var raceCount = Config.Scorings.Where(x => x.IsCombinedResult == false).Count();
        if (RaceCount != raceCount)
        {
            RaceCount = raceCount;
            EnableHeatRaces = RaceCount > 1;
        }
    }

    private async Task NameClick()
    {
        var parameters = new DialogParameters<DisplayNameDialog>()
        {
            { x => x.Value, (Config.Name, Config.DisplayName) },
        };
        var result = await DialogService.Show<DisplayNameDialog>("", parameters).Result;
        if (!result.Canceled)
        {
            (Config.Name, Config.DisplayName) = ((string, string))result.Data;
        }
    }

    private async Task OnFilterRowClick(ResultFilterModel filter)
    {
        var parameters = new DialogParameters<FilterDialog>()
        {
            { x => x.Value, ModelHelper.CopyModel(filter) },
            { x => x.OnSubmit, (x, c) => { filter.Condition = x.Condition; return Task.FromResult(true); } },
            { x => x.LeagueMembers, LeagueMembers },
            { x => x.Teams, Teams },
        };
        var dialog = await DialogService.Show<FilterDialog>("Edit Condition", parameters).Result;
    }

    private void RaceCountChanged(int count)
    {

    }

    private string GetSortingHelperText(IEnumerable<SortOptions> sortOptions)
    {
        if (sortOptions.Count() == 0)
        {
            return "";
        }
        var sb = new StringBuilder();
        if (sortOptions.Count() > 1)
        {
            sb.Append("First ");
        }
        sb.Append(sortOptions.First().GetText());
        foreach (var option in sortOptions.Skip(1))
        {
            sb.Append(", then ");
            sb.Append(option.GetText());
        }
        return sb.ToString();
    }
}
