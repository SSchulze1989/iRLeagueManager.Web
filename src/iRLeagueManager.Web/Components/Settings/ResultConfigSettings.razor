@using System.Text
@using iRLeagueApiCore.Common.Enums
@using iRLeagueApiCore.Common.Models
@using iRLeagueManager.Web.Components.Dialogs
@inherits UtilityComponentBase
@inject IDialogService DialogService

@if (AllowEditName)
{
    <SettingsTopSection Header="Name">
        <SettingsItem Label="Name"
                      Text="@Config.Name"
                      HelperText="@(string.IsNullOrEmpty(Config.DisplayName) ? "" : Config.DisplayName)"
                      OnClick="NameClick" />
    </SettingsTopSection>
}


<SettingsTopSection Header="Sessions">
    <MudListSubheader Class="pb-0">
        Set points and finish order
    </MudListSubheader>

    @if (Config.Scorings.Count == 1)
    {
        <ScoringSettings Scoring="Config.Scorings.First()" />
    }
    else
    {
        @foreach (var (scoring, index) in Config.Scorings.WithIndex())
        {
            <SettingsSection Text="@scoring.Name" HelperText="@(scoring.IsCombinedResult ? "Combined result" : "Heat session result")">
                <ScoringSettings Scoring="scoring" />
            </SettingsSection>
        }
    }

    <MudDivider Class="my-1" />

    <MudListSubheader Class="pb-0">
        More options
    </MudListSubheader>

    <SettingsSwitch @bind-Checked="EnableHeatRaces"
                    Text="Enable Heat Sessions"
                    HelperText="Allow multiple race session per event" />


    <MudCollapse Expanded="EnableHeatRaces">
        <SettingsTextPrompt @bind-Value="Config.RaceCount"
                            Label="Number of races"
                            HelperText="Number of races per event" />
        <SettingsSwitch @bind-Checked="Config.CalculateCombinedResult"
                        Text="Combined Result"
                        HelperText="Calculate a combined result from individual heat sessions" />
    </MudCollapse>
</SettingsTopSection>

<SettingsTopSection Header="Advanced" Class="mt-4">
    <SettingsSection Text="Conditions for Points"
                     @bind-Expanded="filtersExpanded"
                     InitiallyExpanded="false"
                     HelperText="Add conditions for who can score points (e.g: Driver must at least drive xx% race distance...)">
        <FilterTable Filters="Config.FiltersForPoints" OnRowClick="OnFilterRowClick" />
        <MudListItem Icon="@Icons.Material.Filled.Add" IconColor="Color.Tertiary">
            <MudText Color="Color.Tertiary">Add Filter</MudText>
        </MudListItem>
    </SettingsSection>
</SettingsTopSection>

@code {
    [CascadingParameter] public IEnumerable<MemberModel> LeagueMembers { get; set; } = default!;
    [CascadingParameter] public IEnumerable<TeamModel> Teams { get; set; } = default!;
    [Parameter, EditorRequired] public ResultConfigViewModel Config { get; set; } = default!;
    [Parameter] public bool AllowEditName { get; set; } = false;

    private bool EnableHeatRaces { get; set; }
    private bool filtersExpanded = false;

    private IEnumerable<SortOptions> PointsSortOptions
    {
        get => Config.Scorings.FirstOrDefault()?.PointRule.PointsSortOptions ?? Array.Empty<SortOptions>();
        set
        {
            var list = value.ToList();
            foreach (var scoring in Config.Scorings)
            {
                scoring.PointRule.PointsSortOptions = list;
            }
        }
    }

    private IEnumerable<SortOptions> FinalSortOptions
    {
        get => Config.Scorings.FirstOrDefault()?.PointRule.FinalSortOptions ?? Array.Empty<SortOptions>();
        set
        {
            var list = value.ToList();
            foreach (var scoring in Config.Scorings)
            {
                scoring.PointRule.FinalSortOptions = list;
            }
        }
    }

    private enum SortOptionsSelect
    {
        Points,
        Final,
    };

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        BlazorParameterNullException.ThrowIfNull(this, LeagueMembers, cascading: true);
        BlazorParameterNullException.ThrowIfNull(this, Teams, cascading: true);
        BlazorParameterNullException.ThrowIfNull(this, Config);

        EnableHeatRaces = Config.RaceCount > 1;
    }

    private async Task NameClick()
    {
        var parameters = new DialogParameters<DisplayNameDialog>()
        {
            { x => x.Value, (Config.Name, Config.DisplayName) },
        };
        var result = await DialogService.Show<DisplayNameDialog>("", parameters).Result;
        if (!result.Canceled)
        {
            (Config.Name, Config.DisplayName) = ((string, string))result.Data;
        }
    }

    private async Task OnFilterRowClick(ResultFilterModel filter)
    {
        var parameters = new DialogParameters<FilterDialog>()
        {
            { x => x.Value, ModelHelper.CopyModel(filter) },
            { x => x.OnSubmit, (x, c) => { filter.Condition = x.Condition; return Task.FromResult(true); } },
            { x => x.LeagueMembers, LeagueMembers },
            { x => x.Teams, Teams },
        };
        var dialog = await DialogService.Show<FilterDialog>("Edit Condition", parameters).Result;
    }
}
