@using iRLeagueApiCore.Common.Enums
@using iRLeagueApiCore.Common.Models
@using iRLeagueManager.Web.ViewModels
@inherits MvvmComponentBase
@inject ResultConfigSettingsViewModel vm
@inject LeagueApiService apiService
@inject ILogger<ResultSettings> logger

<div @attributes=AdditionalAttributes>
    <div class="card my-2 pb-0">
        <div class="card-header">
            Result Configurations
        </div>
        <div class="list-group-flush">
            @foreach((var config, var index) in @Bind(vm, x => x.ResultsConfigs).Select((x, i) => (x, i)))
            {
                <div class="list-group-item list-group-item-action d-flex justify-content-between align-items-start" type="button" @onclick=@(() => OnResultConfigClick(config))>
                    <ResultConfigPreview ResultConfig=config />
                    <button class="btn btn-outline-danger" @onclick=@(() => OnDeleteResultConfigClick(config)) @onclick:stopPropagation="true">
                        <span class="oi oi-trash"/>
                    </button>
                </div>
            }
        </div>
    </div>
    <button class="btn btn-outline-secondary" @onclick=OnAddConfigurationClick>Add Configuration</button>
</div>

@code {
    [CascadingParameter]
    public IModalService ModalService { get; set; } = default!;

    [Parameter(CaptureUnmatchedValues = true)] 
    public IReadOnlyDictionary<string, object>? AdditionalAttributes { get; set; }

    private async Task HandleSubmit()
    {
        logger.LogInformation("Handle submit called!");
        if (vm.Selected == null)
        {
            return;
        }
        //await vm.Selected.SaveCurrentModelAsync();
        await Task.FromResult(true);
    }

    private async Task OnResultConfigClick(ResultConfigViewModel config)
    {
        var parameters = new ModalParameters<EditResultConfigModal>()
            .Add(x => x.Model, config.CopyModel())
            .Add(x => x.OnSubmit, new(async (vm, ct) => await vm.SaveChangesAsync(ct)));
        var options = new ModalOptions()
        {
            DisableBackgroundCancel = true,
            Size = ModalSize.Large,
        };
        var result = await ModalService.Show<EditResultConfigModal>("Edit Result Config", parameters, options).Result;
        if (result.Confirmed && result.Data is ResultConfigModel model)
        {
            config.SetModel(model);
        }
    }

    private async Task OnDeleteResultConfigClick(ResultConfigViewModel config)
    {
        var parameters = new ModalParameters<ConfirmModal>()
            .Add(x => x.Text, $"Really delete result config \"{config.Name}\"?")
            .Add(x => x.ButtonTypes, ButtonTypes.YesNo);
        var result = await ModalService.Show<ConfirmModal>("Delete Result Config", parameters).Result;
        if (result.Confirmed)
        {
            await vm.DeleteConfiguration(config);   
        }
    }

    private async Task OnAddConfigurationClick()
    {
        var parameters = new ModalParameters<EditResultConfigModal>()
            .Add(x => x.Model, CreateConfigFromTemplate())
            .Add(x => x.OnSubmit, new(async (config, ct) => await vm.AddConfiguration(config.GetModel())));
        var options = new ModalOptions()
        {
            DisableBackgroundCancel = true,
            Size = ModalSize.Large,
        };
        var result = await ModalService.Show<EditResultConfigModal>("Add Config", parameters, options).Result;
    }

    private ResultConfigModel CreateConfigFromTemplate()
    {
        return new()
        {
            Name = "New Config",
            DisplayName = "New Config",
            Scorings = new List<ScoringModel>()
            {
                new()
                {
                    Name = "Race",
                    PointRule = new()
                    {
                        PointsSortOptions = new[] { SortOptions.IntvlAsc },
                        FinalSortOptions = new[] { SortOptions.TotalPtsDesc, SortOptions.PenPtsAsc }
                    }
                }
            },
            StandingConfig = new()
            {
                WeeksCounted = 8,
            },
        };
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender == false)
        {
            return;
        }
        if (apiService.CurrentLeague != null)
        {
            await vm.LoadFromLeagueAsync();
        }
        await InvokeAsync(StateHasChanged);
    }
}
