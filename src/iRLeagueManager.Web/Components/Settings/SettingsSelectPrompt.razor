@namespace iRLeagueManager.Web.Components
@inherits SettingBase
@typeparam T
@inject IDialogService DialogService

<SettingsItem Class="@Class"
              Label="@Label"
              Text="@ValueString"
              HelperText="@HelperText"
              ChildContent="ChildContent!"
              Icon="@Icon"
              IconSize="IconSize"
              IconColor="IconColor"
              OnClick="Click"
              Disabled="Disabled"
              Delete="Delete" />

@code {
    [Parameter, EditorRequired] public T Value { get; set; } = default!;
    [Parameter] public string DialogHeader { get; set; } = string.Empty;
    [Parameter] public EventCallback Delete { get; set; }
    [Parameter] public EventCallback<T> ValueChanged { get; set; }
    [Parameter] public Func<T, string> ToStringFunc { get; set; } = value => value?.ToString() ?? string.Empty;
    [Parameter] public IEnumerable<T> Items { get; set; } = Array.Empty<T>();
    [Parameter] public RenderFragment<T> ItemTemplate { get; set; } = default!;
    [Parameter] public bool Clearable { get; set; } = false;
    [Parameter] public string Placeholder { get; set; } = string.Empty;

    private string ValueString => ToStringFunc(Value) ?? Placeholder;

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
    }

    private async Task Click()
    {
        var parameters = new DialogParameters<SelectPromptDialog<T>>()
        {
            { x => x.Value, Value },
            { x => x.Label, Label },
            { x => x.HelperText, HelperText },
            { x => x.Items, Items },
            { x => x.ItemTemplate, ItemTemplate },
            { x => x.ToStringFunc, ToStringFunc },
            { x => x.Clearable, Clearable },
            { x => x.Placeholder, Placeholder },
        };

        var options = new DialogOptions()
            {
                NoHeader = string.IsNullOrEmpty(DialogHeader),
            };

        var result = await (await DialogService.ShowAsync<SelectPromptDialog<T>>(DialogHeader, parameters: parameters, options: options)).Result;
        if (result?.Canceled == false)
        {
            await ValueChanged.InvokeAsync((T?)result.Data);
        }
    }
}
