@using iRLeagueApiCore.Common.Models.Standings
<div @attributes=AdditionalAttributes>
     <div class="card my-2" id="standings">
        <div class="card-header">
            @Standing.Name
        </div>
        <div class="card-body overflow-auto p-1">
            @{
                var showDriver = HasDriver(Standing.StandingRows) && Standing.IsTeamStanding == false;
                var hasTeam = HasTeam(Standing.StandingRows);
            }
            <ResultTable Data="@Standing.StandingRows">
                <HeaderTemplate>
                    <ResultTableHeader Text="Pos" Sort="@(x => x.Position)" Default=true />
                    @if (showDriver)
                    {
                        <ResultTableHeader Text="Driver" Sort="@(x => x.Firstname)"/>
                    }
                    @if (hasTeam)
                    {
                        <ResultTableHeader Text="Team" Sort="@(x => x.TeamName)" />
                    }
                    <ResultTableHeader Text="RacePoints" Sort="@(x => x.RacePoints)" Direction="SortDirection.Descending" />
                    <ResultTableHeader Text="Penalties" Sort="@(x => x.PenaltyPoints)" />
                    <ResultTableHeader Text="Total Points" Sort="@(x => x.TotalPoints)" Direction="SortDirection.Descending" />
                    <ResultTableHeader Text="Races" Sort="@(x => x.Races)" Direction="SortDirection.Descending" />
                    <ResultTableHeader Text="Poles" Sort="@(x => x.PolePositions)" Direction="SortDirection.Descending" />
                    <ResultTableHeader Text="Wins" Sort="@(x => x.Wins)" Direction="SortDirection.Descending" />
                    <ResultTableHeader Text="Podiums" Sort="@(x => x.Top3)" Direction="SortDirection.Descending" />
                    <ResultTableHeader Text="Incidents" Sort="@(x => x.Incidents)" />
                </HeaderTemplate>
                <RowTemplate Context=Row>
                    <td><ValueChange Value=Row.Position Change=Row.PositionChange /></td>
                    @if (showDriver)
                    {
                        <td>@Row.Firstname @Row.Lastname</td>
                    }
                    @if (hasTeam)
                    {
                        <td style="color:@Row.TeamColor">@Row.TeamName</td>
                    }
                    <td><ValueChange Value=Row.RacePoints Change=Row.RacePointsChange /></td>
                    <td style="@(@Row.PenaltyPoints != 0 ? "color:red" : "")">
                        @(Row.PenaltyPoints != 0 ? "-" : "")@Row.PenaltyPoints
                    </td>
                    <td><ValueChange Value=Row.TotalPoints Change=Row.TotalPointsChange /></td>
                    <td>
                        @Row.RacesCounted@(Row.RacesCounted != Row.Races ? $" ({Row.Races})" : "")
                    </td>
                    <td><ValueChange Value=Row.PolePositions Change=Row.PolePositionsChange /></td>
                    <td><ValueChange Value=Row.Wins Change=Row.WinsChange /></td>
                    <td>@Row.Top3</td>
                    <td>@Row.Incidents</td>
                </RowTemplate>
            </ResultTable>
        </div>
    </div>
</div>

@code {
    [Parameter(CaptureUnmatchedValues = true)]
    public IDictionary<string, object>? AdditionalAttributes { get; set; }
    [Parameter, EditorRequired]
    public StandingsModel Standing { get; set; } = default!;

    private bool HasDriver(IEnumerable<StandingRowModel> rows)
    {
        return rows.Any(x => x.MemberId != null);
    }

    private bool HasTeam(IEnumerable<StandingRowModel> rows)
    {
        return rows.Any(x => x.TeamId != null);
    }
}
