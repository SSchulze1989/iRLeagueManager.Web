@page "/CreateLeague"
@using System.Text.RegularExpressions
@using iRLeagueApiCore.Common.Models
@using iRLeagueManager.Web.Components
@inject LeaguesViewModel Vm
@inject NavigationManager NavigationManager

<div class="container-xxl" style="max-width:790px">    
    <div class="card">
        <div class="card-header">
            <h5>Create new League</h5>
        </div>
        <div class="card-body">
            <EditForm Model=@Model OnValidSubmit=Submit>
                <StatusResultValidator @ref=ResultValidator />
                <div class="form-group mb-3">
                    <label>Name</label>
                    <InputText @bind-Value="SetLongName" class="form-control" />
                    <label class="form-text">Full name to be displayed on pages</label>
                    <ValidationMessage For="@(() => Model.NameFull)" />
                </div>
                <div class="form-group mb-3">
                    <label>Strong Name</label>
                    <InputText @bind-Value="SetShortName" class="form-control" placeholder="@GetShortNameFromFullName(Model.NameFull)"/>
                    <label class="form-text">
                        Pick a short and unique indentifiying name of the league. This will later be used as part of html routes and shareable links <br/>
                        e.g: https://irleaguemanager.net/@Model.Name/results
                    </label>
                    <ValidationMessage For="@(() => Model.Name)" />
                </div>
                <button class="btn btn-primary w-100" type="submit" disabled="@Vm.Loading">
                    @if (Vm.Loading == true)
                    {
                        <span class="spinner-border spinner-border-sm mr-1"></span>
                    }
                    Create
                </button>
            </EditForm>
        </div>
    </div>
</div>

@code {
    [CascadingParameter]
    private IModalService ModalService { get; set; } = default!;
    private StatusResultValidator? ResultValidator { get; set; }

    private PostLeagueModel Model { get; set; } = new();

    private enum TemplateType
    {
        Empty,
        SingleDriver,
        SingleDriverTeam,
        MultiDriver,
    }

    private TemplateType TemplateSelect { get; set; } = TemplateType.Empty;

    private string? setShortName;
    private string? SetShortName 
    {
        get => setShortName; 
        set
        {
            setShortName = value;
            if (string.IsNullOrEmpty(value))
            {
                Model.Name = GetShortNameFromFullName(Model.NameFull);
                return;
            }
            Model.Name = value;
        }
    }

    private string SetLongName
    {
        get => Model.NameFull;
        set 
        {
            Model.NameFull = value;
            if (string.IsNullOrEmpty(SetShortName))
            {
                Model.Name = GetShortNameFromFullName(Model.NameFull);
            }
        }
    }

    protected override void OnParametersSet()
    {
        BlazorParameterNullException.ThrowIfNull(this, ModalService);
    }

    private string GetShortNameFromFullName(string fullName)
    {
        return Regex.Replace(fullName, @"[^0-9a-zA-Z-_ ]+", "")
            .Replace(' ', '-')
            .RegexReplace("(-)\\1+", "$1")
            .ToLower();
    }

    //private async Task<StatusResult> ApplyDefaultTemplate(LeagueModel model)
    //{
    //    var league = Provider.GetRequiredService<LeagueViewModel>();
    //    league.SetModel(model);
    //    var newSeason = new PostSeasonModel()
    //    {
    //        SeasonName = "Season 1",
    //        Finished = false,
    //        HideComments = false,
    //    };
    //    return await league.AddSeason(newSeason);
    //}

    private async Task Submit()
    {
        var leagueResult = await Vm.AddLeague(Model);
        if (leagueResult.IsSuccess == false || leagueResult.Content is null)
        {
            ResultValidator?.ValidateResult(leagueResult);
            return;
        }
        var league = leagueResult.Content;

        // forward to new league settings page
        NavigationManager.NavigateTo($"{league.Name}/Settings/League", forceLoad: true);
    }
}
