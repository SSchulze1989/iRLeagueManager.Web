@page "/CreateLeague"
@using System.Text.RegularExpressions
@using System.ComponentModel
@using iRLeagueApiCore.Common.Models
@using iRLeagueManager.Web.Components
@inherits UtilityComponentBase
@inject LeaguesViewModel Vm
@attribute [Authorize]

<MudContainer MaxWidth="MaxWidth.Medium">
    <LoadingHeader>
        <HeaderText>
            <MudText Typo="Typo.h5">
                Create new League
            </MudText>
        </HeaderText>
    </LoadingHeader>

    <EditForm Model=@Model OnValidSubmit=Submit>
        <StatusResultValidator @ref=ResultValidator />
        <MudCard Elevation="5">
            <MudCardContent>
                <MudStack Spacing="2">
                    <MudTextField Label="Name"
                                  HelperText="Full name to be displayed on pages"
                                  @bind-Value="SetLongName"
                                  For="@(() => Model.NameFull)"
                                  Variant="Variant.Outlined" />
                    <MudTextField Label="Strong Name"
                                  HelperText="@($@" Pick a short and unique indentifiying name of the league. This will later be used as part of html routes and shareable links
                                  e.g: https://irleaguemanager.net/{Model.Name}/results")"
                                  @bind-Value="Model.Name"
                                  For="@(() => Model.Name)"
                                  Variant="Variant.Outlined" />
                    <ValidationMessage For="@(() => Model.User)" />
                </MudStack>
            </MudCardContent>
            <MudCardActions>
                <ProgressButton Loading="Vm.Loading" Disabled="Vm.Loading" Color="Color.Primary" ButtonType="ButtonType.Submit">
                    Create
                </ProgressButton>
            </MudCardActions>
        </MudCard>
    </EditForm>
</MudContainer>

@code {
    private StatusResultValidator? ResultValidator { get; set; }

    private class CreateLeagueModel : PostLeagueModel
    {
        public object? User { get; set; }
    }

    private CreateLeagueModel Model { get; set; } = new()
        {
            LeaguePublic = iRLeagueApiCore.Common.Enums.LeaguePublicSetting.PublicHidden,
        };

    private PropertyChangedEventHandler
    _vmChangedHandler;

    private enum TemplateType
    {
        Empty,
        SingleDriver,
        SingleDriverTeam,
        MultiDriver,
    }

    private TemplateType TemplateSelect { get; set; } = TemplateType.Empty;

    private string? setShortName;
    private string? SetShortName
    {
        get => setShortName;
        set
        {
            setShortName = value;
            if (string.IsNullOrEmpty(value))
            {
                Model.Name = GetShortNameFromFullName(Model.NameFull);
                return;
            }
            Model.Name = value;
        }
    }

    private string SetLongName
    {
        get => Model.NameFull;
        set
        {
            Model.NameFull = value;
            if (string.IsNullOrEmpty(SetShortName))
            {
                Model.Name = GetShortNameFromFullName(Model.NameFull);
            }
        }
    }

    public CreateLeague()
    {
        _vmChangedHandler = (sender, e) => InvokeAsync(StateHasChanged);
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        Vm.PropertyChanged += _vmChangedHandler;
    }

    private string GetShortNameFromFullName(string fullName)
    {
        return Regex.Replace(fullName, @"[^0-9a-zA-Z-_ ]+", "")
            .Replace(' ', '-')
            .RegexReplace("(-)\\1+", "$1")
            .ToLower();
    }

    private async Task Submit()
    {
        var leagueResult = await Vm.AddLeague(Model);
        if (leagueResult.IsSuccess == false || leagueResult.Content is null)
        {
            ResultValidator?.ValidateResult(leagueResult);
            return;
        }
        var league = leagueResult.Content;

        // forward to new league settings page
        NavigationManager.NavigateTo($"{league.Name}/Settings/League", forceLoad: true);
    }

    protected override void Dispose(bool disposing)
    {
        if (disposing)
        {
            Vm.PropertyChanged -= _vmChangedHandler;
        }
        base.Dispose(disposing);
    }
}
