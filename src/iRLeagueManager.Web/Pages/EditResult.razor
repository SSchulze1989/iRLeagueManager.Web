@namespace iRLeagueManager.Web.Pages
@page "/{LeagueName}/Results/Events/{EventId:long}/Edit"
@using System.Reflection
@using System.Linq.Expressions
@using iRLeagueApiCore.Common.Models
@inherits LeagueComponentBase
@inject EditResultViewModel Result
@inject IDialogService DialogService

<PageTitle>
    Edit Result - @LeagueName
</PageTitle>

<MudContainer MaxWidth="MaxWidth.ExtraLarge">
    <LoadingHeader Loading=@Bind(Result, x => x.Loading)>
        <HeaderText>
            <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="0" Style="margin-left: -0.5em">
                <MudIconButton Icon="@Icons.Material.Filled.ArrowBack" Href="@($"/{LeagueName}/Results/Events/{EventId}")" />
                <MudText Typo="Typo.h5">Edit Result</MudText>
            </MudStack>
        </HeaderText>
    </LoadingHeader>

    <MudAlert Severity="Severity.Warning">
        Editing the raw results cannot be undone automatically after clicking "Save". Please take care when editing your leagues results.
    </MudAlert>

    @foreach (var sessionResult in Result.SessionResults.AsEnumerable().Reverse())
    {
        var sessionName = Event?.Sessions.FirstOrDefault(x => x.SessionId == sessionResult.SessionId)?.Name;
        <MudElement HtmlTag="div" Class="mt-3">
            <MudText Typo="Typo.h6">@sessionName</MudText>
            <EditResultTable SessionResult="sessionResult" Members="Result.Members" />
            @if (sessionResult.HasChanges)
            {
                <MudStack Row="true" Spacing="2" Justify="Justify.FlexEnd" Class="m-2">
                    <MudButton Color="Color.Primary"
                    Variant="Variant.Filled"
                    Size="Size.Large"
                    Onclick="@(async () => await SaveSessionResult(sessionResult))">
                        Save
                    </MudButton>
                    <MudButton Color="Color.Secondary"
                    Variant="Variant.Outlined"
                    Size="Size.Large"
                    OnClick="@(() => sessionResult.Reset())">
                        Reset
                    </MudButton>
                </MudStack>
            }
        </MudElement>
    }
</MudContainer>

@code {
    protected override void OnInitialized()
    {
        base.OnInitialized();
        Result.HasChanged += OnResultChanged;
    }

    private void OnResultChanged(object? sender, EventArgs e)
    {
        InvokeAsync(StateHasChanged);
    }

    protected override async Task OnEventChangedAsync(EventViewModel? @event)
    {
        if (@event is null)
        {
            Result.SetModel(new());
            return;
        }
        await Result.Load(@event.EventId);
    }

    protected override void Dispose(bool disposing)
    {
        Result.HasChanged -= OnResultChanged;
        base.Dispose(disposing);
    }

    private async Task SaveSessionResult(RawSessionResultViewModel sessionResult)
    {
        if (Event is null)
        {
            return;
        }
        var status = await sessionResult.SaveAsync(Event.EventId, CancellationToken);
        if (!status.IsSuccess)
        {
            return;
        }

        var dialogParameters = new DialogParameters<ConfirmDialog>()
        {
            { x => x.ButtonTypes, ButtonTypes.YesNo },
        };
        var confirmDialog = await DialogService.Show<ConfirmDialog>("Calculate results?", dialogParameters).Result;
        if (confirmDialog?.Canceled != false) 
        {
            return;
        }
        await Result.CalculateResults(CancellationToken);
    }
}
