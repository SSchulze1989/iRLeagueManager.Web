@page "/member/login"
@using System.ComponentModel.DataAnnotations
@using iRLeagueApiCore.Client
@using iRLeagueApiCore.Client.Http
@using iRLeagueManager.Web.Extensions
@inject IConfiguration configuration
@inject ITokenStore tokenStore
@inject ILeagueApiClient ApiClient
@inject NavigationManager NavigationManager
@attribute [AllowAnonymous]

<div class="container-sm" style="max-width: 790px;">
    <div class="card">
        <h4 class="card-header">Login</h4>
        <div class="card-body">
            <EditForm Model=@model OnValidSubmit="OnValidSubmit">
                <DataAnnotationsValidator />
                <StatusResultValidator @ref=ResultValidator />
                <div class="form-group mb-3">
                    <label>Username</label>
                    <InputText @bind-Value="model.Username" class="form-control" />
                    <ValidationMessage For="@(() => model.Username)" />
                </div>
                <div class="form-group mb-3">
                    <label>Password</label>
                    <InputText @bind-Value="model.Password" type="password" class="form-control" />
                    <ValidationMessage For="@(() => model.Password)" />
                </div>
                <button disabled="@loading" class="btn btn-primary mb-3">
                    @if (loading) 
                    {
                        <span class="spinner-border spinner-border-sm mr-1"></span>
                    }
                    Login
                </button>
            </EditForm>
            <a href="./member/PasswordReset">Forgot password</a>
        </div>
    </div>
</div>

@code {
    public record User
    {
        [Required]
        public string Username { get; set; } = string.Empty;
        [Required]
        public string Password { get; set; } = string.Empty;
    }

    private bool loading;
    public bool Loading { get => loading; set { loading = value; InvokeAsync(StateHasChanged); } }

    private StatusResultValidator ResultValidator { get; set; } = default!;

    public User model = new User();

    protected override void OnInitialized()
    {
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (string.IsNullOrEmpty(await tokenStore.GetTokenAsync()) == false)
        {
            var returnUrl = NavigationManager.QueryString("returnUrl") ?? "";
            NavigationManager.NavigateTo(returnUrl);
        }

#if DEBUG
    //if (firstRender && configuration["DefaultUser"] != null)
    //{
    //model.Username = configuration["DefaultUser"];
    //model.Password = configuration["DefaultPassword"];
    //await OnValidSubmit();
    //return;
    //}
#endif
    }

    public async Task OnValidSubmit()
    {
        if (ApiClient.IsLoggedIn == false)
        {
            try 
            {
                Loading = true;
                var result = await ApiClient.LogIn(model.Username, model.Password);
                if (result.Success == false)
                {
                    ResultValidator.ValidateResult(result.ToStatusResult());
                    return;
                }
                var returnUrl = NavigationManager.QueryString("returnUrl") ?? "";
                NavigationManager.NavigateTo(returnUrl);
            }
            finally
            {
                Loading = false;
            }
        }
    }
}