@page "/member/{UserId}/SetPassword/{ResetToken}"
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.WebUtilities
@using System.Text
@inject NavigationManager NavigationManager
@inject LeagueApiService ApiService
@attribute [AllowAnonymous]

<div class="container-sm" style="max-width: 790px;">
    @if (Success)
    {
        <p>
            Your password was successfully set. <br/>You can now try to <a href="./member/Login">login</a> again.
        </p>
    }
    else
    {
        <div class="card">
            <h4 class="card-header">Set new Password</h4>
            <div class="card-body">
                <EditForm Model=@model OnValidSubmit="OnValidSubmit">
                    <DataAnnotationsValidator />
                    <StatusResultValidator @ref=ResultValidator />
                    <div class="form-group mb-3">
                        <label>New Password</label>
                        <InputText @bind-Value="model.NewPassword" type="password" class="form-control" />
                        <ValidationMessage For="@(() => model.NewPassword)" />
                    </div>
                    <div class="form-group mb-3">
                        <label>Confirm</label>
                        <InputText @bind-Value="model.ConfirmPassword" type="password" class="form-control" />
                        <ValidationMessage For="@(() => model.ConfirmPassword)" />
                    </div>
                    <FormValidationMessage TValue=string Message=@ResultValidator?.ErrorMessage />
                    <button disabled="@Loading" class="btn btn-primary">
                        @if (Loading) 
                        {
                            <span class="spinner-border spinner-border-sm mr-1"></span>
                        }
                        Set Password
                    </button>

                </EditForm>
            </div>
        </div>
    }
</div>

@code {
    [Parameter]
    public string UserId { get; set; } = string.Empty;
    [Parameter]
    public string ResetToken { get; set; } = string.Empty;

    private bool Loading { get; set; }

    private bool Success { get; set; }

    private StatusResultValidator? ResultValidator { get; set; }

    public record SetPassword
    {
        [Required]
        public string? NewPassword { get; set; }
        [Required]
        [Compare(nameof(NewPassword), ErrorMessage = "Confirmed password is not the same")]
        public string? ConfirmPassword { get; set; }
    }

    private SetPassword model { get; } = new();

    protected override void OnParametersSet()
    {
        _ = UserId ?? throw BlazorParameterNullException.New(this, UserId);
        _ = ResetToken ?? throw BlazorParameterNullException.New(this, ResetToken);
    }

    private async Task OnValidSubmit()
    {
        try 
        {
            Loading = true;
            var token = Encoding.UTF8.GetString(WebEncoders.Base64UrlDecode(ResetToken));
            var requestUrl = $"Authenticate/SetPassword/{UserId}";
            var request = ApiService.Client.CustomEndpoint<object>(requestUrl)
                .Post(new { PasswordToken = token, NewPassword = model.NewPassword});
            var result = await request;
            if (result.Success == false)
            {
                ResultValidator?.ValidateResult(result.ToStatusResult());
                return;
            }
            Success = true;
        }
        finally
        {
            Loading = false;
        }
    }
}
