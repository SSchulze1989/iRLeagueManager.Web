@page "/member/PasswordReset"
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.WebUtilities
@using System.Text
@inject NavigationManager NavigationManager
@inject LeagueApiService ApiService
@attribute [AllowAnonymous]

<div class="container-sm" style="max-width: 790px;">
    @if (Success)
    {
        <p> Password reset requested. An email with a link to set a new password has been send to your email address.</p>
        <p> If you do not receive the mail immediately please wait a few minutes and check your spam folders. </p>
    }
    else
    {
        <div class="card">
            <h4 class="card-header">Request Password Reset</h4>
            <div class="card-body">
                <EditForm Model=@model OnValidSubmit="OnValidSubmit">
                    <DataAnnotationsValidator />
                    <StatusResultValidator @ref=ResultValidator />
                    <div class="form-group mb-3">
                        <label>Username</label>
                        <InputText @bind-Value="model.UserName" class="form-control" placeholder="username"/>
                        <ValidationMessage For="@(() => model.UserName)" />
                    </div>
                    <div class="form-group mb-3">
                        <label>Email</label>
                        <InputText @bind-Value="model.Email" type="email" class="form-control" placeholder="user@example.com"/>
                        <ValidationMessage For="@(() => model.Email)" />
                    </div>
                    <FormValidationMessage TValue=string Message=@ResultValidator?.ErrorMessage />
                    <button disabled="@Loading" class="btn btn-primary">
                        @if (Loading) 
                        {
                            <span class="spinner-border spinner-border-sm mr-1"></span>
                        }
                        Submit
                    </button>
                </EditForm>
            </div>
        </div>
    }
</div>

@code {
    private bool Loading { get; set; }

    private StatusResultValidator ResultValidator { get; set; } = default!;

    private bool Success { get; set; }

    public record ResetPassword
    {
        [Required]
        public string UserName { get; set; } = string.Empty;
        [Required, EmailAddress]
        public string Email { get; set; } = string.Empty;

        public string LinkUriTemplate { get; set; } = string.Empty;
    }

    private ResetPassword model { get; } = new();

    private async Task OnValidSubmit()
    {
        try 
        {
            Loading = true;
            model.LinkUriTemplate = GenerateLinkUrlTemplate();
            var requestUrl = $"Authenticate/ResetPassword";
            var request = ApiService.Client.CustomEndpoint(requestUrl)
                .Post(model);
            var result = await request;
            if (result.Success == false)
            {
                ResultValidator.ValidateResult(result.ToStatusResult());
                return;
            }
            Success = true;
        }
        catch(Exception ex)
        {
            ResultValidator.ErrorMessage = ex.Message;
        }
        finally
        {
            Loading = false;
        }
    }

    private string GenerateLinkUrlTemplate()
    {
        return $"{NavigationManager.BaseUri}member/{{userId}}/SetPassword/{{token}}";
    }
}
