@page "/memberss/{UserId}/confirm/{ConfirmationToken}"
@inject LeagueApiService ApiService
@inject NavigationManager NavigationManager

<MudContainer MaxWidth="MaxWidth.Small">
    <MudPaper Elevation="5" Class="pa-4">
        @if (Success)
        {
            <MudStack Spacing="2">
                <MudText>
                    Your email has been successfully verified.
                    You can now log into your account with your username and password.
                </MudText>
                <MudLink Href="/member/login">
                    Login
                </MudLink>
            </MudStack>
        }
        else if (Error)
        {
            <MudText>Oops, something went wrong! Please contact the administrator if you continue having problems.</MudText>
        }
        else
        {
            <MudStack Row="true" AlignItems="AlignItems.Center">
                <MudProgressCircular Size="Size.Small" Color="Color.Default" Indeterminate="true"/>
                <MudText>
                    Processing email confirmation ...
                </MudText>
            </MudStack>
        }
    </MudPaper>
</MudContainer>

@code {
    [Parameter]
    public string UserId { get; set; } = default!;
    [Parameter]
    public string ConfirmationToken { get; set; } = default!;

    private bool Success { get; set; } = false;
    private bool Error { get; set; } = false;

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        BlazorParameterNullException.ThrowIfNull(this, UserId);
        BlazorParameterNullException.ThrowIfNull(this, ConfirmationToken);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender == false)
        {
            return;
        }

        var result = await ApiService.Client
            .Users()
            .WithId(UserId)
            .ConfirmEmail(ConfirmationToken)
            .Post();
        if (result.Success)
        {
            Success = true;
            await InvokeAsync(StateHasChanged);
            await Task.Delay(3000);
            NavigationManager.NavigateTo("/member/login");
        }
        else
        {
            Error = true;
        }
        await InvokeAsync(StateHasChanged);
    }
}
