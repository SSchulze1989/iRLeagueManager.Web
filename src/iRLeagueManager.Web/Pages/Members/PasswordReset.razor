@page "/members/{UserId}/SetPassword/{ResetToken}"
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.WebUtilities
@using System.Text
@inject NavigationManager NavigationManager
@inject LeagueApiService ApiService
@attribute [AllowAnonymous]

<MudContainer MaxWidth="MaxWidth.Small">
    @if (Success)
    {
        <MudPaper Elevation="5" Class="pa-4">
            <MudText>
                Your password was successfully set.
                You can now try to <MudLink Href="members/Login">login</MudLink> again.
            </MudText>
        </MudPaper>
    }
    else
    {
        <EditForm Model=@Model OnValidSubmit="OnValidSubmit">
            <DataAnnotationsValidator />
            <StatusResultValidator @ref=ResultValidator />
            <MudCard Elevation="1">
                <MudCardHeader>
                    <CardHeaderContent>
                        <MudText Typo="Typo.h6">Set new Password</MudText>
                    </CardHeaderContent>
                </MudCardHeader>
                <MudCardContent>
                    <MudStack Spacing="2">
                        <MudTextField Label="Password"
                                  @bind-Value="@Model.NewPassword"
                                  For="@(() => Model.NewPassword)"
                                  InputType="PasswordType"
                                  Adornment="Adornment.End"
                                  AdornmentIcon="@PasswordIcon"
                                  OnAdornmentClick="ToggleShowPassword"
                                  Variant="Variant.Outlined" />
                        <MudTextField Label="Confirm Password"
                                  @bind-Value="@Model.ConfirmPassword"
                                  For="@(() => Model.ConfirmPassword)"
                                  InputType="PasswordType"
                                  Variant="Variant.Outlined" />
                        <FormValidationMessage TValue=string Message=@ResultValidator?.ErrorMessage />
                    </MudStack>
                </MudCardContent>
                <MudCardActions>
                    <MudButton ButtonType="ButtonType.Submit" Color="Color.Primary" Disabled="@Loading">
                        @if (Loading)
                        {
                            <MudProgressCircular Size="Size.Small" Class="me-2" Indeterminate="true" />
                        }
                        Set Password
                    </MudButton>
                </MudCardActions>
        </MudCard>
        </EditForm>
    }
</MudContainer>

@code {
    [Parameter]
    public string UserId { get; set; } = string.Empty;
    [Parameter]
    public string ResetToken { get; set; } = string.Empty;

    private bool Loading { get; set; }

    private bool Success { get; set; }

    private StatusResultValidator? ResultValidator { get; set; }

    private bool showPassword = false;
    private InputType PasswordType => showPassword ? InputType.Text : InputType.Password;
    private string PasswordIcon => showPassword ? Icons.Material.Filled.Visibility : Icons.Material.Filled.VisibilityOff;

    public record SetPassword
    {
        [Required]
        public string? NewPassword { get; set; }
        [Required]
        [Compare(nameof(NewPassword), ErrorMessage = "Confirmed password is not the same")]
        public string? ConfirmPassword { get; set; }
    }

    private SetPassword Model { get; } = new();

    protected override void OnParametersSet()
    {
        _ = UserId ?? throw BlazorParameterNullException.New(this, UserId);
        _ = ResetToken ?? throw BlazorParameterNullException.New(this, ResetToken);
    }

    private async Task OnValidSubmit()
    {
        try 
        {
            Loading = true;
            var token = Encoding.UTF8.GetString(WebEncoders.Base64UrlDecode(ResetToken));
            var requestUrl = $"Authenticate/SetPassword/{UserId}";
            var request = ApiService.Client.CustomEndpoint<object>(requestUrl)
                .Post(new { PasswordToken = token, NewPassword = Model.NewPassword});
            var result = await request;
            if (result.Success == false)
            {
                ResultValidator?.ValidateResult(result.ToStatusResult());
                return;
            }
            Success = true;
        }
        finally
        {
            Loading = false;
        }
    }

    private void ToggleShowPassword()
    {
        showPassword = !showPassword;
        InvokeAsync(StateHasChanged);
    }
}
