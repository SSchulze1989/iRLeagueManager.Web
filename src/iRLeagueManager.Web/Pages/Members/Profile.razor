@page "/members/{UserId}/profile"
@inject UserViewModel User;
@using iRLeagueApiCore.Common.Models.Users;

<MudContainer MaxWidth="MaxWidth.Small">
    <MudCard>
        <MudCardHeader>
            <MudText Typo="Typo.h6">User Profile</MudText>
        </MudCardHeader>
        <MudCardContent>
            <AuthorizeView Policy=@ProfileOwnerRequirement.Policy Resource=@UserId Context="AuthorizeContext">
                <Authorized>
                    <EditForm Model=@User>
                        <StatusResultValidator @ref=ResultValidator />
                        <MudStack Spacing="2">
                            <MudTextField Label="Username" Value="User.UserName" For="@(() => User.UserName)" Variant="Variant.Outlined" Disabled="true" />
                            <MudTextField Label="Firstname" @bind-Value="User.Firstname" For="@(() => User.Firstname)" Immediate="true" Variant="Variant.Outlined" />
                            <MudTextField Label="Lastname" @bind-Value="User.Lastname" For="@(() => User.Lastname)" Immediate="true" Variant="Variant.Outlined" />
                            <MudCheckBox Label="Allow other users to view your firstname & lastname" @bind-Checked="User.ShowFullname" Color="Color.Primary" LabelPosition="LabelPosition.End" />
                            <MudTextField Label="Email" @bind-Value="User.Email" For="@(() => User.Email)" Variant="Variant.Outlined" type="email" Disabled="true" />
                        </MudStack>
                    </EditForm>
                </Authorized>
            </AuthorizeView>
        </MudCardContent>
        <MudCardActions>
            <MudButton OnClick=SaveChanges Color="Color.Primary" Disabled="@(User.HasChanged == false)">
                <MudStack Row="true">
                    @if (User.Loading)
                    {
                        <MudProgressCircular Size="Size.Small" Indeterminate="true"/>
                    }
                    Save
                </MudStack>
            </MudButton>
            <MudButton OnClick="@(() => User.LoadUser(User.UserId))" Color="Color.Secondary" Disabled="@(User.HasChanged == false)">
                Reset
            </MudButton>
        </MudCardActions>
    </MudCard>
</MudContainer>

@code {
    [Parameter]
    public string UserId { get; set; } = default!;

    private StatusResultValidator? ResultValidator { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender == false)
        {
            return;
        }
        await User.LoadUser(UserId);
        await InvokeAsync(StateHasChanged);
    }

    private async Task SaveChanges()
    {
        var result = await User.SaveChangesAsync();
        if (result.IsSuccess == false)
        {
            ResultValidator?.ValidateResult(result);
        }
    }
}
