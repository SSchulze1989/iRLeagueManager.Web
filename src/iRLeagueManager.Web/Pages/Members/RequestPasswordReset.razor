@page "/members/PasswordReset"
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.WebUtilities
@using System.Text
@inject NavigationManager NavigationManager
@inject LeagueApiService ApiService
@attribute [AllowAnonymous]

<MudContainer MaxWidth="MaxWidth.Small">
    @if (Success)
    {
        <MudPaper Elevation="5" Class="pa-4">
            <MudText Class="mb-2"> Password reset requested. If a user with this email exists a link to set a new password has been sent.</MudText>
            <MudText>
                If you do not receive the mail immediately please wait a few minutes and check your spam folders.<br />
                If you continue to have trouble logging in please contact the administrator.
            </MudText>
        </MudPaper>
    }
    else
    {
        <EditForm Model=@Model OnValidSubmit="OnValidSubmit">
            <MudCard Elevation="1">
                <MudCardHeader>
                    <CardHeaderContent>
                        <MudText Typo="Typo.h6">Request Password Reset</MudText>
                    </CardHeaderContent>
                </MudCardHeader>
                <MudCardContent>
                    <DataAnnotationsValidator />
                    <StatusResultValidator @ref=ResultValidator />
                    <MudStack Spacing="2">
                        <MudTextField @bind-Value="Model.Email"
                                      Label="Email"
                                      For="@(() => Model.Email)"
                                      Placeholder="user@example.com"
                                      InputType="InputType.Email"
                                      Variant="Variant.Outlined"
                                      Adornment="Adornment.End"
                                      AdornmentIcon="@Icons.Material.Filled.AlternateEmail" />
                    </MudStack>
                    <FormValidationMessage TValue=string Message=@ResultValidator?.ErrorMessage />
                </MudCardContent>
                <MudCardActions>
                    <MudButton Disabled="@Loading" Color="Color.Primary" ButtonType="ButtonType.Submit">
                        @if (Loading)
                        {
                            <MudProgressCircular Size="Size.Small" Indeterminate="true" Class="me-2" />
                        }
                        Submit
                    </MudButton>
                </MudCardActions>
            </MudCard>
        </EditForm>
    }
</MudContainer>

@code {
    private bool Loading { get; set; }

    private StatusResultValidator? ResultValidator { get; set; }

    private bool Success { get; set; }

    public record ResetPassword
    {
        [Required, EmailAddress]
        public string Email { get; set; } = string.Empty;

        public string LinkUriTemplate { get; set; } = string.Empty;
    }

    private ResetPassword Model { get; } = new();

    private async Task<StatusResult> SubmitPasswordResetRequest(ResetPassword model)
    {
        var requestUrl = $"Authenticate/ResetPassword";
        try
        {
            Loading = true;
            var result = await ApiService.Client.CustomEndpoint<object>(requestUrl)
                .Post(model).ConfigureAwait(false);
            return result.ToStatusResult();
        }
        finally
        {
            Loading = false;
        }
    }

    private async Task OnValidSubmit()
    {
        Success = false;
        Model.LinkUriTemplate = GenerateLinkUrlTemplate();
        var result = await SubmitPasswordResetRequest(Model);
        Success = result.IsSuccess;
        ResultValidator!.ValidateResult(result);
    }

    private string GenerateLinkUrlTemplate()
    {
        return $$"""{{NavigationManager.BaseUri}}members/{userId}/SetPassword/{token}""";
    }
}
