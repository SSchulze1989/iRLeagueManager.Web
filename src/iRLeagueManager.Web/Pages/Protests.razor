@page "/{LeagueName}/Protests/Events/{EventId:long}"
@page "/{LeagueName}/Protests"
@using iRLeagueApiCore.Common.Models
@using iRLeagueManager.Web.Components
@inherits LeagueComponentBase
@inject ReviewsPageViewModel ReviewsVm
@inject ClientLocalTimeProvider ClientTime
@inject IDialogService DialogService

<PageTitle>
    Protests - @LeagueName
</PageTitle>

<MudContainer MaxWidth="MaxWidth.Medium">
    <LoadingHeader>
        <HeaderText>
            <MudText Typo="Typo.h5">
                File Protest
            </MudText>
        </HeaderText>
    </LoadingHeader>

    @if (Event is not null)
    {
        <MudText Typo="Typo.h5" Class="mb-3">
            Event: @(Event.Date.GetValueOrDefault().ToString("dd.MM.yy")): @(Event.TrackName)@(Event.ConfigName == "-" ? "" : $" - {Event.ConfigName}")
        </MudText>
    }

    @if (Success)
    {
        <MudPaper Elevation="5" Class="pa-4">
            Protest was successfully submitted!
            <a href="@($"./{LeagueName}/Reviews/Events/{EventId}?tabIndex=1")">Back to Reviews</a>
        </MudPaper>
    }
    else if (Event is not null && ReviewsVm.ProtestsEnabled)
    {
        var protestsOpenAt = Event?.End + ReviewsVm.CooldownPeriod;
        var protestsCloseAt = Event?.End + ReviewsVm.ProtestClosedAfter;
        @if (ReviewsVm.CanFileProtest(Event) == false)
        {
            @if (ClientTime.Now < protestsOpenAt)
            {
                <MudAlert Severity="Severity.Warning">
                    Protests can be filed after @protestsOpenAt.ToString();
                </MudAlert>
            }
            else if (ClientTime.Now > protestsCloseAt)
            {
                <MudAlert Severity="Severity.Warning">
                    Protest period ended on @protestsCloseAt.ToString();
                </MudAlert>
            }
        }
        else
        {
            @if (ReviewsVm.ProtestClosedAfter > TimeSpan.Zero)
            {
                <MudAlert Severity="Severity.Info">
                    Protests can be filed until @protestsCloseAt.ToString();
                </MudAlert>
            }
            <EditForm Model=Protest OnValidSubmit=Submit>
                <DataAnnotationsValidator />
                <StatusResultValidator @ref=ResultValidator />
                <MudCard Elevation="5" Class="mt-2">
                    <MudCardContent>
                        <MudStack Spacing="2">
                            <Validation For="@(() => Protest.AuthorMemberId)" Context="validation">
                                <MudAutocomplete Label="Protester"
                                                 HelperText="Who is filing this protest?"
                                                 @bind-Value="ProtestAuthor"
                                                 Clearable="true"
                                                 DebounceInterval="200"
                                                 SearchFunc="SearchMembers"
                                                 ToStringFunc="@(member => member != null ? $"{member.FirstName} {member.LastName}" : null)"
                                                 Placeholder="Search driver by name..."
                                                 Error="validation.HasError"
                                                 ErrorText="@validation.ErrorText"
                                                 Variant="Variant.Outlined"
                                                 id="protest_incident_author" />
                            </Validation>
                            <MudTextField Label="Confirm IRacing Id"
                                          HelperText="Enter your iracing user id to confirm identity"
                                          @bind-Value="Protest.ConfirmIRacingId"
                                          For="@(() => Protest.ConfirmIRacingId)"
                                          Variant="Variant.Outlined"
                                          id="protest_incident_confirmIracingId" />
                            <MudSelect Label="Session"
                                       HelperText="In which session did the incident happen?"
                                       @bind-Value="SessionId"
                                       Variant="Variant.Outlined"
                                       id="protest_incident_session">
                                @if (EventList.Selected != null)
                                {
                                    @foreach (var session in EventList.Selected.Sessions.Where(x => x.SessionType == iRLeagueApiCore.Common.Enums.SessionType.Race))
                                    {
                                        <MudSelectItem Value=@((long?)session.SessionId)>@session.Name</MudSelectItem>
                                    }
                                }
                            </MudSelect>
                            <MudGrid Spacing="2">
                                <MudItem xs="6">
                                    <MudTextField Label="Lap"
                                                  @bind-Value="Protest.OnLap"
                                                  For="@(() => Protest.OnLap)"
                                                  Variant="Variant.Outlined"
                                                  id="protest_incident_lap" />
                                </MudItem>
                                <MudItem xs="6">
                                    <MudTextField Label="Turn"
                                                  @bind-Value="Protest.Corner"
                                                  For="@(() => Protest.Corner)"
                                                  Variant="Variant.Outlined"
                                                  id="protest_incident_turn" />
                                </MudItem>
                            </MudGrid>
                            <MudTextField Label="Description"
                                          HelperText="Describe what happened in the incident"
                                          @bind-Value="Protest.FullDescription"
                                          For="@(() => Protest.FullDescription)"
                                          Lines="4"
                                          AutoGrow="true"
                                          MaxLines="12"
                                          Variant="Variant.Outlined"
                                          id="protest_incident_description" />
                            <Validation For="@(() => Protest.InvolvedMembers)" Context="validation">
                                <MultiSelectAutoComplete Label="Involved Drivers"
                                                         HelperText="Who was involved in this incident?"
                                                         Placeholder="Search driver by name..."
                                                         T="MemberInfoModel"
                                                         Values="Protest.InvolvedMembers"
                                                         ValuesChanged="@((IEnumerable<MemberInfoModel> values) => Protest.InvolvedMembers = values.ToList())"
                                                         SearchFunc="SearchMembers"
                                                         ToStringFunc="@(member => member != null ? $"{member.FirstName} {member.LastName}" : null)"
                                                         Variant="Variant.Outlined"
                                                         Error="validation.HasError"
                                                         ErrorText="@validation.ErrorText"
                                                         id="protest_incident_involvedMembers" />
                            </Validation>
                        </MudStack>
                    </MudCardContent>
                    <MudCardActions>
                        <MudButton OnClick=Submit Color="Color.Primary">
                            <MudStack Row="true">
                                @if (Bind(ReviewsVm, x => x.Loading))
                                {
                                    <MudProgressCircular Size="Size.Small" Indeterminate="true" />
                                }
                                Submit Protest
                            </MudStack>
                        </MudButton>
                    </MudCardActions>
                </MudCard>
            </EditForm>
        }
    }
</MudContainer>

@code {
    private StatusResultValidator? ResultValidator { get; set; } = default!;

    private PostProtestModel Protest { get; } = new();

    private long? SessionId { get; set; }

    private bool Success { get; set; } = false;

    private IEnumerable<MemberInfoModel> EventMembers { get; set; } = Array.Empty<MemberInfoModel>();

    private MemberInfoModel? ProtestAuthor
    {
        get => EventMembers.FirstOrDefault(x => x.MemberId == Protest.AuthorMemberId);
        set => Protest.AuthorMemberId = value?.MemberId ?? -1;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender == false || EventId == null)
        {
            return;
        }
        await ReviewsVm.LoadFromEventAsync(EventId.Value, CancellationToken);
        EventMembers = ReviewsVm.EventCars.Cars.SelectMany(x => x.Members);
    }

    private async Task<IEnumerable<MemberInfoModel?>> SearchMembers(string searchString, CancellationToken cancellationToken)
    {
        if (string.IsNullOrEmpty(searchString))
        {
            return await Task.FromResult(EventMembers);
        }

        var terms = searchString.ToLower().Split(',', ' ', ';')
        .Where(x => string.IsNullOrWhiteSpace(x) == false)
            .ToArray();
        return await Task.FromResult(EventMembers
            .Where(x => MatchMemberSearchTerms(x, terms)));
    }

    protected override async Task OnEventChangedAsync(EventViewModel? @event)
    {
        if (@event?.EventId != null)
        {
            var navUrl = $"./{LeagueName}/Protests/Events/{@event.EventId}";
            NavigationManager.NavigateTo(navUrl, replace: true);
            await ReviewsVm.LoadFromEventAsync(@event.EventId);
        }
        SessionId = @event?.Sessions.FirstOrDefault(x => x.SessionType == iRLeagueApiCore.Common.Enums.SessionType.Race)?.SessionId;
        await InvokeAsync(StateHasChanged);
    }

    private bool MatchMemberSearchTerms(MemberInfoModel member, params string[] terms)
    {
        var searchName = member.FirstName + member.LastName;
        return terms.Any(x => searchName.Contains(x, StringComparison.OrdinalIgnoreCase));
    }

    private async Task Submit()
    {
        var parameters = new DialogParameters<ConfirmDialog>()
        {
            { x => x.Text, "Please make sure you have filled out this protest correctly.\nOnce you submit it you can not delete or change it anymore." },
            { x => x.ButtonTypes, ButtonTypes.YesNo },
        };
        var confirm = await (await DialogService.ShowAsync<ConfirmDialog>("Confirm Protest", parameters)).Result;
        if (confirm is null || confirm.Canceled)
        {
            return;
        }

        if (SessionId is null)
        {
            return;
        }

        var result = await ReviewsVm.FileProtest(SessionId.Value, Protest);
        if (result.IsSuccess == false)
        {
            ResultValidator!.ValidateResult(result);
            return;
        }
        Success = true;
    }
}
