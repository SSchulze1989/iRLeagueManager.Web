@page "/{LeagueName}/Results/Events/{EventId:long}"
@page "/{LeagueName}/Results/Seasons/{SeasonId:long}"
@page "/{LeagueName}/Results"
@using System.ComponentModel
@using Microsoft.AspNetCore.WebUtilities
@using Microsoft.EntityFrameworkCore.Query
@using Microsoft.Extensions.Primitives
@using System.Linq.Expressions
@using iRLeagueApiCore.Common.Models
@using iRLeagueManager.Web.Components
@using iRLeagueManager.Web.Components.Results
@using iRLeagueManager.Web.ViewModels
@inherits LeagueComponentBase
@inject ResultsPageViewModel vm

<PageTitle>Results - @LeagueName</PageTitle>

<div class="container-xxl">
    <div class="sticky-header">
        <div class="d-flex align-items-bottom gap-2">
            <LoadingHeader Loading=@Bind(vm, x => x.Loading)>
                <h3>Results</h3>
            </LoadingHeader>
            <EventSelect class="mb-2" />
        </div>
        @if (@Bind(vm, x => x.Results)?.Count == 0)
        {
            <div class="card-body">
                <p class="results-scoring"><em>No Results</em></p>
            </div>
        }
        <div class="d-flex">
            <ul class="nav nav-tabs flex-fill">
                @foreach((var eventResult, var i) in @Bind(vm, x => x.Results).Select((x, i) => (x,i)))
                {
                    <li class="nav-item">
                        <NavLink class="nav-link" href="@GetTabLink(i)">@Bind(eventResult, x => x.Name)</NavLink>
                    </li>
                }
            </ul>
            <AuthorizeView Roles=@GetRoleString(LeagueRoles.Admin, LeagueRoles.Organizer)>
                <Authorized>
                    @if (vm.SelectedEvent?.HasResult == true && SharedState.SeasonFinished == false)
                    {
                        <button class="btn btn-outline-secondary ms-2" @onclick=TriggerCalculation>
                            Calculate
                        </button>
                        @if (vm.Results.Count > 0)
                        {
                            <button class="btn btn-outline-danger ms-2" @onclick=DeleteResultsClick>
                                <span class="oi oi-trash" />
                            </button>
                        }
                    }
                </Authorized>
            </AuthorizeView>
        </div>
    </div>

    @if (@Bind(vm, x => x.SelectedEvent) != null && @Bind(vm, x => x.SelectedEventResult) != null)
    {
        @foreach(var result in @Bind(vm.SelectedEventResult!, x => x.SessionResults).OrderByDescending(x => x.SessionNr))
        {
            <DisplayResult class="px-0 mb-2 mx-0" Result=result/>
        }
    }
    <AuthorizeView Roles=@GetRoleString(LeagueRoles.Admin, LeagueRoles.Organizer)>
        <Authorized>
            @if (SharedState.SeasonFinished == false)
            {
                <div>
                    <button class="btn btn-outline-secondary" @onclick=UploadButtonClick>Upload Result</button>
                </div>
            }
        </Authorized>
    </AuthorizeView>
</div>

@code {
    private const string resultTabParam = "resultTab";

    [CascadingParameter]
    public SharedStateService SharedState { get; set; } = default!;
    [CascadingParameter]
    public IModalService ModalService { get; set; } = default!;


    protected override async Task OnInitializedAsync()
    {
        NavigationManager.LocationChanged += OnLocationChanged;
        await Task.FromResult(true);
    }

    protected override async Task OnEventChangedAsync(EventViewModel? @event)
    {
        if (@event?.EventId != null)
        {
            var resultIndex = NavigationManager.QueryParameter<int>(resultTabParam);
            await vm.LoadFromEventAsync(@event.EventId);

            if (resultIndex >= vm.Results.Count() || resultIndex < 0)
            {
                resultIndex = 0;
            }
            var navUri = $"/{LeagueName}/Results/Events/{@event.EventId}?{resultTabParam}={resultIndex}";
            bool replace = NavigationManager.Uri.Contains($"/Events/") == false || NavigationManager.Uri.Contains(navUri);
            NavigationManager.NavigateTo(navUri, replace: replace);
        }
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        vm.SelectedResultIndex = NavigationManager.QueryParameter<int>(resultTabParam);
    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender == false) return;

        vm.SelectedResultIndex = NavigationManager.QueryParameter<int>(resultTabParam);
    }

    private void SetSelectedResultIndex(int index)
    {
        NavigationManager.NavigateTo(GetTabLink(index), replace: true);
    }

    private string GetTabLink(int index)
    {
        var url = NavigationManager.GetUriWithQueryParameter(resultTabParam, index);
        return url;
    }

    private async Task UploadButtonClick()
    {
        var @event = vm.SelectedEvent?.GetModel();
        if (@event is null)
        {
            return;
        }
        var parameters = new ModalParameters()
            .Add(nameof(UploadResultPrompt.Event), @event);
        await ModalService.Show<UploadResultPrompt>("Upload json result", parameters).Result;
    }

    private async Task TriggerCalculation()
    {
        if (vm.Loading)
        {
            return;
        }
        await vm.TriggerCalculation();
    }

    private async Task DeleteResultsClick()
    {
        var @event = vm.SelectedEvent;
        if (@event is null)
        {
            return;
        }
        var parameters = new ModalParameters()
            .Add(nameof(ConfirmModal.Text), $"Really delete result for event \"{@event.Name} - {@event.Date.ToString(@"dd.MM.yyyy")}\"?")
            .Add(nameof(ConfirmModal.ButtonTypes), ButtonTypes.YesNo);
        var result = await ModalService.Show<ConfirmModal>("Delete Results", parameters).Result;
        if (result.Confirmed)
        {
            await vm.DeleteEventResults();   
        }
    }

    protected override void Dispose(bool disposing)
    {
        if (disposing == false)
        {
            NavigationManager.LocationChanged -= OnLocationChanged;
        }
        base.Dispose(disposing);
    }
}
