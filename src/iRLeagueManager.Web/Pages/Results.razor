@namespace iRLeagueManager.Web.Pages
@page "/{LeagueName}/Results/Events/{EventId:long}"
@page "/{LeagueName}/Results/Seasons/{SeasonId:long}"
@page "/{LeagueName}/Results"
@using System.ComponentModel
@using Microsoft.AspNetCore.WebUtilities
@using Microsoft.EntityFrameworkCore.Query
@using Microsoft.Extensions.Primitives
@using System.Linq.Expressions
@using iRLeagueApiCore.Common.Models
@using iRLeagueManager.Web.Components
@using iRLeagueManager.Web.ViewModels
@inherits LeagueComponentBase
@inject ResultsPageViewModel vm
@inject IDialogService DialogService

<PageTitle>
    Results - @LeagueName
</PageTitle>

<CascadingValue Value="vm">
    <MudContainer MaxWidth="MaxWidth.ExtraLarge">
        <LoadingHeader Loading=@Bind(vm, x => x.Loading)>
            <HeaderText>
                <MudText Typo="Typo.h5">Results</MudText>
            </HeaderText>
            <HeaderActions>
                <EventSelect />
                <AuthorizeView Roles=@GetRoleString(LeagueRoles.Admin, LeagueRoles.Organizer)>
                    <Authorized>
                        <MudStack Row="true" Justify="Justify.FlexEnd" Style="flex-grow: 1">
                            @if (vm.SelectedEvent?.HasResult == true && SharedState.SeasonFinished == false)
                            {
                                <MudButton OnClick=TriggerCalculation
                                           Variant="Variant.Outlined"
                                           StartIcon="@Icons.Material.Filled.Loop">
                                    Calculate
                                </MudButton>
                                @if (vm.Results.Count > 0)
                                {
                                    <MudTooltip Text="Delete Results"
                                                Delay="0.5"
                                                Arrow="true">
                                        <MudIconButton Variant="Variant.Outlined"
                                                       Icon="@Icons.Material.Filled.Delete"
                                                       Color="@Color.Error" OnClick=DeleteResultsClick />
                                    </MudTooltip>
                                }
                            }
                        </MudStack>
                    </Authorized>
                </AuthorizeView>
            </HeaderActions>
        </LoadingHeader>

        <MudElement HtmlTag="div" Class="mt-3">
            @if (@Bind(vm, x => x.Results)?.Count == 0)
            {
                <MudPaper Elevation="5" Class="py-4 px-6">
                    <MudText Typo="Typo.h5">No Results</MudText>
                </MudPaper>
            }
            else
            {
                @if (vm.Results.Count > 1)
                {
                    <MudTabs @bind-ActivePanelIndex="@SelectedTabIndex" Elevation="2" MinimumTabWidth="@(Breakpoint is Breakpoint.Xs or Breakpoint.Sm ? "60px" : "160px")">
                        @foreach ((var eventResult, var i) in @Bind(vm, x => x.Results).Select((x, i) => (x, i)))
                        {
                            <MudTabPanel Text="@eventResult.Name">
                                <MudStack Class="gap-2 pt-2">
                                    @foreach (var result in @Bind(eventResult, x => x.SessionResults).OrderByDescending(x => x.SessionNr))
                                    {
                                        <AuthorizeView Roles="@GetRoleString(LeagueRoles.Admin, LeagueRoles.Steward)">
                                            <Authorized>
                                                <DisplayResult Result="result" CanEdit="true" />
                                            </Authorized>
                                            <NotAuthorized>
                                                <DisplayResult Result="result" />
                                            </NotAuthorized>
                                        </AuthorizeView>
                                    }
                                </MudStack>
                            </MudTabPanel>
                        }
                    </MudTabs>
                }
                else
                {
                    var eventResult = vm.Results.First();
                    <MudStack Class="gap-2">
                        @foreach (var result in @Bind(eventResult, x => x.SessionResults).OrderByDescending(x => x.SessionNr))
                        {
                            <AuthorizeView Roles="@GetRoleString(LeagueRoles.Admin, LeagueRoles.Steward)">
                                <Authorized>
                                    <DisplayResult Result="result" CanEdit="true" />
                                </Authorized>
                                <NotAuthorized>
                                    <DisplayResult Result="result" />
                                </NotAuthorized>
                            </AuthorizeView>
                        }
                    </MudStack>
                }
            }
        </MudElement>

        <AuthorizeView Roles=@GetRoleString(LeagueRoles.Admin, LeagueRoles.Organizer)>
            <Authorized>
                @if (SharedState.SeasonFinished == false)
                {
                    <MudButtonGroup Color="Color.Primary" Variant="Variant.Outlined" Class="mt-2">
                        <MudButton OnClick=UploadButtonClick>Upload Result</MudButton>
                        <MudButton OnClick="FetchResultsClick">Fetch from SubsessionId</MudButton>
                    </MudButtonGroup>
                }
            </Authorized>
        </AuthorizeView>
    </MudContainer>
</CascadingValue>

@code {
    private const string resultTabParam = "resultTab";

    private int SelectedTabIndex { get => vm.SelectedResultIndex; set => SetSelectedResultIndex(value); }

    [CascadingParameter]
    public SharedStateService SharedState { get; set; } = default!;
    [CascadingParameter]
    public Breakpoint Breakpoint { get; set; }


    protected override async Task OnInitializedAsync()
    {
        await Task.FromResult(true);
    }

    protected override async Task OnEventChangedAsync(EventViewModel? @event)
    {
        if (@event?.EventId != null)
        {
            var resultIndex = NavigationManager.QueryParameter<int>(resultTabParam);
            await vm.LoadFromEventAsync(@event.EventId);

            if (resultIndex >= vm.Results.Count() || resultIndex < 0)
            {
                resultIndex = 0;
            }
            var navUri = $"/{LeagueName}/Results/Events/{@event.EventId}?{resultTabParam}={resultIndex}";
            bool replace = NavigationManager.Uri.Contains($"/Events/") == false || NavigationManager.Uri.Contains(navUri);
            NavigationManager.NavigateTo(navUri, replace: replace);
        }
    }

    protected override void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        vm.SelectedResultIndex = NavigationManager.QueryParameter<int>(resultTabParam);
    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender == false) return;

        vm.SelectedResultIndex = NavigationManager.QueryParameter<int>(resultTabParam);
    }

    private void SetSelectedResultIndex(int index)
    {
        vm.SelectedResultIndex = index;
        NavigationManager.NavigateTo(GetTabLink(index), replace: true);
    }

    private string GetTabLink(int index)
    {
        var url = NavigationManager.GetUriWithQueryParameter(resultTabParam, index);
        return url;
    }

    private async Task UploadButtonClick()
    {
        var @event = vm.SelectedEvent?.GetModel();
        if (@event is null)
        {
            return;
        }
        var parameters = new DialogParameters<UploadResultDialog>()
        {
            { x => x.Event, @event },
        };
        var result = await DialogService.Show<UploadResultDialog>("Upload json result", parameters).Result;
        if (result.Canceled == false)
        {
            await Task.Delay(2000);
            await vm.LoadFromEventAsync(@event.Id);
        }
    }

    private async Task FetchResultsClick()
    {
        var @event = vm.SelectedEvent?.GetModel();
        if (@event is null)
        {
            return;
        }
        var parameters = new DialogParameters<FetchResultsDialog>()
        {
            { x => x.Event, @event },
        };
        var result = await DialogService.Show<FetchResultsDialog>("Fetch results from iracing subsession", parameters).Result;
        if (result.Canceled == false)
        {
            await Task.Delay(2000);
            await vm.LoadFromEventAsync(@event.Id);
        }
    }

    private async Task TriggerCalculation()
    {
        if (vm.Loading)
        {
            return;
        }
        await vm.TriggerCalculation();
    }

    private async Task DeleteResultsClick()
    {
        var @event = vm.SelectedEvent;
        if (@event is null)
        {
            return;
        }
        var parameters = new DialogParameters<ConfirmDialog>()
        {
            { x => x.Text, $"Really delete result for event \"{@event.Name} - {@event.Date.GetValueOrDefault().ToString(@"dd.MM.yyyy")}\"?" },
            { x => x.ButtonTypes, ButtonTypes.YesNo },
        };
        var result = await DialogService.Show<ConfirmDialog>("Delete Results", parameters).Result;
        if (result.Canceled == false)
        {
            await vm.DeleteEventResults();
        }
    }
}
