@namespace iRLeagueManager.Web.Pages
@page "/{LeagueName}/Results/Events/{EventId:long}"
@page "/{LeagueName}/Results/Seasons/{SeasonId:long}"
@page "/{LeagueName}/Results"
@using System.ComponentModel
@using Microsoft.AspNetCore.WebUtilities
@using Microsoft.EntityFrameworkCore.Query
@using Microsoft.Extensions.Primitives
@using System.Linq.Expressions
@using iRLeagueApiCore.Common.Models
@using iRLeagueApiCore.Common.Models.Rosters
@using iRLeagueManager.Web.Components
@using iRLeagueManager.Web.Data.CsvExporter
@using iRLeagueManager.Web.ViewModels
@inherits LeagueComponentBase
@inject ResultsPageViewModel vm
@inject IDialogService DialogService
@inject IJSRuntime JS

<PageTitle>
    Results - @LeagueName
</PageTitle>

<CascadingValue Value="vm">
    <MudContainer MaxWidth="MaxWidth.ExtraLarge">
        <LoadingHeader Loading=@Bind(vm, x => x.Loading)>
            <HeaderText>
                <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="0" Style="margin-left: -0.5em">
                    <MudMenu Icon="@Icons.Material.Outlined.Link" AnchorOrigin="Origin.BottomLeft">
                        <MudMenuItem OnClick="@(() => CopyToClipboard(GetCurrentResultLink()))">Current Result</MudMenuItem>
                        @if (Shared.SeasonName is not null)
                        {
                            <MudMenuItem OnClick="@(() => CopyToClipboard(GetCurrentSeasonLatestResultLink()))">Latest Result (@Shared.SeasonName)</MudMenuItem>
                        }
                        <MudMenuItem OnClick="@(() => CopyToClipboard(GetLatestResultLink()))">Latest Result (All seasons)</MudMenuItem>
                    </MudMenu>
                    <MudText Typo="Typo.h5">Results</MudText>
                </MudStack>
            </HeaderText>
            <HeaderActions>
                <EventSelect />
                <AuthorizeView Roles=@GetRoleString(LeagueRoles.Admin, LeagueRoles.Organizer)>
                    <Authorized>
                        <MudStack Row="true" Justify="Justify.FlexEnd" Style="flex-grow: 1">
                            <MudMenu Icon="@Icons.Material.Filled.Menu">
                                @if (vm.SelectedEvent?.HasResult == true && SharedState.SeasonFinished == false)
                                {
                                    <MudMenuItem Icon="@Icons.Material.Filled.Edit" OnClick="@(() => NavigateTo($"{GetCurrentResultLink()}/Edit"))">
                                        Edit Raw Results
                                    </MudMenuItem>
                                    <MudMenuItem Icon="@Icons.Material.Filled.Loop" OnClick="TriggerCalculation">
                                        Calculate
                                    </MudMenuItem>
                                }
                                @if (vm.Rosters.Count > 0)
                                {
                                    <MudMenuItem Icon="@Icons.Material.Filled.Download" OnClick="ExportGrid">
                                        Export Grid as CSV
                                    </MudMenuItem>
                                }
                                @if (vm.Results.Count > 1)
                                {
                                    <MudMenuItem Icon="@Icons.Material.Filled.CompareArrows" OnClick="ChangeTabOrder">
                                        Change tab order
                                    </MudMenuItem>
                                }
                                @if (vm.Results.Count > 0)
                                {
                                    <MudMenuItem Icon="@Icons.Material.Filled.Delete" IconColor="@Color.Error" OnClick=DeleteResultsClick>
                                        Clear Calculated Results
                                    </MudMenuItem>
                                }
                            </MudMenu>
                        </MudStack>
                    </Authorized>
                </AuthorizeView>
            </HeaderActions>
        </LoadingHeader>

        <MudElement HtmlTag="div" Class="mt-3">
            @if (@Bind(vm, x => x.Results)?.Count == 0)
            {
                <MudPaper Elevation="5" Class="py-4 px-6">
                    <MudText Typo="Typo.h5">No Results</MudText>
                </MudPaper>
            }
            else
            {
                @if (vm.Results.Count > 1)
                {
                    <MudTabs @bind-ActivePanelIndex="SelectedTabIndex" Elevation="2" MinimumTabWidth="@(Breakpoint is Breakpoint.Xs or Breakpoint.Sm ? "60px" : "160px")">
                        @foreach ((var eventResult, var i) in @Bind(vm, x => x.Results).Select((x, i) => (x, i)))
                        {
                            <MudTabPanel Text="@eventResult.Name">
                                <MudStack Class="gap-2 pt-2">
                                    @foreach (var result in @Bind(eventResult, x => x.SessionResults).OrderByDescending(x => x.SessionNr))
                                    {
                                        <AuthorizeView Roles="@GetRoleString(LeagueRoles.Admin, LeagueRoles.Steward)">
                                            <Authorized>
                                                <DisplayResult Result="result" CanEdit="true" />
                                            </Authorized>
                                            <NotAuthorized>
                                                <DisplayResult Result="result" />
                                            </NotAuthorized>
                                        </AuthorizeView>
                                    }
                                </MudStack>
                            </MudTabPanel>
                        }
                    </MudTabs>
                }
                else
                {
                    var eventResult = vm.Results.First();
                    <MudStack Class="gap-2">
                        @foreach (var result in @Bind(eventResult, x => x.SessionResults).OrderByDescending(x => x.SessionNr))
                        {
                            <AuthorizeView Roles="@GetRoleString(LeagueRoles.Admin, LeagueRoles.Steward)">
                                <Authorized>
                                    <DisplayResult Result="result" CanEdit="true" />
                                </Authorized>
                                <NotAuthorized>
                                    <DisplayResult Result="result" />
                                </NotAuthorized>
                            </AuthorizeView>
                        }
                    </MudStack>
                }
            }
        </MudElement>

        <AuthorizeView Roles=@GetRoleString(LeagueRoles.Admin, LeagueRoles.Organizer)>
            <Authorized>
                @if (SharedState.SeasonFinished == false)
                {
                    <MudButtonGroup Color="Color.Primary" Variant="Variant.Outlined" Class="mt-2">
                        <MudButton OnClick=UploadButtonClick>Upload Result</MudButton>
                        <MudButton OnClick="FetchResultsClick">Fetch from SubsessionId</MudButton>
                    </MudButtonGroup>
                }
            </Authorized>
        </AuthorizeView>
    </MudContainer>
</CascadingValue>

@code {
    [CascadingParameter]
    public SharedStateService SharedState { get; set; } = default!;
    [CascadingParameter]
    public Breakpoint Breakpoint { get; set; }
    private const string resultTabParam = "resultTab";
    [Parameter]
    [SupplyParameterFromQuery(Name = resultTabParam)]
    public int SelectedTabIndexParam { get; set; } = 0;

    private int selectedTabIndex;
    private int SelectedTabIndex
    {
        get => selectedTabIndex;
        set
        {
            if (selectedTabIndex != value)
            {
                selectedTabIndex = value;
                NavigationManager.NavigateTo(GetTabLink(value), replace: true);
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await Task.FromResult(true);
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        selectedTabIndex = SelectedTabIndexParam;
    }

    protected override async Task OnEventChangedAsync(EventViewModel? @event)
    {
        if (@event?.EventId != null)
        {
            await vm.LoadFromEventAsync(@event.EventId, CancellationToken);
            var resultCount = vm.Results.Count();
            if (SelectedTabIndex < 0)
            {
                selectedTabIndex = 0;
            }
            if (resultCount > 0 && selectedTabIndex >= resultCount)
            {
                selectedTabIndex = resultCount - 1;
            }
            var navUri = $"/{LeagueName}/Results/Events/{@event.EventId}";
            bool replace = NavigationManager.Uri.Contains($"/Events/") == false || NavigationManager.Uri.Contains(navUri);
            navUri = $"{navUri}?{resultTabParam}={SelectedTabIndex}";
            NavigateTo(navUri, replace: replace);
        }
    }

    private string GetTabLink(int index)
    {
        var url = NavigationManager.GetUriWithQueryParameter(resultTabParam, index);
        return url;
    }

    private async Task UploadButtonClick()
    {
        var @event = vm.SelectedEvent?.GetModel();
        if (@event is null)
        {
            return;
        }
        var parameters = new DialogParameters<UploadResultDialog>()
        {
            { x => x.Event, @event },
        };
        var result = await DialogService.Show<UploadResultDialog>("Upload json result", parameters).Result;
        if (result?.Canceled == false)
        {
            await Task.Delay(2000);
            await vm.LoadFromEventAsync(@event.Id, CancellationToken);
        }
    }

    private async Task FetchResultsClick()
    {
        var @event = vm.SelectedEvent?.GetModel();
        if (@event is null)
        {
            return;
        }
        var parameters = new DialogParameters<FetchResultsDialog>()
        {
            { x => x.Event, @event },
        };
        var result = await DialogService.Show<FetchResultsDialog>("Fetch results from iracing subsession", parameters).Result;
        if (result?.Canceled == false)
        {
            await Task.Delay(2000);
            await vm.LoadFromEventAsync(@event.Id, CancellationToken);
        }
    }

    private async Task TriggerCalculation()
    {
        if (vm.Loading)
        {
            return;
        }
        await vm.TriggerCalculation(CancellationToken);
    }

    private async Task ChangeTabOrder()
    {
        var settingsViewModel = RootServiceProvider.GetRequiredService<ResultSettingsViewModel>();
        await settingsViewModel.LoadFromCurrentSeasonAsync(CancellationToken);
        var parameters = new DialogParameters<ReorderChampionshipsDialog>() {
            { x => x.Value, settingsViewModel.CurrentChampSeasons.ToList() }
        };
        var result = await DialogService.Show<ReorderChampionshipsDialog>("Change tab order", parameters).Result;
        if (result?.Canceled == false && Event is not null)
        {
            await vm.LoadFromEventAsync(Event.EventId, CancellationToken);
        }
    }

    private async Task DeleteResultsClick()
    {
        var @event = vm.SelectedEvent;
        if (@event is null)
        {
            return;
        }
        var parameters = new DialogParameters<ConfirmDialog>()
        {
            { x => x.Text, $"Really delete result for event \"{@event.Name} - {@event.Date.GetValueOrDefault().ToString(@"dd.MM.yyyy")}\"?" },
            { x => x.ButtonTypes, ButtonTypes.YesNo },
        };
        var result = await DialogService.Show<ConfirmDialog>("Delete Results", parameters).Result;
        if (result?.Canceled == false)
        {
            await vm.DeleteEventResults(CancellationToken);
        }
    }


    private string GetLatestResultLink()
    {
        return $"{NavigationManager.BaseUri}{LeagueName}/Results";
    }

    private string GetCurrentSeasonLatestResultLink()
    {
        if (Shared.SeasonName == null)
        {
            return GetLatestResultLink();
        }
        return $"{NavigationManager.BaseUri}{LeagueName}/Results/Seasons/{Shared.SeasonId}";
    }

    private string GetCurrentResultLink()
    {
        if (Event is null)
        {
            return GetCurrentSeasonLatestResultLink();
        }
        return $"{NavigationManager.BaseUri}{LeagueName}/Results/Events/{Event.EventId}";
    }

    private async Task ExportGrid()
    {
        if (vm.Rosters is null || vm.Rosters.Count == 0)
        {
            return;
        }
        var supportedGridExporters = ScopedServices.GetServices<IGridCsvExporter>().ToDictionary(k => k.GetName(), v => v);
        var supportedRosterExporters = ScopedServices.GetServices<IRosterListCsvExporter>().ToDictionary(k => k.GetName(), v => v);
        var supportedTeamExporters = ScopedServices.GetServices<ITeamListCsvGenerator>().ToDictionary(k => k.GetName(), v => v);
        var supportedExporters = supportedGridExporters.Keys
            .Concat(supportedRosterExporters.Keys)
            .Concat(supportedTeamExporters.Keys)
            .Distinct()
            .Select(key => new
            {
                Grid = supportedGridExporters.GetValueOrDefault(key)!,
                Roster = supportedRosterExporters.GetValueOrDefault(key)!,
                Team = supportedTeamExporters.GetValueOrDefault(key)!
            })
            .Where(x => x.Grid != null && x.Roster != null && x.Team != null)
            .ToDictionary(k => k.Grid.GetName(), v => v);
        var parameters = new DialogParameters<RadioSelectPromptDialog<string>>()
        {
            {x => x.Label, "CSV Exporter"},
            {x => x.Value, supportedExporters.Keys.FirstOrDefault()},
            {x => x.Items, supportedExporters.Keys},
        };

        var result = await DialogService.Show<RadioSelectPromptDialog<string>>("Select CSV Exporter", parameters).Result;

        if (result?.Canceled != false || result.Data is not string exporter)
        {
            return;
        }

        var selectedExporters = supportedExporters.GetValueOrDefault(exporter);
        if (selectedExporters is null)
        {
            return;
        }

        using var zipStream = new MemoryStream();
        using (var archive = new System.IO.Compression.ZipArchive(zipStream, System.IO.Compression.ZipArchiveMode.Create, true))
        {
            // Export Teams
            {
                var teams = vm.Rosters
                    .SelectMany(x => x.RosterEntries)
                    .Where(x => x.TeamId != null)
                    .Select(x => new TeamModel(){
                            Name = x.TeamName,
                            TeamColor = x.TeamColor,
                            TeamId = x.TeamId!.Value,
                    })
                    .DistinctBy(x => x.TeamId)
                    .ToList();
                var csv = selectedExporters.Team.ExportCsv(teams);
                var entry = archive.CreateEntry($"event_{vm.SelectedEvent?.EventId}_teams.csv");
                using var entryStream = entry.Open();
                using var writer = new StreamWriter(entryStream);
                writer.Write(csv);
            }

            // Export Rosters
            {
                var rosterInfos = vm.Rosters.Select(x => new RosterInfoModel()
                    {
                        Description = x.Description,
                        RosterId = x.RosterId,
                        EntryCount = x.RosterEntries.Count(),
                        Name = x.Name,
                    });
                var csv = selectedExporters.Roster.ExportCsv(rosterInfos);
                var entry = archive.CreateEntry($"event_{vm.SelectedEvent?.EventId}_rosters.csv");
                using var entryStream = entry.Open();
                using var writer = new StreamWriter(entryStream);
                writer.Write(csv);
            }

            // Export Grid
            {
                var csv = selectedExporters.Grid.ExportCsv(vm.Rosters);
                var entry = archive.CreateEntry($"event_{vm.SelectedEvent?.EventId}_drivers.csv");
                using var entryStream = entry.Open();
                using var writer = new StreamWriter(entryStream);
                writer.Write(csv);
            }
        }

        zipStream.Position = 0;
        using var zipStreamRef = new DotNetStreamReference(stream: zipStream);
        await JS.InvokeVoidAsync("downloadFileFromStream", $"event_{vm.SelectedEvent?.EventId}_grid.zip", zipStreamRef);
    }
}
