@page "/{LeagueName}/Results/Events/{EventId:long}"
@page "/{LeagueName}/Results/Seasons/{SeasonId:long}"
@page "/{LeagueName}/Results"
@using System.ComponentModel
@using Microsoft.AspNetCore.WebUtilities
@using Microsoft.EntityFrameworkCore.Query
@using Microsoft.Extensions.Primitives
@using System.Linq.Expressions
@using iRLeagueApiCore.Common.Models
@using iRLeagueManager.Web.Components
@using iRLeagueManager.Web.Components.Results
@using iRLeagueManager.Web.ViewModels
@inherits LeagueComponentBase
@inject ResultsPageViewModel vm

<PageTitle>Results - @LeagueName</PageTitle>

<MudContainer MaxWidth="MaxWidth.ExtraLarge">
    <LoadingHeader Loading=@Bind(vm, x => x.Loading)>
        <HeaderText>
            <MudText Typo="Typo.h6">Results</MudText>
        </HeaderText>
        <HeaderActions>
            <EventSelect />
            <MudSpacer />
            <AuthorizeView Roles=@GetRoleString(LeagueRoles.Admin, LeagueRoles.Organizer)>
                <Authorized>
                    @if (vm.SelectedEvent?.HasResult == true && SharedState.SeasonFinished == false)
                    {
                        <MudButton OnClick=TriggerCalculation 
                                    Variant="Variant.Text">
                            Calculate
                        </MudButton>
                        @if (vm.Results.Count > 0)
                        {
                            <MudTooltip Text="Delete Results"
                                        Delay="0.5"
                                        Arrow="true">
                                <MudIconButton Variant="Variant.Text"
                                                Icon="@Icons.Material.Filled.Delete" 
                                                Color="@Color.Error" OnClick=DeleteResultsClick/>
                            </MudTooltip>
                        }
                    }
                </Authorized>
            </AuthorizeView>
        </HeaderActions>
    </LoadingHeader>


    @if (@Bind(vm, x => x.Results)?.Count == 0)
    {
        <MudPaper Elevation="1" >
            <MudText Typo="Typo.h5" Class="ma-2 ml-6">No Results</MudText>
        </MudPaper>
    }
    else
    {
        @if (vm.Results.Count > 1)
        {
            <MudTabs @bind-ActivePanelIndex="@SelectedTabIndex" Elevation="2" MinimumTabWidth="@(Breakpoint is Breakpoint.Xs or Breakpoint.Sm ? "60px" : "160px")">
                @foreach ((var eventResult, var i) in @Bind(vm, x => x.Results).Select((x, i) => (x, i)))
                {
                    <MudTabPanel Text="@eventResult.Name">
                        <MudStack Class="gap-2 pt-2">
                            @foreach (var result in @Bind(eventResult, x => x.SessionResults).OrderByDescending(x => x.SessionNr))
                            {
                                @*<MudPaper Elevation="4" >*@
                                    <AuthorizeView Roles="@GetRoleString(LeagueRoles.Admin, LeagueRoles.Steward)">
                                        <Authorized>
                                            <DisplayResult Result="result" CanEdit="true" />
                                        </Authorized>
                                        <NotAuthorized>
                                            <DisplayResult Result="result" />
                                        </NotAuthorized>
                                    </AuthorizeView>
                                @*</MudPaper>*@
                            }
                        </MudStack>
                    </MudTabPanel>
                }
            </MudTabs>
        }
        else
        {
            var eventResult = vm.Results.First();
            <MudStack Class="gap-2">
                @foreach (var result in @Bind(eventResult, x => x.SessionResults).OrderByDescending(x => x.SessionNr))
                {
                    @*<MudPaper Elevation="2" >*@
                        <AuthorizeView Roles="@GetRoleString(LeagueRoles.Admin, LeagueRoles.Steward)">
                            <Authorized>
                                <DisplayResult Result="result" CanEdit="true" />
                            </Authorized>
                            <NotAuthorized>
                                <DisplayResult Result="result" />
                            </NotAuthorized>
                        </AuthorizeView>
                    @*</MudPaper>*@
                }
            </MudStack>
        }
    }

    <AuthorizeView Roles=@GetRoleString(LeagueRoles.Admin, LeagueRoles.Organizer)>
        <Authorized>
            @if (SharedState.SeasonFinished == false)
            {
                <MudButton Color="Color.Primary" OnClick=UploadButtonClick Class="mt-2">Upload Result</MudButton>
            }
        </Authorized>
    </AuthorizeView>
</MudContainer>

@code {
    private const string resultTabParam = "resultTab";

    private int SelectedTabIndex { get => vm.SelectedResultIndex; set => SetSelectedResultIndex(value); }

    [CascadingParameter]
    public SharedStateService SharedState { get; set; } = default!;
    [CascadingParameter]
    public IModalService ModalService { get; set; } = default!;
    [CascadingParameter]
    public Breakpoint Breakpoint { get; set; }


    protected override async Task OnInitializedAsync()
    {
        await Task.FromResult(true);
    }

    protected override async Task OnEventChangedAsync(EventViewModel? @event)
    {
        if (@event?.EventId != null)
        {
            var resultIndex = NavigationManager.QueryParameter<int>(resultTabParam);
            await vm.LoadFromEventAsync(@event.EventId);

            if (resultIndex >= vm.Results.Count() || resultIndex < 0)
            {
                resultIndex = 0;
            }
            var navUri = $"/{LeagueName}/Results/Events/{@event.EventId}?{resultTabParam}={resultIndex}";
            bool replace = NavigationManager.Uri.Contains($"/Events/") == false || NavigationManager.Uri.Contains(navUri);
            NavigationManager.NavigateTo(navUri, replace: replace);
        }
    }

    protected override void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        vm.SelectedResultIndex = NavigationManager.QueryParameter<int>(resultTabParam);
    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender == false) return;

        vm.SelectedResultIndex = NavigationManager.QueryParameter<int>(resultTabParam);
    }

    private void SetSelectedResultIndex(int index)
    {
        vm.SelectedResultIndex = index;
        NavigationManager.NavigateTo(GetTabLink(index), replace: true);
    }

    private string GetTabLink(int index)
    {
        var url = NavigationManager.GetUriWithQueryParameter(resultTabParam, index);
        return url;
    }

    private async Task UploadButtonClick()
    {
        var @event = vm.SelectedEvent?.GetModel();
        if (@event is null)
        {
            return;
        }
        var parameters = new ModalParameters()
            .Add(nameof(UploadResultPrompt.Event), @event);
        await ModalService.Show<UploadResultPrompt>("Upload json result", parameters).Result;
    }

    private async Task TriggerCalculation()
    {
        if (vm.Loading)
        {
            return;
        }
        await vm.TriggerCalculation();
    }

    private async Task DeleteResultsClick()
    {
        var @event = vm.SelectedEvent;
        if (@event is null)
        {
            return;
        }
        var parameters = new ModalParameters()
            .Add(nameof(ConfirmModal.Text), $"Really delete result for event \"{@event.Name} - {@event.Date.GetValueOrDefault().ToString(@"dd.MM.yyyy")}\"?")
            .Add(nameof(ConfirmModal.ButtonTypes), ButtonTypes.YesNo);
        var result = await ModalService.Show<ConfirmModal>("Delete Results", parameters).Result;
        if (result.Confirmed)
        {
            await vm.DeleteEventResults();   
        }
    }
}
