@page "/{LeagueName}/Results/Events/{EventId:long}"
@page "/{LeagueName}/Results/Seasons/{SeasonId:long}"
@page "/{LeagueName}/Results"
@using System.ComponentModel
@using Microsoft.AspNetCore.WebUtilities
@using Microsoft.EntityFrameworkCore.Query
@using Microsoft.Extensions.Primitives
@using System.Linq.Expressions
@using iRLeagueApiCore.Common.Models
@using iRLeagueManager.Web.Components
@using iRLeagueManager.Web.ViewModels
@attribute [Authorize]
@inherits LeagueComponentBase
@inject ResultsPageViewModel vm

<LoadingHeader Loading=@Bind(vm, x => x.Loading)>Results</LoadingHeader>

<div>
    <div>
        <EventSelect class="my-2 mx-n2"/>
        @if (@Bind(vm, x => x.Results)?.Count == 0)
        {
            <div class="card-body">
                <p class="results-scoring"><em>No Results</em></p>
            </div>
        }
        <ul class="nav nav-tabs">
        @foreach((var eventResult, var i) in @Bind(vm, x => x.Results).Select((x, i) => (x,i)))
        {
            <li class="nav-item">
                <a class="nav-link @((i==Bind(vm, x => x.SelectedResultIndex)) ? "active" : "")" href="@(GetTabLink(i))">@Bind(eventResult, x => x.Name)</a>
            </li>
        }
        </ul>
    </div>
    <div>
        @if (@Bind(vm, x => x.SelectedEvent) != null && @Bind(vm, x => x.SelectedEventResult) != null)
        {
            @foreach(var result in @Bind(vm.SelectedEventResult!, x => x.SessionResults))
            {
                <div class="card my-2" id="results-session-@Bind(result, x => x.SessionName)">
                    <div class="card-header">
                        @Bind(result, x => x.SessionName)
                    </div>
                    <div class="card-body">
                        <table class="table table-sm table-striped table-hover">
                            <thead>
                                <tr>
                                    <th @onclick="() => SetOrderProperty(result, row => row.FinalPosition)">Pos.</th>
                                    <th @onclick="() => SetOrderProperty(result, row => row.FinalPositionChange)">Chg.</th>
                                    <th @onclick="() => SetOrderProperty(result, row => row.StartPosition)">Start</th>
                                    <th @onclick="() => SetOrderProperty(result, row => row.Firstname)">Name</th>
                                    <th @onclick="() => SetOrderProperty(result, row => row.TeamName)">Team</th>
                                    <th @onclick="() => SetOrderProperty(result, row => row.QualifyingTime)">Qualy Lap</th>
                                    <th @onclick="() => SetOrderProperty(result, row => row.FastestLapTime)">Fastest Lap</th>
                                    <th @onclick="() => SetOrderProperty(result, row => row.AvgLapTime)">Avg. Lap</th>
                                    <th @onclick="() => SetOrderProperty(result, row => row.Interval)">Interval</th>
                                    <th @onclick="() => SetOrderProperty(result, row => row.LeadLaps)">Laps Lead</th>
                                    <th @onclick="() => SetOrderProperty(result, row => row.CompletedLaps)">Laps Compl.</th>
                                    <th @onclick="() => SetOrderProperty(result, row => row.RacePoints)">Race Pts.</th>
                                    <th @onclick="() => SetOrderProperty(result, row => row.BonusPoints)">Bonus Pts.</th>
                                    <th @onclick="() => SetOrderProperty(result, row => row.PenaltyPoints)">Penalty</th>
                                    <th @onclick="() => SetOrderProperty(result, row => row.Incidents)">Incs.</th>
                                    <th @onclick="() => SetOrderProperty(result, row => row.TotalPoints)">Total Pts.</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach(var row in result.ResultRows)
                                {
                                    <tr>
                                        <td>@row.FinalPosition</td>
                                        <td>@row.FinalPositionChange</td>
                                        <td>@row.StartPosition</td>
                                        <td>@row.Firstname @row.Lastname</td>
                                        <td>@row.TeamName</td>
                                        <td>@row.QualifyingTime.LapTimeString()</td>
                                        <td>@row.FastestLapTime.LapTimeString() (@row.FastLapNr)</td>
                                        <td>@row.AvgLapTime.LapTimeString()</td>
                                        <td>+@row.Interval.LapTimeString()</td>
                                        <td>@row.LeadLaps</td>
                                        <td>@row.CompletedLaps</td>
                                        <td>@row.RacePoints</td>
                                        <td>@row.BonusPoints</td>
                                        <td>@row.PenaltyPoints</td>
                                        <td>@row.Incidents</td>
                                        <td>@row.TotalPoints</td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            }
        }
    </div>
</div>

@code {
    private const string resultTabParam = "resultTab";

    protected override async Task OnInitializedAsync()
    {
        NavigationManager.LocationChanged += OnLocationChanged;
        await Task.FromResult(true);
    }

    protected override async Task OnEventChangedAsync(EventViewModel? @event)
    {
        if (@event?.EventId != null)
        {
            NavigationManager.NavigateTo($"./{LeagueName}/Results/Events/{@event.EventId}");
            await vm.LoadFromEventAsync(@event.EventId);
        }
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        vm.SelectedResultIndex = NavigationManager.QueryParameter<int>(resultTabParam);
    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender == false) return;

        vm.SelectedResultIndex = NavigationManager.QueryParameter<int>(resultTabParam);
    }

    private void SetOrderProperty(SessionResultViewModel result, Expression<Func<ResultRowModel, IComparable>> selector, bool descending = false)
    {
        result.OrderByPropertySelector = selector;
    }

    private void SetSelectedResultIndex(int index)
    {
        NavigationManager.NavigateTo(GetTabLink(index));
    }

    private string GetTabLink(int index)
    {
        var url = NavigationManager.GetUriWithQueryParameter(resultTabParam, index);
        return url;
    }
}
