@page "/{LeagueName}/Reviews/Events/{EventId:long}"
@page "/{LeagueName}/Reviews/Seasons/{SeasonId:long}"
@page "/{LeagueName}/Reviews"
@using iRLeagueManager.Web.Extensions
@using iRLeagueApiCore.Common.Models.Members
@using iRLeagueApiCore.Common.Models.Reviews
@using iRLeagueManager.Web.Components
@using iRLeagueManager.Web.Components.Reviews
@using iRLeagueManager.Web.ViewModels
@attribute [Authorize]
@inherits LeagueComponentBase
@*@inherits MvvmComponentBase*@
@inject ReviewsPageViewModel ReviewsVm

<div>
    <LoadingHeader Loading=@(Bind(ReviewsVm, x => x.Loading))>Reviews</LoadingHeader>
    <EventSelect class="my-2 mx-n2"/>
    @foreach(var review in OrderReviews(@Bind(ReviewsVm, x => x.Reviews)))
    {
        <ReviewCard class="pb-2 w-75" Review=review EditClick=@(async () => await OnEditClick(review)) />
    }
</div>

@code {
    [CascadingParameter]
    public IModalService ModalService { get; set; } = default!;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
    }

    protected override async Task OnEventChangedAsync(EventViewModel? @event)
    {
        if (@event?.EventId != null)
        {
            NavigationManager.NavigateTo($"./{LeagueName}/Reviews/Events/{@event.EventId}");
            await ReviewsVm.LoadFromEventAsync(@event.EventId);
        }
    }

    private async Task OnEditClick(ReviewViewModel review)
    {
        var parameters = new ModalParameters()
            .Add(nameof(EditReviewModal.Model), review.GetModel())
            .Add(nameof(EditReviewModal.EventMembers), ReviewsVm.EventMembers);
        var options = new ModalOptions()
        {
            Size = ModalSize.Medium,
            DisableBackgroundCancel = true,
        };
        var modal = ModalService.Show<EditReviewModal>("Edit Review", parameters, options);
        var result = await modal.Result;
        if (result.Confirmed && result.Data is ReviewModel revieModel)
        {
            review.SetModel(revieModel);
        }
    }

    private IEnumerable<ReviewViewModel> OrderReviews(IEnumerable<ReviewViewModel> reviews)
    {
        return reviews.OrderBy(x => x.SessionNr)
            .ThenBy(x => x.IncidentNr.PadNumbers())
            .ThenBy(x => x.OnLap.PadNumbers())
            .ThenBy(x => x.Corner.PadNumbers());
    }
}
