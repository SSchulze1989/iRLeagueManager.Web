@page "/{LeagueName}/Reviews/Events/{EventId:long}"
@page "/{LeagueName}/Reviews/Seasons/{SeasonId:long}"
@page "/{LeagueName}/Reviews"
@using iRLeagueManager.Web.Extensions
@using iRLeagueApiCore.Common.Models.Members
@using iRLeagueApiCore.Common.Models.Reviews
@using iRLeagueManager.Web.Components
@using iRLeagueManager.Web.Components.Reviews
@using iRLeagueManager.Web.ViewModels
@attribute [Authorize]
@inherits LeagueComponentBase
@inject ReviewsPageViewModel ReviewsVm

<div>
    <LoadingHeader Loading=@(Bind(ReviewsVm, x => x.Loading))>Reviews</LoadingHeader>
    <EventSelect class="my-2 mx-n2"/>
    <CascadingValue Value=ReviewsVm.EventMembers Name=EventMembers>
        @foreach(var review in OrderReviews(@Bind(ReviewsVm, x => x.Reviews)))
        {
            <ReviewCard class="container-md px-0 mb-2 mx-0" Review=review EditClick=@(async () => await OnEditClick(review)) DeleteClick=@(async () => await OnDeleteClick(review))/>
        }
    </CascadingValue>
    <button class="btn btn-outline-secondary" type="button" @onclick=OnAddClick>Add Review</button>
</div>

@code {
    [CascadingParameter]
    public IModalService ModalService { get; set; } = default!;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
    }

    protected override async Task OnEventChangedAsync(EventViewModel? @event)
    {
        if (@event?.EventId != null)
        {
            NavigationManager.NavigateTo($"./{LeagueName}/Reviews/Events/{@event.EventId}");
            await ReviewsVm.LoadFromEventAsync(@event.EventId);
        }
    }

    private async Task OnEditClick(ReviewViewModel review)
    {
        var parameters = new ModalParameters()
            .Add(nameof(EditReviewModal.Model), review.CopyModel())
            .Add(nameof(EditReviewModal.InvolvedMembers), ReviewsVm.EventMembers)
            .Add(nameof(EditReviewModal.OnSubmit),
                new Func<ReviewViewModel, CancellationToken, Task<bool>>(async (review, cancellationToken) => await review.SaveChangesAsync(cancellationToken)));
        var options = new ModalOptions()
        {
            Size = ModalSize.Medium,
            DisableBackgroundCancel = true,
        };
        var modal = ModalService.Show<EditReviewModal>("Edit Review", parameters, options);
        var result = await modal.Result;
        if (result.Confirmed && result.Data is ReviewModel reviewModel)
        {
            review.SetModel(reviewModel);
        }
    }

    private async Task OnDeleteClick(ReviewViewModel review)
    {
        var parameters = new ModalParameters()
            .Add(nameof(ConfirmModal.Text), "Are you sure you want to delete this review?")
            .Add(nameof(ConfirmModal.ButtonTypes), ButtonTypes.YesNo);
        var confirm = await ModalService.Show<ConfirmModal>("Delete Review", parameters).Result;
        if (confirm.Cancelled)
        {
            return;
        }
        var result = await review.DeleteAsync();
        if (result == true)
        {
            ReviewsVm.Reviews.Remove(review);
        }
    }

    private async Task OnAddClick()
    {
        var parameters = new ModalParameters()
            .Add(nameof(EditReviewModal.Model), new ReviewModel())
            .Add(nameof(EditReviewModal.InvolvedMembers), ReviewsVm.EventMembers)
            .Add(nameof(EditReviewModal.OnSubmit),
                new Func<ReviewViewModel, CancellationToken, 
                    Task<bool>>(async (review, cancellationToken) => await review.AddToSessionAsync(review.SessionId.GetValueOrDefault(), cancellationToken)));
        var options = new ModalOptions()
        {
            Size = ModalSize.Medium,
            DisableBackgroundCancel = true,
        };
        var modal = ModalService.Show<EditReviewModal>("Add Review", parameters, options);
        await modal.Result;
        if (EventId != null)
        {
            await ReviewsVm.LoadFromEventAsync(EventId.Value);
        }
    }

    private IEnumerable<ReviewViewModel> OrderReviews(IEnumerable<ReviewViewModel> reviews)
    {
        return reviews.OrderBy(x => x.SessionNr)
            .ThenBy(x => x.IncidentNr.PadNumbers())
            .ThenBy(x => x.OnLap.PadNumbers())
            .ThenBy(x => x.Corner.PadNumbers());
    }
}
