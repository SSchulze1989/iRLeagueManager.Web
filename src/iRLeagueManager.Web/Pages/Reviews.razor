@page "/{LeagueName}/Reviews/Events/{EventId:long}"
@page "/{LeagueName}/Reviews/Seasons/{SeasonId:long}"
@page "/{LeagueName}/Reviews"
@using iRLeagueApiCore.Common.Models.Members
@using iRLeagueApiCore.Common.Models.Reviews
@using iRLeagueManager.Web.Components
@using iRLeagueManager.Web.Components.Reviews
@using iRLeagueManager.Web.ViewModels
@attribute [Authorize]
@inherits LeagueComponentBase
@*@inherits MvvmComponentBase*@
@inject ReviewsPageViewModel ReviewsVm

<div>
    <LoadingHeader Loading=@(Bind(ReviewsVm, x => x.Loading))>Reviews</LoadingHeader>
    <EventSelect class="my-2 mx-n2"/>
    @foreach(var review in @Bind(ReviewsVm, x => x.Reviews))
    {
        <ReviewCard class="py-2 w-75" Review=review EditClick=@(async () => await OnEditClick(review)) />
    }
</div>

@code {
    [CascadingParameter]
    public IModalService ModalService { get; set; } = default!;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
    }

    protected override async Task OnEventChangedAsync(EventViewModel? @event)
    {
        if (@event?.EventId != null)
        {
            NavigationManager.NavigateTo($"./{LeagueName}/Reviews/Events/{@event.EventId}");
            await ReviewsVm.LoadFromEventAsync(@event.EventId);
        }
    }

    private async Task OnEditClick(ReviewViewModel review)
    {
        var parameters = new ModalParameters();
        parameters.Add(nameof(ReviewCard.Review), review);
        await ModalService.Show<ReviewCard>("Edit Review", parameters).Result;
    }
}
