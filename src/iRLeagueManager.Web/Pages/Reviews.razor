@page "/{LeagueName}/Reviews/Events/{EventId:long}"
@page "/{LeagueName}/Reviews/Seasons/{SeasonId:long}"
@page "/{LeagueName}/Reviews"
@using iRLeagueManager.Web.Extensions
@using iRLeagueApiCore.Common.Models
@using iRLeagueApiCore.Common.Models.Reviews
@using iRLeagueManager.Web.Components
@using iRLeagueManager.Web.ViewModels
@inherits LeagueComponentBase
@inject ReviewsPageViewModel ReviewsVm
@inject ClientLocalTimeProvider ClientTime
@inject IDialogService DialogService

<PageTitle>
    Reviews - @LeagueName
</PageTitle>

<MudContainer MaxWidth="MaxWidth.Large">
    <LoadingHeader Loading=@Bind(ReviewsVm, x => x.Loading)>
        <HeaderText>
            <MudText Typo="Typo.h5">Reviews</MudText>
        </HeaderText>
        <HeaderActions>
            <EventSelect />
        </HeaderActions>
    </LoadingHeader>

    <MudElement HtmlTag="div" Class="mt-3">
        @if (ReviewsVm.ProtestsEnabled)
        {
            <MudTabs Elevation="2" MinimumTabWidth="@(Breakpoint is Breakpoint.Xs or Breakpoint.Sm ? "60px" : "160px")">
                <MudTabPanel Text="Reviews" OnClick="@(() => NavigateTo(GetTabLink(0)))" />
                <MudTabPanel Text="Protests" OnClick="@(() => NavigateTo(GetTabLink(1)))" />
            </MudTabs>
        }
        <CascadingValue Value=@Bind(ReviewsVm, x => x.EventCars)>
            <CascadingValue Value=ReviewsVm.LeagueUsers>
                <CascadingValue Value=ReviewsVm.LeagueUsers.AsEnumerable()>
                    <CascadingValue Value=ReviewsVm.VoteCategories.AsEnumerable()>
                        <MudStack Spacing="5" Class="py-4">
                            @switch (SelectedTabIndex)
                            {
                                case 0:
                                    @if (ReviewsVm.Reviews.Count == 0)
                                    {
                                        <MudPaper Elevation="5" Class="py-4 px-6">
                                            <MudText Typo="Typo.h5">No Reviews</MudText>
                                        </MudPaper>
                                    }
                                    <AuthorizeView Roles=@GetRoleString(LeagueRoles.Admin, LeagueRoles.Steward)>
                                        <Authorized>
                                            @foreach (var review in OrderReviews(@Bind(ReviewsVm, x => x.Reviews)))
                                            {
                                                <ReviewCard Review=review
                                                            Selected=@(review.ReviewId == SelectedReviewId)
                                                            OnEditClick=@(async () => await OnEditClick(review))
                                                            OnDeleteClick=@(async () => await OnDeleteClick(review))
                                                            IsSteward=true
                                                            ReadOnly=@ReadOnly
                                                            UserId=@UserId />
                                            }
                                            @if (ReadOnly == false)
                                            {
                                                <MudButton StartIcon="@Icons.Material.Filled.Add" Color="Color.Primary" ButtonType="ButtonType.Button" OnClick=OnAddClick>Add Review</MudButton>
                                            }
                                        </Authorized>
                                        <NotAuthorized>
                                            @foreach (var review in OrderReviews(@Bind(ReviewsVm, x => x.Reviews)))
                                            {
                                                <ReviewCard Review=review Selected=@(review.ReviewId == SelectedReviewId) />
                                            }
                                        </NotAuthorized>
                                    </AuthorizeView>
                                    break;
                                case 1:
                                    @if (ReviewsVm.Protests.Count == 0 && ReviewsVm.ProtestsPublic)
                                    {
                                        <p class="results-scoring"><em>No Protests</em></p>
                                    }
                                    <AuthorizeView Roles=@GetRoleString(LeagueRoles.Admin, LeagueRoles.Steward)>
                                        <Authorized>
                                            @foreach (var protest in @Bind(ReviewsVm, x => x.Protests))
                                            {
                                                <ProtestCard class="px-0 mb-2 mx-0"
                                                             Protest=protest
                                                             OnCreateReviewClick="@(() => OnCreateReviewFromProtestClick(protest))"
                                                             OnDeleteClick=@(() => OnProtestDeleteClick(protest)) />
                                            }
                                        </Authorized>
                                        <NotAuthorized>
                                            @foreach (var protest in @Bind(ReviewsVm, x => x.Protests))
                                            {
                                                <ProtestCard class="px-0 mb-2 mx-0" Protest=protest />
                                            }
                                        </NotAuthorized>
                                    </AuthorizeView>
                                    @if (Event is not null && Event.HasResult)
                                    {
                                        var protestsOpenAt = Event.End + ReviewsVm.CooldownPeriod;
                                        var protestsCloseAt = Event.End + ReviewsVm.ProtestClosedAfter;
                                        @if (ReviewsVm.CanFileProtest(Event))
                                        {
                                            <button class="btn btn-outline-secondary mb-3" type="button" @onclick=@(() => NavigationManager.NavigateTo($"./{LeagueName}/Protests/Events/{EventId}"))>File Protest</button>
                                            @if (ReviewsVm.ProtestClosedAfter > TimeSpan.Zero)
                                            {
                                                <div class="alert alert-info">
                                                    Protests can be filed until @protestsCloseAt.ToString();
                                                </div>
                                            }
                                        }
                                        else
                                        {
                                            @if (ClientTime.Now < protestsOpenAt)
                                            {
                                                <div class="alert alert-warning">
                                                    Protests can be filed after @protestsOpenAt.ToString();
                                                </div>
                                            }
                                            else if (ClientTime.Now > protestsCloseAt)
                                            {
                                                <div class="alert alert-warning">
                                                    Protest period ended on @protestsCloseAt.ToString();
                                                </div>
                                            }
                                        }
                                    }
                                    break;
                                default:
                                    break;
                            }
                        </MudStack>
                    </CascadingValue>
                </CascadingValue>
            </CascadingValue>
        </CascadingValue>
    </MudElement>
</MudContainer>

@code {
    [CascadingParameter]
    private Task<AuthenticationState> AuthTask { get; set; } = default!;
    [CascadingParameter]
    public Breakpoint Breakpoint { get; set; }

    private string UserId { get; set; } = string.Empty;

    private bool ReadOnly => Shared.SeasonFinished;

    private IEnumerable<VoteCategoryModel> AvailableVoteCategories = Array.Empty<VoteCategoryModel>();

    // Query parameters
    private const string tabIndexParam = "tabIndex";
    private const string reviewIdParam = "reviewId";

    private int selectedTabIndex;
    private int SelectedTabIndex
    {
        get => selectedTabIndex;
        set
        {
            if (selectedTabIndex != value)
            {
                selectedTabIndex = value;
                _ = SelectedTabChanged();
            }
        }
    }
    private long SelectedReviewId { get; set; }

    protected override void OnInitialized()
    {
        NavigationManager.LocationChanged += OnLocationChanged;
        SelectedTabIndex = NavigationManager.QueryParameter<int>(tabIndexParam);
        SelectedReviewId = NavigationManager.QueryParameter<long>(reviewIdParam);
        base.OnInitialized();
    }

    protected override async Task OnParametersSetAsync()
    {
        _ = AuthTask ?? throw BlazorParameterNullException.New(this, AuthTask);
        await SetCurrentUserId();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender == false)
        {
            return;
        }
        SelectedTabIndex = NavigationManager.QueryParameter<int>(tabIndexParam);
        SelectedReviewId = NavigationManager.QueryParameter<long>(reviewIdParam);
        await ReviewsVm.LoadUsers();
        await ReviewsVm.LoadVoteCategories();
        StateHasChanged();
    }

    protected override async Task OnEventChangedAsync(EventViewModel? @event)
    {
        if (@event?.EventId != null)
        {
            var navUrl = $"/{LeagueName}/Reviews/Events/{@event.EventId}?{NavigationManager.QueryString()}";
            navUrl = NavigationManager.GetUriWithQueryParameters(navUrl, GetQueryParameters());
            bool replace = ReplaceNavigation(navUrl);
            NavigationManager.NavigateTo(navUrl, replace: replace);
            await ReviewsVm.LoadFromEventAsync(@event.EventId);
        }
    }

    private bool ReplaceNavigation(string navUrl)
    {
        if (NavigationManager.Uri.Contains("/Events/") == false)
        {
            return true;
        }

        var urlWithoutParameters = navUrl.Split('?').First();
        var isCurrentUrlContained = NavigationManager.Uri.Contains(urlWithoutParameters);
        return isCurrentUrlContained;
    }

    private IReadOnlyDictionary<string, object?> GetQueryParameters()
    {
        return new Dictionary<string, object?>()
        {
            {tabIndexParam, SelectedTabIndex},
            {reviewIdParam, SelectedReviewId},
        };
    }

    protected override void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        SelectedTabIndex = NavigationManager.QueryParameter<int>(tabIndexParam);
        SelectedReviewId = NavigationManager.QueryParameter<long>(reviewIdParam);
        StateHasChanged();
    }

    private async Task SetCurrentUserId()
    {
        var state = await AuthTask;
        UserId = state.User.GetUserId() ?? string.Empty;
    }

    private async Task OnEditClick(ReviewViewModel review)
    {
        var parameters = new DialogParameters<EditReviewDialog>()
        {
            {x => x.Model, review.CopyModel()},
            {x => x.EventList, EventList},
            {x => x.EventCars, ReviewsVm.EventCars},
            {x => x.OnSubmit, async (review, cancellation) => await review.SaveChangesAsync(cancellation)},
        };
        var modal = DialogService.Show<EditReviewDialog>("Edit Review", parameters);
        var result = await modal.Result;
        if (result.Canceled == false && result.Data is ReviewModel reviewModel)
        {
            review.SetModel(reviewModel);
        }
    }

    private async Task OnDeleteClick(ReviewViewModel review)
    {
        var parameters = new DialogParameters<ConfirmDialog>()
        {
            {x => x.Text, "Are you sure you want to delete this review?"},
            {x => x.ButtonTypes, ButtonTypes.YesNo},
        };
        var confirm = await DialogService.Show<ConfirmDialog>("Delete Review", parameters).Result;
        if (confirm.Canceled)
        {
            return;
        }
        var result = await review.DeleteAsync();
        if (result == true)
        {
            ReviewsVm.Reviews.Remove(review);
        }
    }

    private async Task OnProtestDeleteClick(ProtestViewModel protest)
    {
        var parameters = new DialogParameters<ConfirmDialog>()
        {
            {x => x.Text, "Are you sure you want to delete this protest?"},
            {x => x.ButtonTypes, ButtonTypes.YesNo},
        };
        var confirm = await DialogService.Show<ConfirmDialog>("Delete Protest", parameters).Result;
        if (confirm.Canceled)
        {
            return;
        }
        var result = await protest.DeleteAsync();
        if (result.IsSuccess)
        {
            ReviewsVm.Protests.Remove(protest);
        }
    }

    private async Task OnCreateReviewFromProtestClick(ProtestViewModel protest)
    {
        var review = new ReviewModel()
            {
                SessionId = protest.SessionId,
                OnLap = protest.OnLap,
                Corner = protest.Corner,
                InvolvedMembers = protest.InvolvedMembers.ToList(),
                FullDescription = protest.FullDescription,
            };
        if (review.InvolvedMembers.Any(x => x.MemberId == protest.Author.MemberId) == false)
        {
            review.InvolvedMembers.Add(protest.Author);
        }
        await OpenAddReviewModal(review);
    }

    private async Task OnAddClick()
    {
        await OpenAddReviewModal(new());
    }

    private async Task OpenAddReviewModal(ReviewModel review)
    {
        var parameters = new DialogParameters<EditReviewDialog>()
        {
            {x => x.Model, review},
            {x => x.EventList, EventList},
            {x => x.EventCars, ReviewsVm.EventCars},
            {x => x.OnSubmit, async (reviewVm, cancellation) => await reviewVm.AddToSessionAsync(reviewVm.SessionId.GetValueOrDefault(), cancellation)},
        };
        var modal = DialogService.Show<EditReviewDialog>("Add Review", parameters);
        await modal.Result;
        if (EventId != null)
        {
            await ReviewsVm.LoadFromEventAsync(EventId.Value);
        }
    }

    private IEnumerable<ReviewViewModel> OrderReviews(IEnumerable<ReviewViewModel> reviews)
    {
        return reviews.OrderBy(x => x.SessionNr)
            .ThenBy(x => x.IncidentNr.PadNumbers())
            .ThenBy(x => x.OnLap.PadNumbers())
            .ThenBy(x => x.Corner.PadNumbers());
    }

    public async Task SelectedTabChanged()
    {
        await InvokeAsync(StateHasChanged);
    }

    private string GetTabLink(int tabIndex)
    {
        var url = NavigationManager.GetUriWithQueryParameter(tabIndexParam, tabIndex);
        return url;
    }

    protected override void Dispose(bool disposing)
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
        base.Dispose(disposing);
    }
}
