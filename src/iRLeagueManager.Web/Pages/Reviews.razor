@page "/{LeagueName}/Reviews/Events/{EventId:long}"
@page "/{LeagueName}/Reviews/Seasons/{SeasonId:long}"
@page "/{LeagueName}/Reviews"
@using iRLeagueManager.Web.Extensions
@using iRLeagueApiCore.Common.Models
@using iRLeagueApiCore.Common.Models.Reviews
@using iRLeagueManager.Web.Components
@using iRLeagueManager.Web.ViewModels
@inherits LeagueComponentBase
@inject ReviewsPageViewModel ReviewsVm
@inject ClientLocalTimeProvider ClientTime
@inject IDialogService DialogService
@inject ISnackbar Snackbar

<PageTitle>
    Reviews - @LeagueName
</PageTitle>

<MudContainer MaxWidth="MaxWidth.Large">
    <LoadingHeader Loading=@Bind(ReviewsVm, x => x.Loading)>
        <HeaderText>
            <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="0" Style="margin-left: -0.5em">
                <MudMenu Icon="@Icons.Material.Outlined.Link" AnchorOrigin="Origin.BottomLeft">
                    <MudMenuItem OnClick="@(() => CopyToClipboard(GetCurrentReviewLink()))">Current Race Reviews</MudMenuItem>
                    @if (Shared.SeasonName is not null)
                    {
                        <MudMenuItem OnClick="@(() => CopyToClipboard(GetCurrentSeasonLatestReviewLink()))">Latest Race Reviews (@Shared.SeasonName)</MudMenuItem>
                    }
                    <MudMenuItem OnClick="@(() => CopyToClipboard(GetLatestStandingsLink()))">Latest Race Reviews (All seasons)</MudMenuItem>
                </MudMenu>
                <MudText Typo="Typo.h5">Reviews</MudText>
            </MudStack>
        </HeaderText>
        <HeaderActions>
            <EventSelect />
        </HeaderActions>
    </LoadingHeader>

    <MudElement HtmlTag="div" Class="mt-3">
        @if (ReviewsVm.ProtestsEnabled)
        {
            <MudTabs Elevation="2" MinimumTabWidth="@(Breakpoint is Breakpoint.Xs or Breakpoint.Sm ? "60px" : "160px")" ActivePanelIndex="SelectedTabIndex">
                <MudTabPanel Text="Reviews" OnClick="@(() => NavigateTo(GetTabLink(0)))" />
                <MudTabPanel Text="Protests" OnClick="@(() => NavigateTo(GetTabLink(1)))" />
            </MudTabs>
        }
        <CascadingValue Value=@Bind(ReviewsVm, x => x.EventCars)>
            <CascadingValue Value=ReviewsVm.LeagueUsers>
                <CascadingValue Value=ReviewsVm.LeagueUsers.AsEnumerable()>
                    <CascadingValue Value=ReviewsVm.VoteCategories.AsEnumerable()>
                        <MudStack Spacing="5" Class="py-4">
                            @switch (SelectedTabIndex)
                            {
                                case 0:
                                    @if (ReviewsVm.Reviews.Count == 0)
                                    {
                                        <MudPaper Elevation="5" Class="py-4 px-6">
                                            <MudText Typo="Typo.h5">No Reviews</MudText>
                                        </MudPaper>
                                    }
                                    <AuthorizeView Roles=@GetRoleString(LeagueRoles.Admin, LeagueRoles.Steward)>
                                        <Authorized>
                                            @foreach (var review in OrderReviews(@Bind(ReviewsVm, x => x.Reviews)))
                                            {
                                                <ReviewCard Review=review
                                                Selected=@(review.ReviewId == SelectedReviewId)
                                                OnEditClick=@(async () => await OnEditClick(review))
                                                OnDeleteClick=@(async () => await OnDeleteClick(review))
                                                IsSteward=true
                                                ReadOnly=@ReadOnly
                                                UserId=@UserId />
                                            }
                                            @if (ReadOnly == false)
                                            {
                                                <MudButton StartIcon="@Icons.Material.Filled.Add"
                                                Color="Color.Tertiary"
                                                ButtonType="ButtonType.Button"
                                                OnClick=OnAddClick>Add Review</MudButton>
                                            }
                                        </Authorized>
                                        <NotAuthorized>
                                            @foreach (var review in OrderReviews(@Bind(ReviewsVm, x => x.Reviews)))
                                            {
                                                <ReviewCard Review=review Selected=@(review.ReviewId == SelectedReviewId) />
                                            }
                                        </NotAuthorized>
                                    </AuthorizeView>
                                    break;
                                case 1:
                                    @if (ReviewsVm.Protests.Count == 0 && ReviewsVm.ProtestsPublic)
                                    {
                                        <MudPaper Elevation="5" Class="py-4 px-6">
                                            <MudText Typo="Typo.h5">No Protests</MudText>
                                        </MudPaper>
                                    }
                                    <AuthorizeView Roles=@GetRoleString(LeagueRoles.Admin, LeagueRoles.Steward)>
                                        <Authorized>
                                            @foreach (var protest in @Bind(ReviewsVm, x => x.Protests))
                                            {
                                                <ProtestCard Protest=protest
                                                ReadOnly=@ReadOnly
                                                OnCreateReviewClick="@(() => OnCreateReviewFromProtestClick(protest))"
                                                OnDeleteClick=@(() => OnProtestDeleteClick(protest)) />
                                            }
                                        </Authorized>
                                        <NotAuthorized>
                                            @foreach (var protest in @Bind(ReviewsVm, x => x.Protests))
                                            {
                                                <ProtestCard Protest=protest />
                                            }
                                        </NotAuthorized>
                                    </AuthorizeView>
                                    @if (Event is not null && Event.HasResult)
                                    {
                                        var protestsOpenAt = Event.End + ReviewsVm.CooldownPeriod;
                                        var protestsCloseAt = Event.End + ReviewsVm.ProtestClosedAfter;
                                        @if (ReviewsVm.CanFileProtest(Event))
                                        {
                                            <MudButton Href=@($"./{LeagueName}/Protests/Events/{EventId}")
                                            StartIcon="@Icons.Material.Outlined.Campaign"
                                            Color="Color.Primary">
                                                File Protest
                                            </MudButton>
                                            @if (ReviewsVm.ProtestClosedAfter > TimeSpan.Zero)
                                            {
                                                <MudAlert Severity="Severity.Info">
                                                    Protests can be filed until @protestsCloseAt.ToString()
                                                </MudAlert>
                                            }
                                        }
                                        else
                                        {
                                            @if (ClientTime.Now < protestsOpenAt)
                                            {
                                                <MudAlert Severity="Severity.Warning">
                                                    Protests can be filed after @protestsOpenAt.ToString()
                                                </MudAlert>
                                            }
                                            else if (ClientTime.Now > protestsCloseAt)
                                            {
                                                <MudAlert Severity="Severity.Warning">
                                                    Protest period ended on @protestsCloseAt.ToString()
                                                </MudAlert>
                                            }
                                        }
                                    }
                                    break;
                                default:
                                    break;
                            }
                        </MudStack>
                    </CascadingValue>
                </CascadingValue>
            </CascadingValue>
        </CascadingValue>
    </MudElement>
</MudContainer>

@code {
    [CascadingParameter]
    private Task<AuthenticationState> AuthTask { get; set; } = default!;
    [CascadingParameter]
    public Breakpoint Breakpoint { get; set; }

    // Query parameters
    private const string tabIndexParam = "tabIndex";
    [Parameter]
    [SupplyParameterFromQuery(Name = tabIndexParam)]
    public int SelectedTabIndex { get; set; }

    private const string reviewIdParam = "reviewId";
    [Parameter]
    [SupplyParameterFromQuery(Name = reviewIdParam)]
    public long SelectedReviewId { get; set; } = -1;

    private string UserId { get; set; } = string.Empty;

    private bool ReadOnly => Shared.SeasonFinished;

    private IEnumerable<VoteCategoryModel> AvailableVoteCategories = Array.Empty<VoteCategoryModel>();

    protected override async Task OnParametersSetAsync()
    {
        BlazorParameterNullException.ThrowIfNull(this, AuthTask);
        await SetCurrentUserId();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender == false)
        {
            return;
        }
        await ReviewsVm.LoadUsers();
        await ReviewsVm.LoadVoteCategories();
        StateHasChanged();
    }

    protected override async Task OnEventChangedAsync(EventViewModel? @event)
    {
        if (@event?.EventId != null)
        {
            var navUrl = $"/{LeagueName}/Reviews/Events/{@event.EventId}?{NavigationManager.QueryString()}";
            navUrl = NavigationManager.GetUriWithQueryParameters(navUrl, GetQueryParameters());
            bool replace = ReplaceNavigation(navUrl);
            NavigationManager.NavigateTo(navUrl, replace: replace);
            await ReviewsVm.LoadFromEventAsync(@event.EventId);
        }
    }

    private bool ReplaceNavigation(string navUrl)
    {
        if (NavigationManager.Uri.Contains("/Events/") == false)
        {
            return true;
        }

        var urlWithoutParameters = navUrl.Split('?').First();
        var isCurrentUrlContained = NavigationManager.Uri.Contains(urlWithoutParameters);
        return isCurrentUrlContained;
    }

    private IReadOnlyDictionary<string, object?> GetQueryParameters()
    {
        var dict = new Dictionary<string, object?>();
        dict.Add(tabIndexParam, SelectedTabIndex);
        if (SelectedReviewId > 0)
        {
            dict.Add(reviewIdParam, SelectedReviewId);
        }
        return dict;
    }

    private async Task SetCurrentUserId()
    {
        var state = await AuthTask;
        UserId = state.User.GetUserId() ?? string.Empty;
    }

    private async Task OnEditClick(ReviewViewModel review)
    {
        var parameters = new DialogParameters<EditReviewDialog>()
        {
            {x => x.Model, review.CopyModel()},
            {x => x.EventList, EventList},
            {x => x.EventCars, ReviewsVm.EventCars},
            {x => x.OnSubmit, async (review, cancellation) => await review.SaveChangesAsync(cancellation)},
        };
        var result = await (await DialogService.ShowAsync<EditReviewDialog>("Edit Review", parameters)).Result;
        if (result?.Canceled == false && result.Data is ReviewModel reviewModel)
        {
            review.SetModel(reviewModel);
        }
    }

    private async Task OnDeleteClick(ReviewViewModel review)
    {
        var parameters = new DialogParameters<ConfirmDialog>()
        {
            {x => x.Text, "Are you sure you want to delete this review?"},
            {x => x.ButtonTypes, ButtonTypes.YesNo},
        };
        var confirm = await (await DialogService.ShowAsync<ConfirmDialog>("Delete Review", parameters)).Result;
        if (confirm?.Canceled != false)
        {
            return;
        }
        var result = await review.DeleteAsync();
        if (!result.IsSuccess)
        {
            Snackbar.Add($@"Error deleting review - Status ""{result.Status}""", Severity.Error);
            return;
        }
        ReviewsVm.Reviews.Remove(review);
    }

    private async Task OnProtestDeleteClick(ProtestViewModel protest)
    {
        var parameters = new DialogParameters<ConfirmDialog>()
        {
            {x => x.Text, "Are you sure you want to delete this protest?"},
            {x => x.ButtonTypes, ButtonTypes.YesNo},
        };
        var confirm = await (await DialogService.ShowAsync<ConfirmDialog>("Delete Protest", parameters)).Result;
        if (confirm is null || confirm.Canceled)
        {
            return;
        }
        var result = await protest.DeleteAsync();
        if (result.IsSuccess)
        {
            ReviewsVm.Protests.Remove(protest);
        }
    }

    private async Task OnCreateReviewFromProtestClick(ProtestViewModel protest)
    {
        var review = new ReviewModel()
            {
                SessionId = protest.SessionId,
                OnLap = protest.OnLap,
                Corner = protest.Corner,
                InvolvedMembers = protest.InvolvedMembers.ToList(),
                FullDescription = protest.FullDescription,
            };
        if (review.InvolvedMembers.Any(x => x.MemberId == protest.Author.MemberId) == false)
        {
            review.InvolvedMembers.Add(protest.Author);
        }
        await OpenAddReviewModal(review, allowSafeUnchanged: true);
    }

    private async Task OnAddClick()
    {
        await OpenAddReviewModal(new());
    }

    private async Task OpenAddReviewModal(ReviewModel review, bool allowSafeUnchanged = false)
    {
        var parameters = new DialogParameters<EditReviewDialog>()
        {
            {x => x.Model, review},
            {x => x.EventList, EventList},
            {x => x.EventCars, ReviewsVm.EventCars},
            {x => x.OnSubmit, async (reviewVm, cancellation) => await reviewVm.AddToSessionAsync(reviewVm.SessionId.GetValueOrDefault(), cancellation)},
            {x => x.AllowSafeUnchanged, allowSafeUnchanged},
        };
        await DialogService.ShowAsync<EditReviewDialog>("Add Review", parameters);
        if (EventId != null)
        {
            await ReviewsVm.LoadFromEventAsync(EventId.Value);
        }
    }

    private IEnumerable<ReviewViewModel> OrderReviews(IEnumerable<ReviewViewModel> reviews)
    {
        return reviews.OrderBy(x => x.SessionNr)
            .ThenBy(x => x.IncidentNr.PadNumbers())
            .ThenBy(x => x.OnLap.PadNumbers())
            .ThenBy(x => x.Corner.PadNumbers());
    }

    private string GetTabLink(int tabIndex)
    {
        var url = NavigationManager.GetUriWithQueryParameter(tabIndexParam, tabIndex);
        return url;
    }

    protected override void Dispose(bool disposing)
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
        base.Dispose(disposing);
    }

    private string GetLatestStandingsLink()
    {
        return $"{NavigationManager.BaseUri}{LeagueName}/Reviews";
    }

    private string GetCurrentSeasonLatestReviewLink()
    {
        if (Shared.SeasonName == null)
        {
            return GetLatestStandingsLink();
        }
        return $"{NavigationManager.BaseUri}{LeagueName}/Reviews/Seasons/{Shared.SeasonId}";
    }

    private string GetCurrentReviewLink()
    {
        if (Event is null)
        {
            return GetCurrentSeasonLatestReviewLink();
        }
        return $"{NavigationManager}{LeagueName}/Reviews/Events/{Event.EventId}";
    }
}
