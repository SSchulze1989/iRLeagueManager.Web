
@page "/{LeagueName}/Reviews/Events/{EventId:long}"
@page "/{LeagueName}/Reviews/Seasons/{SeasonId:long}"
@page "/{LeagueName}/Reviews"
@using iRLeagueManager.Web.Extensions
@using iRLeagueApiCore.Common.Models
@using iRLeagueApiCore.Common.Models.Reviews
@using iRLeagueManager.Web.Components
@using iRLeagueManager.Web.Components.Reviews
@using iRLeagueManager.Web.ViewModels
@inherits LeagueComponentBase
@inject ReviewsPageViewModel ReviewsVm
@inject ClientLocalTimeProvider ClientTime

<PageTitle>Reviews - @LeagueName</PageTitle>

<MudContainer MaxWidth="MaxWidth.Large">
    <LoadingHeader Loading=@Bind(ReviewsVm, x => x.Loading)>
        <HeaderText>
            <MudText Typo="Typo.h6">Reviews</MudText>
        </HeaderText>
        <HeaderActions>
            <EventSelect/>
        </HeaderActions>
    </LoadingHeader>

    @if (ReviewsVm.ProtestsEnabled)
    {
        <MudTabs Elevation="2" MinimumTabWidth="40px">
            <MudTabPanel Text="Reviews" OnClick="@(() => NavigateTo(GetTabLink(0)))"/>
            <MudTabPanel Text="Protests" OnClick="@(() => NavigateTo(GetTabLink(1)))"/>
        </MudTabs>
    }

    <CascadingValue Value=@Bind(ReviewsVm, x => x.EventCars)>
    <CascadingValue Value=ReviewsVm.LeagueUsers>

    <MudStack Spacing="2" Class="pt-2">
        @switch (SelectedTabIndex)
        {
            case 0:
                @if (ReviewsVm.Reviews.Count == 0)
                {
                    <p class="results-scoring"><em>No Reviews</em></p>
                }
                <AuthorizeView Roles=@GetRoleString(LeagueRoles.Admin, LeagueRoles.Steward)>
                    <Authorized>
                        @foreach(var review in OrderReviews(@Bind(ReviewsVm, x => x.Reviews)))
                        {
                            <ReviewCard class="px-0 mb-2 mx-0"
                                        Review=review
                                        Selected=@(review.ReviewId == SelectedReviewId)
                                        OnEditClick=@(async () => await OnEditClick(review)) 
                                        OnDeleteClick=@(async () => await OnDeleteClick(review))
                                        IsSteward=true
                                        ReadOnly=@ReadOnly
                                        UserId=@UserId/>
                        }
                        @if (ReadOnly == false)
                        {
                            <button class="btn btn-outline-secondary" type="button" @onclick=OnAddClick>Add Review</button>
                        }
                    </Authorized>
                    <NotAuthorized>
                        @foreach(var review in OrderReviews(@Bind(ReviewsVm, x => x.Reviews)))
                        {
                            <ReviewCard class="px-0 mb-2 mx-0"
                                        Review=review
                                        Selected=@(review.ReviewId == SelectedReviewId) />
                        }
                    </NotAuthorized>
                </AuthorizeView>
                break;
            case 1:
                @if (ReviewsVm.Protests.Count == 0 && ReviewsVm.ProtestsPublic)
                {
                    <p class="results-scoring"><em>No Protests</em></p>
                }
                <AuthorizeView Roles=@GetRoleString(LeagueRoles.Admin, LeagueRoles.Steward)>
                    <Authorized>
                        @foreach(var protest in @Bind(ReviewsVm, x => x.Protests))
                        {
                            <ProtestCard class="px-0 mb-2 mx-0" 
                                Protest=protest 
                                OnCreateReviewClick="@(() => OnCreateReviewFromProtestClick(protest))"
                                OnDeleteClick=@(() => OnProtestDeleteClick(protest)) />
                        }
                    </Authorized>
                    <NotAuthorized>
                        @foreach(var protest in @Bind(ReviewsVm, x => x.Protests))
                        {
                            <ProtestCard class="px-0 mb-2 mx-0" Protest=protest />
                        }
                    </NotAuthorized>
                </AuthorizeView>
                @if (Event is not null && Event.HasResult)
                {
                    var protestsOpenAt = Event.End + ReviewsVm.CooldownPeriod;
                    var protestsCloseAt = Event.End + ReviewsVm.ProtestClosedAfter;
                    @if (ReviewsVm.CanFileProtest(Event))
                    {
                        <button class="btn btn-outline-secondary mb-3" type="button" @onclick=@(() => NavigationManager.NavigateTo($"./{LeagueName}/Protests/Events/{EventId}"))>File Protest</button>
                        @if (ReviewsVm.ProtestClosedAfter > TimeSpan.Zero)
                        {
                            <div class="alert alert-info">
                                Protests can be filed until @protestsCloseAt.ToString();
                            </div>
                        }
                    }
                    else
                    {
                        @if (ClientTime.Now < protestsOpenAt)
                        {
                            <div class="alert alert-warning">
                                Protests can be filed after @protestsOpenAt.ToString();
                            </div>
                        }
                        else if (ClientTime.Now > protestsCloseAt)
                        {
                            <div class="alert alert-warning">
                                    Protest period ended on @protestsCloseAt.ToString();
                            </div>
                        }
                    }
                }
                break;
            default:
                break;
        }
    </MudStack>
    </CascadingValue>
    </CascadingValue>
</MudContainer>

@code {
    [CascadingParameter]
    public SharedStateService SharedState { get; set; } = default!;
    [CascadingParameter]
    public IModalService ModalService { get; set; } = default!;
    [CascadingParameter]
    private Task<AuthenticationState> AuthTask { get; set; } = default!;

    private string UserId { get; set; } = string.Empty;

    private bool ReadOnly => SharedState.SeasonFinished;

    // Query parameters
    private const string tabIndexParam = "tabIndex";
    private const string reviewIdParam = "reviewId";

    private int selectedTabIndex;
    private int SelectedTabIndex 
    {
        get => selectedTabIndex;
        set
        {
            if (selectedTabIndex != value)
            {
                selectedTabIndex = value;
                _ = SelectedTabChanged();
            }
        }
    }
    private long SelectedReviewId { get; set; }

    protected override void OnInitialized()
    {
        NavigationManager.LocationChanged += OnLocationChanged;
        SelectedTabIndex = NavigationManager.QueryParameter<int>(tabIndexParam);
        SelectedReviewId = NavigationManager.QueryParameter<long>(reviewIdParam);
        base.OnInitialized();
    }

    protected override async Task OnParametersSetAsync()
    {
        _ = AuthTask ?? throw BlazorParameterNullException.New(this, AuthTask);
        await SetCurrentUserId();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender == false)
        {
            return;
        }
        await ReviewsVm.LoadUsers();
        SelectedTabIndex = NavigationManager.QueryParameter<int>(tabIndexParam);
        SelectedReviewId = NavigationManager.QueryParameter<long>(reviewIdParam);
        StateHasChanged();
    }

    protected override async Task OnEventChangedAsync(EventViewModel? @event)
    {
        if (@event?.EventId != null)
        {
            var navUrl = $"/{LeagueName}/Reviews/Events/{@event.EventId}?{NavigationManager.QueryString()}";
            navUrl = NavigationManager.GetUriWithQueryParameters(navUrl, GetQueryParameters());
            bool replace = ReplaceNavigation(navUrl);
            NavigationManager.NavigateTo(navUrl, replace: replace);
            await ReviewsVm.LoadFromEventAsync(@event.EventId);
        }
    }

    private bool ReplaceNavigation(string navUrl)
    {
        if (NavigationManager.Uri.Contains("/Events/") == false)
        {
            return true;
        }

        var urlWithoutParameters = navUrl.Split('?').First();
        var isCurrentUrlContained = NavigationManager.Uri.Contains(urlWithoutParameters);
        return isCurrentUrlContained;
    }

    private IReadOnlyDictionary<string, object?> GetQueryParameters()
    {
        return new Dictionary<string, object?>()
        {
            {tabIndexParam, SelectedTabIndex},
            {reviewIdParam, SelectedReviewId},
        };
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        SelectedTabIndex = NavigationManager.QueryParameter<int>(tabIndexParam);
        SelectedReviewId = NavigationManager.QueryParameter<long>(reviewIdParam);
        StateHasChanged();
    }

    private async Task SetCurrentUserId()
    {
        var state = await AuthTask;
        UserId = state.User.GetUserId() ?? string.Empty;
    }

    private async Task OnEditClick(ReviewViewModel review)
    {
        var parameters = new ModalParameters<EditReviewModal>()
        {
            { x => x.Model, review.CopyModel() },
            { x => x.EventCars, ReviewsVm.EventCars },
            { x => x.OnSubmit, async (review, cancellation) => await review.SaveChangesAsync(cancellation) },
        };
        var options = new ModalOptions()
        {
            Size = ModalSize.Medium,
            DisableBackgroundCancel = true,
        };
        var modal = ModalService.Show<EditReviewModal>("Edit Review", parameters, options);
        var result = await modal.Result;
        if (result.Confirmed && result.Data is ReviewModel reviewModel)
        {
            review.SetModel(reviewModel);
        }
    }

    private async Task OnDeleteClick(ReviewViewModel review)
    {
        var parameters = new ModalParameters()
            .Add(nameof(ConfirmModal.Text), "Are you sure you want to delete this review?")
            .Add(nameof(ConfirmModal.ButtonTypes), ButtonTypes.YesNo);
        var confirm = await ModalService.Show<ConfirmModal>("Delete Review", parameters).Result;
        if (confirm.Cancelled)
        {
            return;
        }
        var result = await review.DeleteAsync();
        if (result == true)
        {
            ReviewsVm.Reviews.Remove(review);
        }
    }

    private async Task OnProtestDeleteClick(ProtestViewModel protest)
    {
        var parameters = new ModalParameters()
            .Add(nameof(ConfirmModal.Text), "Are you sure you want to delete this protest?")
            .Add(nameof(ConfirmModal.ButtonTypes), ButtonTypes.YesNo);
        var confirm = await ModalService.Show<ConfirmModal>("Delete Protest", parameters).Result;
        if (confirm.Cancelled)
        {
            return;
        }
        var result = await protest.DeleteAsync();
        if (result.IsSuccess)
        {
            ReviewsVm.Protests.Remove(protest);
        }
    }

    private async Task OnCreateReviewFromProtestClick(ProtestViewModel protest)
    {
        var review = new ReviewModel()
        {
            SessionId = protest.SessionId,
            OnLap = protest.OnLap,
            Corner = protest.Corner,
            InvolvedMembers = protest.InvolvedMembers.ToList(),
            FullDescription = protest.FullDescription,
        };
        if (review.InvolvedMembers.Any(x => x.MemberId == protest.Author.MemberId) == false)
        {
            review.InvolvedMembers.Add(protest.Author);
        }
        await OpenAddReviewModal(review);
    }

    private async Task OnAddClick()
    {
        await OpenAddReviewModal(new());
    }

    private async Task OpenAddReviewModal(ReviewModel review)
    {
        var parameters = new ModalParameters<EditReviewModal>()
        {
            { x => x.Model, review },
            { x => x.EventCars, ReviewsVm.EventCars },
            { x => x.OnSubmit, async (reviewVm, cancellation) => await reviewVm.AddToSessionAsync(reviewVm.SessionId.GetValueOrDefault(), cancellation) },
        };
        var options = new ModalOptions()
        {
            Size = ModalSize.Medium,
            DisableBackgroundCancel = true,
        };
        var modal = ModalService.Show<EditReviewModal>("Add Review", parameters, options);
        await modal.Result;
        if (EventId != null)
        {
            await ReviewsVm.LoadFromEventAsync(EventId.Value);
        }
    }

    private IEnumerable<ReviewViewModel> OrderReviews(IEnumerable<ReviewViewModel> reviews)
    {
        return reviews.OrderBy(x => x.SessionNr)
            .ThenBy(x => x.IncidentNr.PadNumbers())
            .ThenBy(x => x.OnLap.PadNumbers())
            .ThenBy(x => x.Corner.PadNumbers());
    }

    public async Task SelectedTabChanged()
    {
        await InvokeAsync(StateHasChanged);
    }

    private string GetTabLink(int tabIndex)
    {
        var url = NavigationManager.GetUriWithQueryParameter(tabIndexParam, tabIndex);
        return url;
    }

    protected override void Dispose(bool disposing)
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
        base.Dispose(disposing);
    }
}
