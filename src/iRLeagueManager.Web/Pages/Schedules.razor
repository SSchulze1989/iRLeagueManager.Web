@page "/{LeagueName}/Schedules"
@page "/{LeagueName}/Schedules/Seasons/{SeasonId:long}"
@using System.Text.Json
@using iRLeagueApiCore.Common.Enums
@using iRLeagueApiCore.Common.Models
@using iRLeagueManager.Web.ViewModels
@using iRLeagueManager.Web.Components
@inherits LeagueComponentBase
@inject SchedulesPageViewModel vm

<PageTitle>
    Schedules - @LeagueName
</PageTitle>

<MudContainer MaxWidth="MaxWidth.Large">
    <MudStack Spacing="2">
        <LoadingHeader Loading="vm.Loading">
            <HeaderText>
                <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="0" Style="margin-left: -0.5em">
                    <MudMenu Icon="@Icons.Material.Outlined.Link" AnchorOrigin="Origin.BottomLeft">
                        <MudMenuItem OnClick="@(() => CopyToClipboard(GetCurrentScheduleLink()))">Current Schedule</MudMenuItem>
                        <MudMenuItem OnClick="@(() => CopyToClipboard(GetActiveScheduleLink()))">Latest Season Schedule</MudMenuItem>
                    </MudMenu>
                    <MudText Typo="Typo.h5">Schedule</MudText>
                </MudStack>
            </HeaderText>
        </LoadingHeader>

        <AuthorizeView Roles=@(GetRoleString(LeagueRoles.Admin, LeagueRoles.Organizer))>
            <Authorized>
                @foreach (var schedule in vm.Schedules)
                {
                    <DisplaySchedule Schedule="schedule" ReadOnly=Shared.SeasonFinished DisplayHeader="@(vm.Schedules.Count > 1)" />
                }
            </Authorized>
            <NotAuthorized>
                @foreach (var schedule in vm.Schedules)
                {
                    <DisplaySchedule Schedule="schedule" ReadOnly="true" DisplayHeader="@(vm.Schedules.Count > 1)" />
                }
            </NotAuthorized>
        </AuthorizeView>
    </MudStack>
</MudContainer>

@code {
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender == false) return;
        await LoadSchedules();
    }

    private async Task LoadSchedules()
    {
        await vm.Load();
    }

    private string GetActiveScheduleLink()
    {
        var url = $"{NavigationManager.BaseUri}{LeagueName}/Schedules";
        return url;
    }

    private string GetCurrentScheduleLink()
    {
        if (SeasonId == null)
        {
            return GetActiveScheduleLink();
        }
        return $"{NavigationManager.BaseUri}{LeagueName}/Schedules/Seasons/{SeasonId}";
    }
}
