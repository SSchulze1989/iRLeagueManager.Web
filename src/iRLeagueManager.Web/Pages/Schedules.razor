@page "/{LeagueName}/Schedules/Season/{SeasonId:long}"
@using System.Text.Json
@using iRLeagueApiCore.Common.Enums
@using iRLeagueApiCore.Common.Models
@using iRLeagueManager.Web.ViewModels
@using iRLeagueManager.Web.Components
@attribute [Authorize]
@inherits MvvmComponentBase
@inject LeagueApiService apiService
@inject SchedulesPageViewModel vm
@inject NavigationManager navigationManager
@inject JsonSerializerOptions jsonOptions

<div style="display:inline-block">
    <div style="display:inline-block">
        <h3>Schedules</h3>
    </div>
    @if (Bind(vm, x => x.Loading))
    {
        <div class="lds-ring">
            <div></div>
        </div>
    }
</div>

<div>
    @foreach(var schedule in @Bind(vm, x => x.Schedules))
    {
        var maxRaceCount = @schedule.MaxRaceCount;
        <div class="container">
            <div style="display:inline-block">
                <div style="display:inline-block">
                    <h3>@Bind(schedule, x => x.Name)</h3>
                </div>
                @if (Bind(schedule, x => x.Loading))
                {
                    <div class="lds-ring">
                        <div></div>
                    </div>
                }
                else 
                {
                    <table class="table alternate select-table">
                        <thead>
                            <tr>
                                <th>Nr.</th>
                                <th>Date</th>
                                <th>Name</th>
                                <th>Track</th>
                                <th>Laps</th>
                                <th>Start</th>
                                <th>Duration</th>
                                <th>Practice</th>
                                <th>Qualy</th>
                                @for(int i=0; i<maxRaceCount; i++)
                                {
                                    <th>Race @(i+1)</th>
                                }
                            </tr>
                        </thead>
                        <tbody>
                        @foreach((var @event, var index) in @Bind(schedule, x => x.Events).Select((x, i) => (x, i)))
                        {
                            var eventId = @event.EventId;
                            var races = @Bind(@event, x => x.Races);
                            <tr @onclick="@(() => OnTableRowClick(@event))" class="pointer">
                                <td>@(index + 1).</td>
                                <td>@Bind(@event, x => x.Date).ToString(@"dd.MM.yyyy")</td>
                                <td>@Bind(@event, x => x.Name)</td>
                                <td>@Bind(@event, x => x.TrackId)</td>
                                <td>@Bind(@event, x => x.Laps)</td>
                                <td>@Bind(@event, x => x.StartTime).ToString(@"HH:mm")</td>
                                <td>@Bind(@event, x => x.Duration).ToString(@"HH:mm")</td>
                                <td>@(DurationString(Bind(@event, x=> x.Practice)))</td>
                                <td>@(DurationString(Bind(@event, x=> x.Qualifying)))</td>
                                @for(int i=0; i<maxRaceCount; i++)
                                {
                                    var race = races.ElementAtOrDefault(i);
                                    @if (race != null)
                                    {
                                        <td>@DurationString(race)</td>
                                    }
                                    else 
                                    {
                                        <td></td>
                                    }
                                }
                            </tr>
                        }
                        </tbody>
                    </table>
                }
            </div>
        </div>
    }
</div>

@code {
    [Parameter]
    public string LeagueName { get; set; } = string.Empty;
    [Parameter]
    public long SeasonId { get; set; }
    [CascadingParameter]
    public IModalService ModalService { get; set; } = default!;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender == false) return;

        // set season state
        if (SeasonId != 0)
        {
            await apiService.SetCurrentSeasonAsync(LeagueName, SeasonId);
        }

        // load schedules data
        if (apiService.CurrentSeason == null)
        {
            return;
        }
        await LoadSchedules();
    }

    private async Task LoadSchedules()
    {
        await vm.Load();
        // load sessions to display
        foreach(var schedule in vm.Schedules)
        {
            await schedule.LoadEvents();
        }
    }

    private async Task OnTableRowClick(EventViewModel eventViewModel)
    {
        //navigationManager.NavigateTo($"{LeagueName}/Results/Session/{sessionId}");
        var parameters = new ModalParameters()
            .Add(nameof(EditEventModal.EventModel), eventViewModel.GetModel());
        var options = new ModalOptions()
        {
            Size = ModalSize.Medium,
            DisableBackgroundCancel = true,
        };
        var modal = ModalService.Show<EditEventModal>("Edit Event", parameters, options);
        var result = await modal.Result;
        if (result.Confirmed && result.Data is EventModel eventModel)
        {
            eventViewModel.SetModel(eventModel);
        }
    }

    private string DurationString(SessionViewModel? session)
    {
        if (session == null)
        {
            return "-";
        }

        var parts = new List<string>();
        if (session.Duration.TimeOfDay != TimeSpan.Zero)
        {
            parts.Add(session.Duration.ToString(@"HH:mm"));
        }
        if (session.Laps > 0)
        {
            parts.Add(session.Laps.ToString() + " Laps");
        }

        if (parts.Count == 0)
        {
            return "-";
        }

        return string.Join(" / ", parts);
    }
}
