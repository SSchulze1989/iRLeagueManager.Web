@page "/{LeagueName}/Schedules"
@page "/{LeagueName}/Schedules/Season/{SeasonId:long}"
@using System.Text.Json
@using iRLeagueApiCore.Common.Enums
@using iRLeagueApiCore.Common.Models
@using iRLeagueManager.Web.ViewModels
@using iRLeagueManager.Web.Components
@inherits LeagueComponentBase
@inject SchedulesPageViewModel vm
@inject JsonSerializerOptions jsonOptions

<PageTitle>Schedules - @LeagueName</PageTitle>

<MudContainer MaxWidth="MaxWidth.Large">
    <MudStack Spacing="2">
        <LoadingHeader Loading=@Bind(vm, x => x.Loading)>
            <HeaderText>
                <MudText Typo="Typo.h6">Schedule</MudText>
            </HeaderText>
        </LoadingHeader>

        <AuthorizeView Roles=@(GetRoleString(LeagueRoles.Admin, LeagueRoles.Organizer))>
            <Authorized>
                @foreach(var schedule in @Bind(vm, x => x.Schedules))
                {
                    <DisplaySchedule Schedule="schedule" ReadOnly=SharedState.SeasonFinished DisplayHeader="@(vm.Schedules.Count > 1)"/>
                }
            </Authorized>
            <NotAuthorized>
                @foreach(var schedule in @Bind(vm, x => x.Schedules))
                {
                    <DisplaySchedule Schedule="schedule" ReadOnly="true" DisplayHeader="@(vm.Schedules.Count > 1)"/>
                }
            </NotAuthorized>
        </AuthorizeView>
    </MudStack>
</MudContainer>

@code {
    [CascadingParameter]
    public SharedStateService SharedState { get; set; } = default!;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender == false) return;
        await LoadSchedules();
    }

    private async Task LoadSchedules()
    {
        await vm.Load();
    }
}
