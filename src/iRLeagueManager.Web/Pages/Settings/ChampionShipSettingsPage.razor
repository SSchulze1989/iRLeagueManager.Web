@page "/{LeagueName}/Settings/Results/Championships/{ChampionshipId:long}"
@page "/{LeagueName}/Settings/Results/Championships/{ChampionshipId:long}/ResultConfigs/{ResultConfigId:long}"
@using iRLeagueApiCore.Common.Enums;
@using iRLeagueApiCore.Common.Models;
@using iRLeagueManager.Web.Components
@using iRLeagueManager.Web.Components.Settings
@inherits LeagueComponentBase
@layout ResultSettingsLayout
@inject ChampSeasonViewModel ChampSeason
@inject IToastService ToastService
@inject BreadCrumbService BreadCrumbService
@inject MemberServiceViewModel MemberService
@attribute [Authorize]

<PageTitle>
    Settings - @LeagueName
</PageTitle>

@if (DisplayLeaveWarning)
{
    <MudAlert Severity="Severity.Warning" Elevation="5" Class="mb-3" ShowCloseIcon="true" CloseIconClicked="@(() => DisplayLeaveWarning = false)">
        <MudText>
            <b>You have unsaved changes!</b> Save changes or click <a class="link-light" @onclick=Discard>Discard</a> to close this page.
        </MudText>
    </MudAlert>
}

<AuthorizeView Roles=@GetRoleString(LeagueRoles.Admin, LeagueRoles.Organizer) Context="AuthContext">
    <Authorized>
        @{
            var disableSave = !HasChanges();
        }
        <MudStack Row="true" Justify="Justify.FlexEnd">
            <MudButton Color="Color.Error" OnClick="Discard" Disabled="disableSave">Discard</MudButton>
            <MudButton Color="Color.Primary" OnClick="Submit" Disabled="disableSave">Save</MudButton>
        </MudStack>

        <CascadingValue Value="LeagueMembers">
            <CascadingValue Value="Teams">
                <SettingsStack @ref="SettingsStack">
                    <SettingsStackItem Href="@($"{LeagueName}/Settings/Results/Championships/{ChampionshipId}")">
                        <ChampionshipSettings ChampSeason="ChampSeason" />
                    </SettingsStackItem>
                    <SettingsStackItem Href="@($"{LeagueName}/Settings/Results/Championships/{ChampionshipId}/ResultConfigs/{ResultConfigId}")">
                        @if (SelectedResultConfig is null)
                        {
                            <MudAlert Severity="Severity.Error" Elevation="5" Class="mb-3">
                                Invalid Championship or Resultconfig id!
                            </MudAlert>
                        }
                        else
                        {
                            <ResultConfigSettings Config="SelectedResultConfig" AllowEditName="ChampSeason.ResultConfigs.Count > 1" />
                        }
                    </SettingsStackItem>
                </SettingsStack>
            </CascadingValue>
        </CascadingValue>

        <MudStack Row="true" Justify="Justify.FlexEnd">
            <MudButton Color="Color.Error" OnClick="Discard" Disabled="disableSave">Discard</MudButton>
            <MudButton Color="Color.Primary" OnClick="Submit" Disabled="disableSave">Save</MudButton>
        </MudStack>
    </Authorized>
    <NotAuthorized>
        You are not allowed here ...
    </NotAuthorized>
</AuthorizeView>

@code {
    [CascadingParameter] public DialogService DialogService { get; set; } = default!;
    [Parameter] public long ChampionshipId { get; set; }
    [Parameter] public long? ResultConfigId { get; set; }
    [Parameter, SupplyParameterFromQuery] public string returnUrl { get; set; } = string.Empty;

    SettingsStack SettingsStack { get; set; } = default!;

    private bool DisplayLeaveWarning { get; set; } = false;
    private ElementReference LeaveWarning { get; set; }
    private StatusResultValidator? ResultValidator { get; set; }
    private int CarouselIndex { get; set; }

    private ResultConfigViewModel? SelectedResultConfig { get; set; }
    private IEnumerable<MemberModel> LeagueMembers { get; set; } = Enumerable.Empty<MemberModel>();
    private IEnumerable<TeamModel> Teams { get; set; } = Enumerable.Empty<TeamModel>();
    private string Error { get; set; } = string.Empty;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        UpdateBreadCrumb();
        RegisterLocationChangingHandler();
        ChampSeason.HasChanged += OnHasChanged;
    }

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        if (string.IsNullOrWhiteSpace(returnUrl))
        {
            returnUrl = $"/{LeagueName}/Settings/Results";
        }

        // do not reload data if changes are present
        if (HasChanges())
        {
            return;
        }

        await LoadFromAPI();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender == false)
        {
            return;
        }
        await LoadFromAPI();
    }

    private async Task LoadFromAPI(bool forceReload = false)
    {
        if (ChampSeason.ChampionshipId != ChampionshipId || forceReload)
        {
            await ChampSeason.Load(ChampionshipId, CancellationToken);
            await ChampSeason.LoadResultConfigs(CancellationToken);
        }
        SelectedResultConfig = ChampSeason.ResultConfigViewModels.FirstOrDefault(x => x.ResultConfigId == ResultConfigId) ?? SelectedResultConfig;
        LeagueMembers = (await MemberService.GetLeagueMembers(CancellationToken)).Content ?? Enumerable.Empty<MemberModel>();
        Teams = (await MemberService.GetLeagueTeams(CancellationToken)).Content ?? Enumerable.Empty<TeamModel>();
        UpdateBreadCrumb();
        await InvokeAsync(StateHasChanged);
    }

    private bool HasChanges()
    {
        return ChampSeason.HasChanges || ChampSeason.ResultConfigViewModels.Any(x => x.HasChanges);
    }

    protected override async ValueTask OnLocationChanging(LocationChangingContext context)
    {
        // Do nothing when viewmodel has no changes or navigation on same page
        var allowNavigation = HasChanges() == false ||
            context.TargetLocation.Contains($"/{LeagueName}/Settings/Results/Championships/{ChampionshipId}");
        if (allowNavigation)
        {
            await base.OnLocationChanging(context);
            return;
        }

        // If viewmodel has changes: Cancel navigation and display message
        context.PreventNavigation();
        await DisplayLeaveWarningMessage();
    }

    protected override void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        if (e.Location.Contains($"/{LeagueName}/Settings/Results/Championships/{ChampionshipId}") == false)
        {
            return;
        }
        SettingsStack.NavigateTo(NavigationManager.ToBaseRelativePath(e.Location));
        UpdateBreadCrumb();
    }

    private async Task SaveChanges()
    {
        if (ChampSeason.HasChanges)
        {
            await ChampSeason.SaveChangesAsync(CancellationToken);
        }
        foreach (var config in ChampSeason.ResultConfigViewModels)
        {
            if (config.HasChanges)
            {
                await config.SaveChangesAsync(CancellationToken);
            }
        }
    }

    private async Task DisplayLeaveWarningMessage()
    {
        DisplayLeaveWarning = true;
        await InvokeAsync(StateHasChanged);
        await ScrollToElement(LeaveWarning);
    }

    private async Task Submit()
    {
        await SaveChanges();
    }

    private async Task Discard()
    {
        ChampSeason.ResetChangedState();
        await LoadFromAPI(forceReload: true);
        DisplayLeaveWarning = false;
    }

    private async Task FiltersClick()
    {
        if (ApiService.CurrentLeague is null)
        {
            return;
        }
        var members = (await ApiService.CurrentLeague.Members().Get()).Content!;
        var teams = (await ApiService.CurrentLeague.Teams().Get()).Content!;
        var parameters = new DialogParameters<EditResultFilterModal>()
        {
            { x => x.Model, ChampSeason.CopyModel().Filters },
            { x => x.LeagueMembers, members },
            { x => x.Teams, teams }
        };
        var result = await DialogService.Show<EditResultFilterModal>("Championship Filter", parameters).Result;
        if (!result.Canceled && result.Data is IEnumerable<ResultFilterModel> model)
        {
            ChampSeason.Filters = model.ToList();
        }
    }

    private async Task OnResultConfigClick(ResultConfigViewModel config)
    {
        var parameters = new DialogParameters<EditResultConfigModal>()
        {
            { x => x.Model, config.CopyModel() },
            { x => x.ResultKind, ChampSeason.ResultKind },
            { x => x.OnSubmit, (configChampSeason, cancellationToken) => configChampSeason.SaveChangesAsync(cancellationToken) },
        };
        var result = await DialogService.Show<EditResultConfigModal>("Edit Point System", parameters).Result;
        if (!result.Canceled && result.Data is ResultConfigModel model)
        {
            config.SetModel(model);
        }
    }

    private async Task OnAddResultConfigClick()
    {
        var parameters = new DialogParameters<EditResultConfigModal>()
        {
            { x => x.Model, CreateResultConfig() },
            { x => x.ResultKind, ChampSeason.ResultKind },
            { x => x.OnSubmit, (x, c) => ChampSeason.AddResultConfig(x.GetModel(), c) },
        };
        await DialogService.Show<EditResultConfigModal>("Add new Point System", parameters).Result;
    }

    private async Task OnDeleteResultConfigClick(ResultConfigViewModel config)
    {
        var parameters = new DialogParameters<ConfirmModal>()
        {
            { x => x.Text, $"Really delete Point System \"{config.Name}\"?" },
            { x => x.ButtonTypes, ButtonTypes.YesNo },
        };
        var result = await DialogService.Show<ConfirmModal>("Delete Point System", parameters).Result;
        if (!result.Canceled)
        {
            await ChampSeason.DeleteResultConfig(config.GetModel());
        }
    }

    private void DefaultResultConfigClick(ResultConfigViewModel resultConfig)
    {
        var configInfo = ChampSeason.ResultConfigs.FirstOrDefault(x => x.ResultConfigId == resultConfig.ResultConfigId);
        if (ChampSeason.DefaultResultConfig?.ResultConfigId != configInfo?.ResultConfigId)
        {
            ChampSeason.DefaultResultConfig = configInfo;
            return;
        }
        ChampSeason.DefaultResultConfig = null;
    }

    private void UpdateBreadCrumb()
    {
        BreadCrumbService.Items = new()
        {
            new BreadcrumbItem("Championships", $"{Shared.LeagueName}/Settings/Results"),
            new BreadcrumbItem(ChampSeason.ChampionshipName, $"{Shared.LeagueName}/Settings/Results/Championships/{ChampionshipId}"),
        };
        if (SelectedResultConfig is not null)
        {
            var name = SelectedResultConfig.Name;
            if (string.IsNullOrEmpty(name) || ChampSeason.ResultConfigs.Count <= 1)
            {
                name = "Race Points";
            }
            BreadCrumbService.Add(new BreadcrumbItem(name, $"{Shared.LeagueName}/Settings/Results/Championships/{ChampionshipId}/ResultConfigs/{SelectedResultConfig.ResultConfigId}"));
        }
        InvokeAsync(StateHasChanged);
    }

    private async Task EditSortOptionsClick(StandingConfigurationViewModel standingConfig)
    {
        var parameters = new DialogParameters<EditSortOptionsModal>()
        {
            { x => x.Model, standingConfig.SortOptions.ToList() },
            { x => x.AvailableSortValues, new[]
            {
                SortValue.TotalPts,
                SortValue.PenPts,
                SortValue.Incs,
                SortValue.Wins,
                SortValue.Top3,
                SortValue.Top5,
                SortValue.Top10,
                SortValue.LastRaceOrder,
                SortValue.Races,
                SortValue.RacesCounted,
                SortValue.RacesScored,
                SortValue.RacesInPoints,
            } },
        };
        var result = await DialogService.Show<EditSortOptionsModal>("Edit Standing Sorting", parameters).Result;
        if (!result.Canceled && result.Data is IList<SortOptions> model)
        {
            standingConfig.SortOptions = model.ToList();
        }
    }

    private ResultConfigModel CreateResultConfig() => new ResultConfigModel()
    {
        ChampSeasonId = ChampSeason.ChampSeasonId,
    };

    private void OnHasChanged(object? sender, EventArgs e)
    {
        InvokeAsync(StateHasChanged);
    }
}
