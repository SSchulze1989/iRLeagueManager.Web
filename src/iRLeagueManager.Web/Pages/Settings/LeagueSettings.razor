@page "/{LeagueName}/Settings/League"
@using Markdig;
@using iRLeagueApiCore.Common.Enums
@using iRLeagueApiCore.Common.Models
@using iRLeagueManager.Web.Components
@using iRLeagueManager.Web.Components.Settings
@using iRLeagueManager.Web.ViewModels
@inherits LeagueComponentBase
@layout SettingsLayout
@inject LeagueViewModel Vm
@inject LeagueApiService apiService
@inject MarkdownPipeline MarkdownPipeline
@inject IDialogService DialogService
@attribute [Authorize]

<PageTitle>Settings - @LeagueName</PageTitle>

<LoadingHeader Loading="@Bind(Vm, x => x.Loading)">
    <HeaderText>
        <MudText Typo="Typo.h5">League Settings</MudText>
    </HeaderText>
</LoadingHeader>

<AuthorizeView Roles=@GetRoleString(LeagueRoles.Admin) Context="AuthContext">
    <Authorized>
        @if (Vm.LeaguePublic != LeaguePublicSetting.PublicListed && showLeagueHiddenAlert)
        {
            <MudAlert Class="mt-4" Elevation="5" Severity="Severity.Warning" ContentAlignment="HorizontalAlignment.Center" ShowCloseIcon="true" CloseIconClicked="@(() => showLeagueHiddenAlert = false)">
                Your league is still hidden. Others can access your league if they have the link but it will not be listed
                <MudLink Color="Color.Primary" OnClick="MakePublicListed">Make public</MudLink>
            </MudAlert>
        }
        <MudPaper Elevation="5">
            <EditForm Model="Vm" OnValidSubmit="SaveChanges">
                <StatusResultValidator @ref="ResultValidator"/>
                <MudList Class="mt-4" Clickable="true">
                    <SettingsSection Text="General" InitiallyExpanded="true">
                        <MudListItem>
                            <MudTextField 
                                Label="Display Name" 
                                @bind-Value="Vm.NameFull"
                                Immediate="true"
                                DebounceInterval="500"
                                Adornment="Adornment.End" 
                                AdornmentIcon="@Icons.Material.Filled.Edit" 
                                Variant="Variant.Outlined" 
                                Class="me-4"/>
                        </MudListItem>
                        <MudListItem>
                            <MudField 
                                Label="Description" 
                                OnAdornmentClick="@(() => EditDescriptionClick(Vm))" 
                                Adornment="Adornment.End" 
                                AdornmentIcon="@Icons.Material.Filled.Edit" 
                                Variant="Variant.Outlined"
                                Class="me-4"
                            >
                                <div style="overflow-x: clip; overflow-y: auto; min-height: 4em; max-height: 12em;">
                                    @((MarkupString)RenderDescriptionPreview(Vm.Description))
                                </div>
                            </MudField>
                        </MudListItem>
                    </SettingsSection>

                    <MudDivider/>

                    <SettingsSection Text="Seasons" InitiallyExpanded="true">
                        @if (Vm.CurrentSeason != null)
                        {
                            <MudListSubheader>Current Season</MudListSubheader>
                            <MudListItem OnClick="@(() => SeasonClick(Vm.CurrentSeason))">
                                <SeasonPreview Season="Vm.CurrentSeason" Class="d-flex gap-2 align-center"/>
                            </MudListItem>
                        }
                        @if (Vm.Seasons.Count > 1)
                        {
                            <MudListItem @bind-Expanded="seasonsExpanded" Class="pe-4">
                                <ChildContent>
                                    <MudText Typo="Typo.caption">
                                        @if (seasonsExpanded)
                                        {
                                            @:Collapse seasons
                                        }
                                        else
                                        {
                                            @:Show all
                                        }
                                    </MudText>
                                </ChildContent>
                                <NestedList>
                                    @foreach ((var season, var index) in Bind(Vm, x => x.Seasons).Select((x, i) => (x, i)))
                                    {
                                        <MudListItem Class="py-0" OnClick="@(() => SeasonClick(season))">
                                            <MudElement HtmlTag="div" Class="d-flex align-center ms-4 me-4">
                                                <SeasonPreview Season="season" Class="d-flex gap-2 align-center" />
                                                <MudSpacer />
                                                <MudIconButton Icon="@Icons.Material.Outlined.Delete" Color="Color.Error" OnClick="@(() => DeleteSeasonClick(season))" Class="flex-grow-0" />
                                            </MudElement>
                                        </MudListItem>
                                        <MudDivider DividerType="DividerType.Middle" Class="ms-8"/>
                                    }
                                    <MudListItem>
                                        <MudButton StartIcon="@Icons.Material.Filled.Add" Color="Color.Tertiary" Class="ms-8">Add Season</MudButton>
                                    </MudListItem>
                                </NestedList>
                            </MudListItem>
                        }
                        else
                        {
                            <MudListItem>
                                <MudButton StartIcon="@Icons.Material.Filled.Add" Color="Color.Tertiary" Class="ms-4">Add Season</MudButton>
                            </MudListItem>
                        }
                    </SettingsSection>

                    <MudDivider />

                    <SettingsSection Text="Protests" InitiallyExpanded="true">
                        <SettingsSwitch 
                            Text="Protest Form"
                            HelperText="@(Vm.EnableProtests ? "Enabled: Users can submit protests" : "Protest forms are disabled")"
                            Color="Color.Primary" 
                            @bind-Checked="Vm.EnableProtests"/>
                        <SettingButton OnClick="ProtestSettingsClick" Disabled="!Vm.EnableProtests">
                            Protest Options
                        </SettingButton>
                    </SettingsSection>
                </MudList>
            </EditForm>
        </MudPaper>
    </Authorized>
    <NotAuthorized>
        You are not allowed here ...
    </NotAuthorized>
</AuthorizeView>

@code {
    private bool showLeagueHiddenAlert = true;
    private bool seasonsExpanded = false;

    private StatusResultValidator? ResultValidator { get; set; }

    private EventCallback OnChangeDebounced;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        RegisterLocationChangingHandler();
        OnChangeDebounced = EventCallback.Factory.Create(this, DebounceWrapper.Debounce(OnChanged, 500));
        Vm.HasChanged += OnVmChanged;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender == false)
        {
            return;
        }
        await Vm.LoadCurrent();
        await Vm.LoadSeasons();
        if (Vm.IsInitialized == false)
        {
            await ShowApplyTemplatesModal();
        }
    }

    private async Task AddSeasonClick()
    {
        var parameters = new DialogParameters<EditSeasonModal>()
        {
            {x => x.Model, new()},
            {x => x.OnSubmit, async (season, cancellation) => await Vm.AddSeason(season.GetModel(), cancellation)},
        };
        var result = await DialogService.Show<EditSeasonModal>("Add Season", parameters).Result;
    }

    private async Task SeasonClick(SeasonViewModel season)
    {
        var parameters = new DialogParameters<EditSeasonModal>()
        {
            {x => x.Model, season.CopyModel()},
            {x => x.OnSubmit, async (season, cancellation) => await season.SaveChangesAsync(cancellation)},
        };
        var result = await DialogService.Show<EditSeasonModal>("Edit Season", parameters).Result;
        if (result.Canceled == false && result.Data is SeasonModel seasonModel)
        {
            season.SetModel(seasonModel);
        }
    }

    private async Task ProtestSettingsClick()
    {
        var parameters = new DialogParameters<EditProtestSettingsModal>()
        {
            {x => x.Model, Vm.CopyModel()},
            {x => x.OnSubmit, async (league, cancellation) => await league.SaveChangesAsync(cancellation)},
        };
        var options = new DialogOptions()
        {
            FullWidth = false,
            MaxWidth = MaxWidth.ExtraSmall,
        };
        var result = await DialogService.Show<EditProtestSettingsModal>("Edit Protest Settings", parameters, options).Result;
        if (result.Canceled == false && result.Data is LeagueModel leagueModel)
        {
            Vm.SetModel(leagueModel);
        }
    }

    private async Task DeleteSeasonClick(SeasonViewModel season)
    {
        var parameters = new DialogParameters<MudConfirmModal>()
        {
            {x => x.Text, $"Really delete season \"{season.Name}\"?"},
            {x => x.ButtonTypes, ButtonTypes.YesNo},
        };
        var result = await DialogService.Show<MudConfirmModal>("Delete Season", parameters).Result;
        if (result.Canceled == false)
        {
            await Vm.DeleteSeason(season.GetModel());   
        }
    }

    private async Task EditLeagueNameClick(LeagueViewModel league)
    {
        var parameters = new DialogParameters<EditLeagueNameModal>()
        {
            {x => x.Model, league.CopyModel()},
            {x => x.OnSubmit, (vm, cancellation) => vm.SaveChangesAsync(cancellation)},
        };
        var result = await DialogService.Show<EditLeagueNameModal>("Edit league name", parameters).Result;
        if (result.Canceled == false && result.Data is LeagueModel model)
        {
            league.SetModel(model);
        }
    }

    private async Task EditDescriptionClick(LeagueViewModel league)
    {
        var parameters = new DialogParameters<EditLeagueDescriptionModal>()
        {
            {x => x.Model, league.CopyModel()},
            {x => x.OnSubmit, (vm, cancellation) => vm.SaveChangesAsync(cancellation)},
        };
        var result = await DialogService.Show<EditLeagueDescriptionModal>("Edit description", parameters).Result;
        if (result.Canceled == false && result.Data is LeagueModel model)
        {
            league.SetModel(model);
        }
    }

    private string RenderDescriptionPreview(string markdown)
    {
        return Markdig.Markdown.ToHtml(markdown, MarkdownPipeline);
    }

    private async Task ShowApplyTemplatesModal()
    {
        var parameters = new DialogParameters<MudConfirmModal>()
        {
            {x => x.Text, "Welcome to your new league. To speed up your setup process you can select the basic settings from a template"},
            {x => x.ButtonTypes, ButtonTypes.OkCancel},
            {x => x.OkButtonText, "Yes, select template"},
            {x => x.CancelButtonText, "No, start with empty league"},
        };
        var result = await DialogService.Show<MudConfirmModal>("Select league template", parameters).Result;
        if (result.Canceled == false)
        {
            // forward to select template page
            NavigateTo($"/{LeagueName}/Settings/Templates", returnUrl: GetReturnUrl());
            return;
        }
        await Vm.InitializeLeague(CancellationToken);
    }

    private async Task MakePublicListed()
    {
        Vm.LeaguePublic = LeaguePublicSetting.PublicListed;
        await Vm.SaveChangesAsync(CancellationToken);
    }

    private void OnVmChanged(object? sender, EventArgs e)
    {
        InvokeAsync(OnChangeDebounced.InvokeAsync);
    }

    private async Task OnChanged()
    {
        await SaveChanges();
    }

    private bool CheckForChanges()
    {
        return Vm.HasChanges;
    }

    private async Task SaveChanges()
    {
        if (CheckForChanges() == false)
        {
            return;
        }
        await Vm.SaveChangesAsync(CancellationToken);
    }
}
