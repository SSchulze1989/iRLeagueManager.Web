@page "/{LeagueName}/Settings/League"
@using iRLeagueApiCore.Common.Enums
@using iRLeagueApiCore.Common.Models
@using iRLeagueManager.Web.Components
@using iRLeagueManager.Web.Components.Settings
@using iRLeagueManager.Web.ViewModels
@inherits LeagueComponentBase
@layout SettingsLayout
@inject LeagueViewModel vm
@inject LeagueApiService apiService

<div @attributes=AdditionalAttributes>
    <div class="card my-2 pb-0">
        <div class="card-header">
            League Name
        </div>
        <div class="list-group list-group-flush">
            <div class="list-group-item list-group-item-action" type="button" @onclick=@(() => EditLeagueNameClick(vm))>
                <DisplayLeague League="vm.GetModel()" MuteTextOnFallback=true />
            </div>
        </div>
    </div>

    <div class="card my-2 pb-0">
        <div class="card-header">
            Seasons
        </div>
        <div class="list-group list-group-flush">
            @foreach((var season, var index) in @Bind(vm, x => x.Seasons).Select((x, i) => (x, i)))
            {
                <div class="list-group-item list-group-item-action d-flex justify-content-between align-items-start" type="button" @onclick=@(() => SeasonClick(season))>
                    <SeasonPreview Season=season />
                    <button class="btn btn-outline-danger" @onclick=@(() => DeleteSeasonClick(season)) @onclick:stopPropagation="true">
                        <span class="oi oi-trash"/>
                    </button>
                </div>
            }
            <div class="list-group-item">
                <button class="btn btn-outline-secondary" @onclick=AddSeasonClick>Add Season</button>
            </div>
        </div>
    </div>

    <div class="card my-2 pb-0">
        <div class="card-header">
            Protest Settings
        </div>
        <div class="list-group list-group-flush">
            <div class="list-group-item list-group-item-action" type="button" @onclick=ProtestSettingsClick>
               <b>Enabled:</b> @(vm.EnableProtests ? "True" : "False")<br/>
               @if (vm.EnableProtests)
                {
                    <b>Cooldown Period: </b> @($"{vm.CoolDownHrs:00}:{vm.CoolDownMinutes:00}")<br/>
                    <b>Protests closed after: </b> @($"{vm.ProtestsClosedHrs:00}:{vm.ProtestsClosedMinutes:00}")<br/>
                    <b>Public: </b> @vm.ProtestPublic
                }
            </div>
        </div>
    </div>
</div>

@code {
    [CascadingParameter]
    public IModalService ModalService { get; set; } = default!;

    [Parameter(CaptureUnmatchedValues = true)] 
    public IReadOnlyDictionary<string, object>? AdditionalAttributes { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender == false)
        {
            return;
        }
        await vm.LoadCurrent();
        await vm.LoadSeasons();
    }

    private async Task AddSeasonClick()
    {
        var parameters = new ModalParameters()
            .Add(nameof(EditSeasonModal.Model), new SeasonModel())
            .Add(nameof(EditSeasonModal.OnSubmit), new Func<SeasonViewModel, CancellationToken, Task<StatusResult>>(async (season, cts) => 
                await vm.AddSeason(season.GetModel(), cts)));
        var options = new ModalOptions()
        {
            DisableBackgroundCancel = true
        };
        var result = await ModalService.Show<EditSeasonModal>("Add Season", parameters, options).Result;
    }

    private async Task SeasonClick(SeasonViewModel season)
    {
        var parameters = new ModalParameters()
            .Add(nameof(EditSeasonModal.Model), season.CopyModel())
            .Add(nameof(EditSeasonModal.OnSubmit), new Func<SeasonViewModel, CancellationToken, Task<StatusResult>>(async (season, cts) => 
                await season.SaveChangesAsync(cts)));
        var options = new ModalOptions()
        {
            DisableBackgroundCancel = true
        };
        var result = await ModalService.Show<EditSeasonModal>("Edit Season", parameters, options).Result;
        if (result.Confirmed && result.Data is SeasonModel seasonModel)
        {
            season.SetModel(seasonModel);
        }
    }

    private async Task ProtestSettingsClick()
    {
        var parameters = new ModalParameters()
            .Add(nameof(EditProtestSettingsModal.Model), vm.CopyModel())
            .Add(nameof(EditProtestSettingsModal.OnSubmit), new Func<LeagueViewModel, CancellationToken, Task<StatusResult>>(async (season, cts) => 
                await season.SaveChangesAsync(cts)));
        var options = new ModalOptions()
        {
            DisableBackgroundCancel = true
        };
        var result = await ModalService.Show<EditProtestSettingsModal>("Edit Protest Settings", parameters, options).Result;
        if (result.Confirmed && result.Data is LeagueModel leagueModel)
        {
            vm.SetModel(leagueModel);
        }
    }

    private async Task DeleteSeasonClick(SeasonViewModel season)
    {
        var parameters = new ModalParameters()
            .Add(nameof(ConfirmModal.Text), $"Really delete season \"{season.Name}\"?")
            .Add(nameof(ConfirmModal.ButtonTypes), ButtonTypes.YesNo);
        var result = await ModalService.Show<ConfirmModal>("Delete Season", parameters).Result;
        if (result.Confirmed)
        {
            await vm.DeleteSeason(season.GetModel());   
        }
    }

    private async Task EditLeagueNameClick(LeagueViewModel league)
    {
        var parameters = new ModalParameters<EditLeagueNameModal>()
            .Add(x => x.Model, league.CopyModel())
            .Add(x => x.OnSubmit, (vm, cancellation) => vm.SaveChangesAsync(cancellation));
        var result = await ModalService.Show<EditLeagueNameModal>("Edit league name", parameters).Result;
        if (result.Confirmed && result.Data is LeagueModel model)
        {
            league.SetModel(model);
        }
    }
}
