@page "/{LeagueName}/Settings/Results"
@using iRLeagueApiCore.Common.Enums
@using iRLeagueApiCore.Common.Models
@using iRLeagueManager.Web.Components.Settings
@using iRLeagueManager.Web.Components;
@using iRLeagueManager.Web.ViewModels
@inherits LeagueComponentBase
@layout SettingsLayout
@inject ResultSettingsViewModel Vm
@inject LeagueApiService apiService
@inject SharedStateService sharedState
@inject ILogger<ResultSettings> logger
@attribute [Authorize]

<PageTitle>Settings - @LeagueName</PageTitle>

<LoadingHeader>
    <HeaderText>
        <MudText Typo="Typo.h5">Result Settings</MudText>
    </HeaderText>
</LoadingHeader>

<AuthorizeView Roles=@GetRoleString(LeagueRoles.Admin, LeagueRoles.Organizer) Context="AuthContext">
    <Authorized>
        <MudText Typo="Typo.h6" Class="mt-4 px-2">Championships</MudText>
        <MudPaper Elevation="5">
            <MudTable Items="Vm.Championships" Striped="true" Hover="true" Elevation="0" Breakpoint="Breakpoint.None">
                <HeaderContent>
                    <MudTh>Name</MudTh>
                    <MudTh>Type</MudTh>
                    <MudTh>Point Configs</MudTh>
                </HeaderContent>
                <RowTemplate Context=row>
                    @{var champSeason = Vm.CurrentChampSeasons.FirstOrDefault(x => x.ChampionshipId == row.ChampionshipId);}
                    <MudTd DataLabel="Name">
                        <MudLink Href="@($"{LeagueName}/Settings/Results/Championships/{row.ChampionshipId}")">@row.Name</MudLink>
                    </MudTd>
                    <MudTd DataLabel="Type">@champSeason?.ResultKind</MudTd>
                    <MudTd DataLabel="Point Configs">
                        @if (champSeason is not null)
                        {
                            @:@string.Join(", ", champSeason.ResultConfigs.Select(x => x.Name))
                        }
                    </MudTd>
                </RowTemplate>
            </MudTable>
        </MudPaper>
    </Authorized>
    <NotAuthorized>
        You are not allowed here ...
    </NotAuthorized>
</AuthorizeView>

@code {
    [CascadingParameter]
    public IModalService ModalService { get; set; } = default!;

    [Parameter(CaptureUnmatchedValues = true)] 
    public IReadOnlyDictionary<string, object>? AdditionalAttributes { get; set; }

    private async Task HandleSubmit()
    {
        logger.LogInformation("Handle submit called!");
        if (Vm.Selected == null)
        {
            return;
        }
        //await vm.Selected.SaveCurrentModelAsync();
        await Task.FromResult(true);
    }

    private async Task OnResultConfigClick(ResultConfigViewModel config)
    {
        var parameters = new ModalParameters<EditResultConfigModal>()
            .Add(x => x.Model, config.CopyModel())
            .Add(x => x.OnSubmit, new(async (vm, ct) => await vm.SaveChangesAsync(ct)));
        var options = new ModalOptions()
        {
            DisableBackgroundCancel = true,
            Size = ModalSize.Large,
        };
        var result = await ModalService.Show<EditResultConfigModal>("Edit Result Config", parameters, options).Result;
        if (result.Confirmed && result.Data is ResultConfigModel model)
        {
            config.SetModel(model);
        }
    }

    private async Task OnChampionshipClick(ChampSeasonViewModel champSeason)
    {
        NavigationManager.NavigateTo($"/{LeagueName}/Settings/Results/Championships/{champSeason.ChampionshipId}");
        //var parameters = new ModalParameters<EditChampSeasonModal>()
        //    .Add(x => x.Model, champSeason.CopyModel())
        //    .Add(x => x.OnSubmit, new((x, cancellation) => x.SaveChangesAsync(cancellation)));
        //var result = await ModalService.Show<EditChampSeasonModal>("Edit Championship", parameters).Result;
        //if (result.Confirmed && result.Data is ChampSeasonModel model)
        //{
        //    champSeason.SetModel(model);
        //}
        await Task.CompletedTask;
    }

    private async Task OnDeleteChampionshipClick(ChampionshipViewModel championship)
    {
        var parameters = new ModalParameters<ConfirmModal>()
            .Add(x => x.Text, $"Really delete championship {championship.Name}? This will also remove all settings from previous seasons but it will still keep the results.")
            .Add(x => x.ButtonTypes, ButtonTypes.YesNo);
        var result = await ModalService.Show<ConfirmModal>("Delete Championship", parameters).Result;
        if (result.Confirmed)
        {
            await Vm.DeleteChampionship(championship.GetModel());
        }
    }

    private async Task OnAddChampionshipClick()
    {
        var parameters = new ModalParameters<EditChampSeasonModal>()
            .Add(x => x.Model, CreateChampionshipFromTemplate())
            .Add(x => x.OnSubmit, (x, c) => Vm.AddChampionship(x.GetModel(), c));
        var result = await ModalService.Show<EditChampSeasonModal>("Create Championship", parameters).Result;
        if (result.Confirmed)
        {
            await Vm.LoadFromCurrentSeasonAsync();
        }
    }

    private async Task ToggleChampionshipActive(ChampionshipViewModel championship)
    {
        if (championship.IsActive)
        {
            await championship.DeactivateForCurrentSeasonAsync();
        }
        else
        {
            await championship.ActivateForSeasonAsync();
        }
        await Vm.LoadFromCurrentSeasonAsync();
    }

    private ResultConfigModel CreateConfigFromTemplate()
    {
        return new()
        {
            Name = "New Config",
            DisplayName = "New Config",
            Scorings = new List<ScoringModel>()
            {
                new()
                {
                    Name = "Race",
                    PointRule = new()
                    {
                        PointsSortOptions = new[] { SortOptions.IntvlAsc },
                        FinalSortOptions = new[] { SortOptions.TotalPtsDesc, SortOptions.PenPtsAsc }
                    }
                }
            },
        };
    }

    private ChampSeasonModel CreateChampionshipFromTemplate()
    {
        return new()
        {
            ChampionshipName = "",
            ChampionshipDisplayName = "",
            StandingConfig = new(),
        };
    }

    private async Task OnSeasonSelectChanged(SeasonModel season)
    {
        await Vm.LoadFromCurrentSeasonAsync();
        await InvokeAsync(StateHasChanged);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender == false)
        {
            return;
        }
        await Vm.LoadFromCurrentSeasonAsync();
        await InvokeAsync(StateHasChanged);
    }
}
