@using iRLeagueApiCore.Common.Enums
@using iRLeagueManager.Web.ViewModels
@inherits MvvmComponentBase
@inject ScoringsViewModel vm
@inject LeagueApiService apiService
@inject ILogger<SeasonSettings> logger

<h3>Results</h3>

<div class="grid-container" id="main-grid">
    <div class="grid-item" id="scoring-list-container">
        <select @bind="@SelectedScoringIndex" name="selected-scoring" id="scoring-select" size="2">
            @foreach((var scoring, var index) in @Bind(vm, x => x.Scorings).Select((x,i) => (x,i)))
            {
                <option value="@index" selected="@(index == 0)">@Bind(scoring, x => x.Name)</option>
            }
        </select>
    </div>
    <div class="grid-item" id="scoring-list-buttons-container">
        <button class="btn btn-primary">Add</button>
        <button class="btn btn-secondary">Delete</button>
    </div>
    <div class="grid-item" id="settings-container">
        <EditForm Model="@Selected" OnValidSubmit="@HandleSubmit">
            <DataAnnotationsValidator/>
            <ValidationSummary/>
            <fieldset disabled="@(Bind(Selected, x => x.Id) == 0)">
                <div class="form-grid">
                    <label>Scoring Id</label>
                    <label>@Bind(Selected, x => x.Id)</label>
                </div>
                <div class="form-grid" id="name">
                    <label>Name</label>
                    <InputText @bind-Value="Selected.Name" class="form-control"/>
                </div>
                <div class="form-grid" id="scoring_kind">
                    <label>Member or Team Scoring</label>
                    <InputSelect @bind-Value="Selected.ScoringKind" class="form-select">
                        @foreach(var scoringKind in Enum.GetValues<ScoringKind>())
                        {
                            <option value=@scoringKind>@scoringKind</option>
                        }
                    </InputSelect>
                </div>
                <div class="form-check-grid" id="check_values">
                    <label>Get Team from raw Result</label>
                    <InputCheckbox @bind-Value="Selected.UseResultSetTeam" class="form-check"/>
                    <label>Update Teams on recalcualtion</label>
                    <InputCheckbox @bind-Value="Selected.UpdateTeamOnRecalculation" class="form-check"/>
                    <label>Show results</label>
                    <InputCheckbox @bind-Value="Selected.ShowResults" class="form-check"/>
                </div>
                <div class="form-group">
                    <button disabled="@(Selected.Loading || !Selected.HasChanged)" class="btn btn-primary">
                        @if (@Selected.Saving) 
                        {
                            <span class="spinner-border spinner-border-sm mr-1"></span>
                        }
                        Save
                    </button>
                </div>
            </fieldset>
        </EditForm>
    </div>
</div>

@code {
    private ScoringViewModel Selected => vm.Selected;

    private int selectedScoringIndex;
    private int SelectedScoringIndex
    {
        get => selectedScoringIndex;
        set
        {
            selectedScoringIndex = value;
            vm.Selected = vm.Scorings.ElementAt(selectedScoringIndex);
            InvokeAsync(StateHasChanged);
        }
    }

    private async Task HandleSubmit()
    {
        logger.LogInformation("Handle submit called!");
        if (vm.Selected == null)
        {
            return;
        }
        await vm.Selected.SaveCurrentModelAsync();
    }

    private void OnSelectedScoringChange(ChangeEventArgs e)
    {
        if (e.Value == null)
        {
            return;
        }
        SelectedScoringIndex = (int)e.Value;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender == false)
        {
            return;
        }
        if (apiService.CurrentLeague != null && apiService.Shared.SeasonId != 0)
        {
            await vm.LoadFromSeason(apiService.Shared.SeasonId);            
        }
        SelectedScoringIndex = 0;
        await InvokeAsync(StateHasChanged);
    }
}
