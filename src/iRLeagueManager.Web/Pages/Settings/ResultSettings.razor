@page "/{LeagueName}/Settings/Results"
@using iRLeagueApiCore.Common.Enums
@using iRLeagueApiCore.Common.Models
@using iRLeagueManager.Web.Components.Settings
@using iRLeagueManager.Web.Components;
@using iRLeagueManager.Web.ViewModels
@inherits LeagueComponentBase
@layout SettingsLayout
@inject ResultSettingsViewModel vm
@inject LeagueApiService apiService
@inject SharedStateService sharedState
@inject ILogger<ResultSettings> logger
@attribute [Authorize]

<PageTitle>Settings - @LeagueName</PageTitle>

<AuthorizeView Roles=@GetRoleString(LeagueRoles.Admin, LeagueRoles.Organizer) Context="AuthContext">
    <Authorized>
        <div class="input-group mt-2 mb-3">
            <label class="input-group-text">Season</label>
            <SeasonSelect SeasonChanged=OnSeasonSelectChanged />
        </div>
        <div class="card my-2 pb-0">
            <div class="card-header">
                Championships
            </div>
            <div class="list-group list-group-flush">
                @foreach ((var championship, var index) in @Bind(vm, x => x.Championships).OrderByDescending(x => x.IsActive).Select((x, i) => (x, i)))
                {
                    var champSeason = vm.CurrentChampSeasons.FirstOrDefault(x => x.ChampionshipId == championship.ChampionshipId);
                    var disabled = champSeason == null;
                    <div class="list-group-item @(disabled ? "" : "list-group-item-action") d-flex justify-content-between align-items-start" type="button" @onclick=@(async () => { if (champSeason is not null) await OnChampionshipClick(champSeason); })>
                        <ChampionshipPreview Championship=championship ChampSeason=champSeason class="flex-fill" />
                        <div>
                            <label class="switch" @onclick:stopPropagation>
                                <input type="checkbox" checked="@championship.IsActive" @onclick=@(() => ToggleChampionshipActive(championship)) @onclick:stopPropagation @onclick:preventDefault />
                                <span class="slider round"></span>
                            </label>
                            <button class="btn btn-outline-danger" @onclick=@(() => OnDeleteChampionshipClick(championship)) @onclick:stopPropagation="true">
                                <span class="oi oi-trash" />
                            </button>
                        </div>
                    </div>
                }
                <div class="list-group-item">
                    <button class="btn btn-outline-secondary" type="button" @onclick=OnAddChampionshipClick>
                        Create new Championship
                    </button>
                </div>
            </div>
        </div>
    </Authorized>
    <NotAuthorized>
        You are not allowed here ...
    </NotAuthorized>
</AuthorizeView>

@code {
    [CascadingParameter]
    public IModalService ModalService { get; set; } = default!;

    [Parameter(CaptureUnmatchedValues = true)] 
    public IReadOnlyDictionary<string, object>? AdditionalAttributes { get; set; }

    private async Task HandleSubmit()
    {
        logger.LogInformation("Handle submit called!");
        if (vm.Selected == null)
        {
            return;
        }
        //await vm.Selected.SaveCurrentModelAsync();
        await Task.FromResult(true);
    }

    private async Task OnResultConfigClick(ResultConfigViewModel config)
    {
        var parameters = new ModalParameters<EditResultConfigModal>()
            .Add(x => x.Model, config.CopyModel())
            .Add(x => x.OnSubmit, new(async (vm, ct) => await vm.SaveChangesAsync(ct)));
        var options = new ModalOptions()
        {
            DisableBackgroundCancel = true,
            Size = ModalSize.Large,
        };
        var result = await ModalService.Show<EditResultConfigModal>("Edit Result Config", parameters, options).Result;
        if (result.Confirmed && result.Data is ResultConfigModel model)
        {
            config.SetModel(model);
        }
    }

    private async Task OnChampionshipClick(ChampSeasonViewModel champSeason)
    {
        NavigationManager.NavigateTo($"/{LeagueName}/Settings/Results/Championships/{champSeason.ChampionshipId}");
        //var parameters = new ModalParameters<EditChampSeasonModal>()
        //    .Add(x => x.Model, champSeason.CopyModel())
        //    .Add(x => x.OnSubmit, new((x, cancellation) => x.SaveChangesAsync(cancellation)));
        //var result = await ModalService.Show<EditChampSeasonModal>("Edit Championship", parameters).Result;
        //if (result.Confirmed && result.Data is ChampSeasonModel model)
        //{
        //    champSeason.SetModel(model);
        //}
        await Task.CompletedTask;
    }

    private async Task OnDeleteChampionshipClick(ChampionshipViewModel championship)
    {
        var parameters = new ModalParameters<ConfirmModal>()
            .Add(x => x.Text, $"Really delete championship {championship.Name}? This will also remove all settings from previous seasons but it will still keep the results.")
            .Add(x => x.ButtonTypes, ButtonTypes.YesNo);
        var result = await ModalService.Show<ConfirmModal>("Delete Championship", parameters).Result;
        if (result.Confirmed)
        {
            await vm.DeleteChampionship(championship.GetModel());
        }
    }

    private async Task OnAddChampionshipClick()
    {
        var parameters = new ModalParameters<EditChampSeasonModal>()
            .Add(x => x.Model, CreateChampionshipFromTemplate())
            .Add(x => x.OnSubmit, (x, c) => vm.AddChampionship(x.GetModel(), c));
        var result = await ModalService.Show<EditChampSeasonModal>("Create Championship", parameters).Result;
        if (result.Confirmed)
        {
            await vm.LoadFromCurrentSeasonAsync();
        }
    }

    private async Task ToggleChampionshipActive(ChampionshipViewModel championship)
    {
        if (championship.IsActive)
        {
            await championship.DeactivateForCurrentSeasonAsync();
        }
        else
        {
            await championship.ActivateForSeasonAsync();
        }
        await vm.LoadFromCurrentSeasonAsync();
    }

    private ResultConfigModel CreateConfigFromTemplate()
    {
        return new()
        {
            Name = "New Config",
            DisplayName = "New Config",
            Scorings = new List<ScoringModel>()
            {
                new()
                {
                    Name = "Race",
                    PointRule = new()
                    {
                        PointsSortOptions = new[] { SortOptions.IntvlAsc },
                        FinalSortOptions = new[] { SortOptions.TotalPtsDesc, SortOptions.PenPtsAsc }
                    }
                }
            },
        };
    }

    private ChampSeasonModel CreateChampionshipFromTemplate()
    {
        return new()
        {
            ChampionshipName = "",
            ChampionshipDisplayName = "",
            StandingConfig = new(),
        };
    }

    private async Task OnSeasonSelectChanged(SeasonModel season)
    {
        await vm.LoadFromCurrentSeasonAsync();
        await InvokeAsync(StateHasChanged);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender == false)
        {
            return;
        }
        await vm.LoadFromCurrentSeasonAsync();
        await InvokeAsync(StateHasChanged);
    }
}
