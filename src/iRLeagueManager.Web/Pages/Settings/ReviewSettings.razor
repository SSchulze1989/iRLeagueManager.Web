@page "/{LeagueName}/Settings/Reviews"
@using iRLeagueApiCore.Common.Models.Reviews;
@using iRLeagueManager.Web.Components.Settings;
@using iRLeagueManager.Web.Components;
@inherits LeagueComponentBase
@layout SettingsLayout
@inject ReviewSettingsViewModel Vm

<PageTitle>Settings - @LeagueName</PageTitle>

<div @attributes=AdditionalAttributes>
    <div class="card my-2 pb-0">
        <div class="card-header">
            Vote Categories
        </div>
        <div class="list-group list-group-flush">
            @foreach(var voteCategory in Vm.VoteCategories)
            {
                <div class="list-group-item list-group-item-action d-flex justify-content-between align-items-start" type="button" @onclick=@(() => OnVoteCategoryClick(voteCategory))>
                    <div class="w-75">
                        <div class="row">
                            <div class="col">
                                <h5>Text</h5>
                            </div>
                            <div class="col">
                                <h5>Penalty</h5>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col">
                                @voteCategory.Text
                            </div>
                            <div class="col">
                                @voteCategory.DefaultPenalty
                            </div>
                        </div>
                    </div>
                    <button class="btn btn-outline-danger" @onclick=@(() => OnDeleteVoteCategoryClick(voteCategory)) @onclick:stopPropagation>
                        <span class="oi oi-trash"/>
                    </button>
                </div>
            }
        </div>
    </div>
    <button class="btn btn-outline-secondary" @onclick=OnAddVoteCategoryClick>Add Vote Category</button>
</div>

@code {
    [CascadingParameter]
    public IModalService ModalService { get; set; } = default!;

    [Parameter(CaptureUnmatchedValues = true)]
    public IReadOnlyDictionary<string, object>? AdditionalAttributes { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender == false)
        {
            return;
        }
        await Vm.LoadAsync();
        await InvokeAsync(StateHasChanged);
    }

    private async Task OnVoteCategoryClick(VoteCategoryViewModel voteCategory)
    {
        var parameters = new ModalParameters<EditVoteCategoryModal>()
            .Add(x => x.Model, voteCategory.CopyModel())
            .Add(x => x.OnSubmit, new(async (category, cancellation) => await category.SaveChangesAsync(cancellation)));
        var options = new ModalOptions()
        {
            DisableBackgroundCancel = true,
        };
        var result = await ModalService.Show<EditVoteCategoryModal>("Edit Vote Category", parameters, options).Result;
        if (result.Confirmed && result.Data is VoteCategoryModel model)
        {
            voteCategory.SetModel(model);
        }
    }

    private async Task OnAddVoteCategoryClick()
    {
        var parameters = new ModalParameters<EditVoteCategoryModal>()
            .Add(x => x.Model, CreateVoteCategoryTemplate())
            .Add(x => x.OnSubmit, new(async (category, cancellation) => await Vm.AddVoteCategory(category.GetModel(), cancellation)));
        var options = new ModalOptions()
        {
            DisableBackgroundCancel = true,
        };
        await ModalService.Show<EditVoteCategoryModal>("Add Vote Category", parameters, options).Result;
    }

    private async Task OnDeleteVoteCategoryClick(VoteCategoryViewModel voteCategory)
    {
        var parameters = new ModalParameters<ConfirmModal>()
            .Add(x => x.Text, $"Really delete vote category \"{voteCategory.Text}\"?")
            .Add(x => x.ButtonTypes, ButtonTypes.YesNo);
        var result = await ModalService.Show<ConfirmModal>("Delete Vote Category", parameters).Result;
        if (result.Confirmed)
        {
            await Vm.DeleteVoteCategory(voteCategory.GetModel());
        }
    }

    private VoteCategoryModel CreateVoteCategoryTemplate()
    {
        return new()
        {
            Index = Vm.VoteCategories.Max(x => x.Index) + 1,
        };
    }
}
