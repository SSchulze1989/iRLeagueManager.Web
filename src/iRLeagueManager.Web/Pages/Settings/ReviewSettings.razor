@page "/{LeagueName}/Settings/Reviews"
@using iRLeagueApiCore.Common.Enums
@using iRLeagueApiCore.Common.Models
@using iRLeagueApiCore.Common.Models.Reviews;
@using iRLeagueManager.Web.Components.Settings;
@using iRLeagueManager.Web.Components;
@inherits LeagueComponentBase
@layout SettingsLayout
@inject LeagueViewModel League
@inject ReviewSettingsViewModel Reviews
@inject IDialogService DialogService
@attribute [Authorize]

<PageTitle>
    Settings - @LeagueName
</PageTitle>

<LoadingHeader Loading="Loading">
    <HeaderText>
        <MudText Typo="Typo.h5">Review Settings</MudText>
    </HeaderText>
</LoadingHeader>

<AuthorizeView Roles=@GetRoleString(LeagueRoles.Admin, LeagueRoles.Organizer) Context="AuthContext">
    <Authorized>
        <SettingsTopSection Class="mt-2">
            <SettingsSwitch Text="Enable Protests"
                            HelperText="@(League.EnableProtests ? "Enabled: Users can submit protests" : "Protest are disabled")"
                            Color="Color.Primary"
                            @bind-Checked="League.EnableProtests" />
            <SettingsItem HelperText="Configure open time, cooldown and public settings" OnClick="ProtestSettingsClick" Disabled="!League.EnableProtests">
                Protest Options
            </SettingsItem>
            <SettingsSection Text="Incident Categories"
                             @bind-Expanded=categoriesExpanded
                             HelperText="@(categoriesExpanded ? "Collapse" : "Expand")"
                             InitiallyExpanded="false"
                             Class="me-4 pe-4">
                <MudTable Items="Bind(Reviews, x => x.VoteCategories)"
                          Breakpoint="Breakpoint.None"
                          Hover="true"
                          OnRowClick="@((TableRowClickEventArgs<VoteCategoryViewModel> e) => OnVoteCategoryClick(e.Item))">
                    <HeaderContent>
                        <MudTh Class="ps-4">Text</MudTh>
                        <MudTh>Penalty/Bonus</MudTh>
                        <MudTh></MudTh>
                    </HeaderContent>
                    <RowTemplate Context=category>
                        <MudTd Class="ps-4">
                            @category.Text
                        </MudTd>
                        <MudTd>
                            @category.DefaultPenalty
                        </MudTd>
                        <MudTd>
                            <MudIconButton Icon="@Icons.Material.Outlined.Delete" Color="Color.Error" OnClick="@(() => OnDeleteVoteCategoryClick(category))" Size="Size.Small" />
                        </MudTd>
                    </RowTemplate>
                </MudTable>
                <SettingsItem Icon="@Icons.Material.Outlined.Add" Text="Add Vote Category" OnClick="OnAddVoteCategoryClick" Color="Color.Tertiary" />
                <SettingsItem OnClick="() => categoriesExpanded = false">
                    <MudText Typo="Typo.caption">Collapse Categories</MudText>
                </SettingsItem>
            </SettingsSection>
        </SettingsTopSection>
    </Authorized>
    <NotAuthorized>
        You are not allowed here ...
    </NotAuthorized>
</AuthorizeView>

@code {
    private bool Loading => Bind(League, x => x.Loading) || Bind(Reviews, x => x.Loading);

    private bool categoriesExpanded = false;

    private EventCallback OnChangeDebounced;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        OnChangeDebounced = EventCallback.Factory.Create(this, DebounceWrapper.Debounce(OnChanged, 500));
        League.HasChanged += OnVmChanged;
        Reviews.HasChanged += OnVmChanged;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender == false)
        {
            return;
        }
        await League.LoadCurrent(CancellationToken);
        await Reviews.LoadAsync(CancellationToken);
        await InvokeAsync(StateHasChanged);
    }

    private async Task ProtestSettingsClick()
    {
        var parameters = new DialogParameters<EditProtestSettingsModal>()
        {
            {x => x.Model, League.CopyModel()},
            {x => x.OnSubmit, async (league, cancellation) => await league.SaveChangesAsync(cancellation)},
        };
        var options = new DialogOptions()
            {
                FullWidth = false,
                MaxWidth = MaxWidth.ExtraSmall,
            };
        var result = await DialogService.Show<EditProtestSettingsModal>("Edit Protest Settings", parameters, options).Result;
        if (result.Canceled == false && result.Data is LeagueModel leagueModel)
        {
            League.SetModel(leagueModel);
        }
    }

    private async Task OnVoteCategoryClick(VoteCategoryViewModel voteCategory)
    {
        var parameters = new DialogParameters<EditVoteCategoryModal>()
        {
            {x => x.Model, voteCategory.CopyModel()},
            {x => x.OnSubmit, new(async (category, cancellation) => await category.SaveChangesAsync(cancellation))},
        };
        var result = await DialogService.Show<EditVoteCategoryModal>("Edit Vote Category", parameters).Result;
        if (result.Canceled == false && result.Data is VoteCategoryModel model)
        {
            voteCategory.SetModel(model);
        }
    }

    private async Task OnAddVoteCategoryClick()
    {
        var parameters = new DialogParameters<EditVoteCategoryModal>()
        {
            {x => x.Model, CreateVoteCategoryTemplate()},
            {x => x.OnSubmit, new(async (category, cancellation) => await Reviews.AddVoteCategory(category.GetModel(), cancellation))},
        };
        await DialogService.Show<EditVoteCategoryModal>("Add Vote Category", parameters).Result;
    }

    private async Task OnDeleteVoteCategoryClick(VoteCategoryViewModel voteCategory)
    {
        var parameters = new DialogParameters<MudConfirmModal>()
        {
            {x => x.Text, $"Really delete vote category \"{voteCategory.Text}\"?"},
            {x => x.ButtonTypes, ButtonTypes.YesNo},
        };
        var result = await DialogService.Show<MudConfirmModal>("Delete Vote Category", parameters).Result;
        if (result.Canceled == false)
        {
            await Reviews.DeleteVoteCategory(voteCategory.GetModel());
        }
    }

    private VoteCategoryModel CreateVoteCategoryTemplate()
    {
        return new()
            {
                Index = Reviews.VoteCategories.Any() ? Reviews.VoteCategories.Max(x => x.Index) + 1 : 0,
            };
    }

    private void OnVmChanged(object? sender, EventArgs e)
    {
        InvokeAsync(OnChangeDebounced.InvokeAsync);
    }

    private async Task OnChanged()
    {
        await SaveChanges();
    }

    private async Task SaveChanges()
    {
        if (League.HasChanges)
        {
            await League.SaveChangesAsync(CancellationToken);
        }
    }

    protected override void Dispose(bool disposing)
    {
        if (disposing)
        {
            League.HasChanged -= OnVmChanged;
            Reviews.HasChanged -= OnVmChanged;
        }
        base.Dispose(disposing);
    }
}
