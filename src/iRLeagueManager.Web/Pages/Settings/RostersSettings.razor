@page "/{LeagueName}/Settings/Rosters"
@using iRLeagueApiCore.Common.Enums
@using iRLeagueApiCore.Common.Models
@using iRLeagueApiCore.Common.Models.Rosters
@using iRLeagueManager.Web.Components
@using iRLeagueManager.Web.ViewModels
@inherits LeagueComponentBase
@layout SettingsLayout
@inject ILogger<ResultSettings> Logger
@inject IDialogService DialogService
@inject BreadCrumbService BreadCrumbService
@attribute [Authorize]

<PageTitle>
    Rosters - @LeagueName
</PageTitle>

<MudBreadcrumbs Items="BreadCrumbService.Items" />
<LoadingHeader Loading="Shared.Loading">
    <HeaderText>
        <MudStack Row="true" AlignItems="AlignItems.Center">
            <MudText Typo="Typo.h5">Manage Rosters</MudText>
        </MudStack>
    </HeaderText>
</LoadingHeader>

<AuthorizeView Roles=@GetRoleString(LeagueRoles.Admin, LeagueRoles.Organizer) Context="AuthContext">
    <Authorized>
        <MudTable Items="Rosters">
            <HeaderContent>
                <MudTh>Name</MudTh>
                <MudTh>Description</MudTh>
                <MudTh></MudTh>
                <MudTh>Actions</MudTh>
            </HeaderContent>
            <RowTemplate Context="Roster">
                <MudTd>
                    <MudLink Href="@GetLeagueLink($"settings/Rosters/{Roster.RosterId}")">@Roster.Name</MudLink>
                </MudTd>
                <MudTd>@Roster.Description</MudTd>
                <MudTd>Driver count: @Roster.EntryCount</MudTd>
                <MudTd>
                    <MudStack Row="true" Spacing="2">
                        <MudIconButton Size="Size.Small" Icon="@Icons.Material.Filled.Edit" OnClick="@(() => EditRosterClick(Roster))"/>
                        <MudIconButton Size="Size.Small" Icon="@Icons.Material.Filled.Delete" Color="Color.Error" />
                    </MudStack>
                </MudTd>
            </RowTemplate>
        </MudTable>
        <MudButton StartIcon="@Icons.Material.Filled.Add" OnClick="AddRosterClick">Add Roster</MudButton>
    </Authorized>
    <NotAuthorized>
        You are not allowed here ...
    </NotAuthorized>
</AuthorizeView>

@code {
    [Parameter]
    public long? RosterId { get; set; }

    private List<RosterInfoModel> Rosters { get; set; } = [];

    private async Task<StatusResult> AddRoster(string? name, CancellationToken cancellationToken)
    {
        if (name is null)
        {
            return StatusResult.FailedResult("Error", "Name is required", []);
        }
        if (ApiService.CurrentLeague is null)
        {
            return LeagueNullResult();
        }

        try
        {
            Loading = true;
            var newRoster = new PostRosterModel()
                {
                    Name = name,
                };
            var result = await ApiService.CurrentLeague.Rosters()
                .Post(newRoster, cancellationToken);
            return result.ToStatusResult();
        }
        finally
        {
            Loading = false;
        }
    }

    private async Task<StatusResult> LoadFromCurrentLeague(CancellationToken cancellationToken)
    {
        if (ApiService.CurrentLeague is null)
        {
            return LeagueNullResult();
        }

        try
        {
            Loading = true;
            var loadRosters = await ApiService.CurrentLeague.Rosters()
                .Get(cancellationToken)
                .ConfigureAwait(false);
            if (!loadRosters.Success || loadRosters.Content is not IEnumerable<RosterInfoModel> rosters)
            {
                return loadRosters.ToStatusResult();
            }
            Rosters = rosters.ToList();

            return StatusResult.SuccessResult();
        }
        finally
        {
            Loading = false;
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender == false)
        {
            return;
        }
        await LoadFromCurrentLeague(CancellationToken);
        BreadCrumbService.Items = new List<BreadcrumbItem>()
        {
            new("Rosters", $"{LeagueName}/Settings/Rosters")
        };
        await InvokeAsync(StateHasChanged);
    }

    private async Task AddRosterClick()
    {
        var parameters = new DialogParameters<TextPromptDialog<string>>()
        {
            {x => x.Label, "Name"},
            {x => x.Placeholder, "My new Roster"},
            {x => x.OnSubmit, async (value, cancellation) => (await AddRoster(value, cancellation)).IsSuccess},
            {x => x.OkText, "Add"},
        };
        var result = await DialogService.Show<TextPromptDialog<string>>("Add Roster", parameters).Result;
        if (result?.Canceled == false)
        {
            await LoadFromCurrentLeague(CancellationToken);
        }
    }

    private async Task EditRosterClick(RosterInfoModel roster)
    {
        var rosterModel = new RosterModel()
        {
                Description = roster.Description,
                Name = roster.Name,
                RosterId = roster.RosterId,
        };
        var parameters = new DialogParameters<EditRosterDialog>()
        {
            {x => x.Model, rosterModel},
            {x => x.OnSubmit, async (vm, cancellationToken) => await vm.Save(cancellationToken) }
        };
        var result = await DialogService.Show<EditRosterDialog>("Edit Roster", parameters).Result;
        if (result?.Canceled == false)
        {
            await LoadFromCurrentLeague(CancellationToken);
        }
    }
}
