@page "/{LeagueName}/Settings"
@page "/{LeagueName}/Settings/Season/{SeasonId:long}"
@attribute [Authorize]
@using System.Text
@using iRLeagueManager.Web.Components
@using iRLeagueManager.Web.Components.Settings
@inherits LeagueComponentBase
@inject NavigationManager navigationManager

<div class="container-md">
    <LoadingHeader><h3>Settings</h3></LoadingHeader>
    <AuthorizeView Roles=@GetRoleString(LeagueRoles.Admin)>
        <Authorized>
            <div style="height: 600px">
                <ul class="nav nav-tabs">
                    <li class="nav-item">
                        <NavLink class="nav-link" href="@GetTabLink(0)">Season</NavLink>
                    </li>
                    <li class="nav-item">
                        <NavLink class="nav-link" href="@GetTabLink(1)">Users</NavLink>
                    </li>
                    <li class="nav-item">
                        <NavLink class="nav-link" href="@GetTabLink(2)">Results</NavLink>
                    </li>
                </ul>

                @if (HasRendered)
                {
                    @switch (selectedTabIndex)
                    {
                        case 0:
                            <SeasonSettings />
                            break;
                        case 1:
                            <UserSettings class="container-md px-0 mb-2 mx-0" />
                            break;
                        case 2:
                            <ResultSettings class="container-md px-0 mb-2 mx-0" />
                            break;
                        default:
                            <p><em>Index out of bounds!</em></p>
                            break;
                    }
                }
            </div>
        </Authorized>
        <NotAuthorized>
            You are not allowed Here!
        </NotAuthorized>
    </AuthorizeView>
</div>

@code {
    // Query parameters
    private int selectedTabIndex;
    private int SelectedTabIndex 
    {
        get => selectedTabIndex;
        set
        {
            if (selectedTabIndex != value)
            {
                selectedTabIndex = value;
                _ = SelectedTabChanged();
            }
        }
    }

    protected override void OnInitialized()
    {
        navigationManager.LocationChanged += OnLocationChanged;
    }

    public async Task SelectedTabChanged()
    {
        await InvokeAsync(StateHasChanged);
    }

    protected override void RedirectUrl()
    {
        navigationManager.NavigateTo($"./{LeagueName}/Settings/Season/{SeasonId}");
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        SelectedTabIndex = navigationManager.QueryParameter<int>("tabIndex");
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender == false)
        {
            return;
        }
        SelectedTabIndex = navigationManager.QueryParameter<int>("tabIndex");
    }

    private string GetTabLink(int tabIndex)
    {
        var url = navigationManager.GetUriWithQueryParameter("tabIndex", tabIndex);
        return url;
    }

    protected override void Dispose(bool disposing)
    {
        navigationManager.LocationChanged -= OnLocationChanged;
        base.Dispose(disposing);
    }
}
