@page "/{LeagueName}/Settings"
@page "/{LeagueName}/Settings/Season/{SeasonId:long}"
@using System.Text
@using iRLeagueManager.Web.Components
@using iRLeagueManager.Web.Components.Settings
@inherits LeagueComponentBase
@layout SettingsLayout
@inject NavigationManager navigationManager


<AuthorizeView Roles=@GetRoleString(LeagueRoles.Admin, LeagueRoles.Organizer)>
    <Authorized>
        <div>
            @if (HasRendered)
            {
                @switch (selectedTabIndex)
                {
                    case 0:
                        <LeagueSettings />
                        break;
                    case 1:
                        <UserSettings />
                        break;
                    case 2:
                        <ResultSettings />
                        break;
                    case 3:
                        <TeamSettings />
                        break;
                    case 4:
                        <ReviewSettings />
                        break;
                    default:
                        <p><em>Index out of bounds!</em></p>
                        break;
                }
            }
        </div>
    </Authorized>
    <NotAuthorized>
        You are not allowed Here!
    </NotAuthorized>
</AuthorizeView>


@code {
    // Query parameters
    private int selectedTabIndex;
    private int SelectedTabIndex 
    {
        get => selectedTabIndex;
        set
        {
            if (selectedTabIndex != value)
            {
                selectedTabIndex = value;
                _ = SelectedTabChanged();
            }
        }
    }

    private IDisposable? locationChangingHandler { get; set; }

    protected override void OnInitialized()
    {
        navigationManager.LocationChanged += OnLocationChanged;
        navigationManager.RegisterLocationChangingHandler(LocationChanging);
    }

    public async Task SelectedTabChanged()
    {
        await InvokeAsync(StateHasChanged);
    }

    protected override void RedirectUrl()
    {
        navigationManager.NavigateTo($"./{LeagueName}/Settings/Season/{SeasonId}");
    }

    private async ValueTask LocationChanging(LocationChangingContext context)
    {
        if (context.TargetLocation.Contains($"/{LeagueName}/Settings") == false)
        {
            context.PreventNavigation();
        }
        await Task.CompletedTask;
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        SelectedTabIndex = navigationManager.QueryParameter<int>("tabIndex");
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender == false)
        {
            return;
        }
        SelectedTabIndex = navigationManager.QueryParameter<int>("tabIndex");
        await InvokeAsync(StateHasChanged);
    }

    protected override void Dispose(bool disposing)
    {
        navigationManager.LocationChanged -= OnLocationChanged;
        locationChangingHandler?.Dispose();
        base.Dispose(disposing);
    }
}
