@page "/{LeagueName}/Settings/Users"
@using iRLeagueManager.Web.Components
@using iRLeagueManager.Web.ViewModels
@layout SettingsLayout
@inherits LeagueComponentBase
@inject LeagueUsersViewModel Users
@inject IDialogService DialogService
@attribute [Authorize]

<PageTitle>
    Settings - @LeagueName
</PageTitle>

<LoadingHeader Loading="@Bind(Users, x => x.Loading)">
    <HeaderText>
        <MudText Typo="Typo.h5">User Settings</MudText>
    </HeaderText>
</LoadingHeader>

<AuthorizeView Roles=@GetRoleString(LeagueRoles.Admin) Context="AuthContext">
    <Authorized>
        <MudText Typo="Typo.h6" Class="px-2 mt-2">Members and Roles</MudText>
        <MudPaper Elevation="5">
            <MudSimpleTable Striped="true">
                <thead>
                    <tr>
                        <th>Name</th>
                        @foreach (var role in LeagueRoles.RolesAvailable)
                        {
                            <th style="text-align: center">@role</th>
                        }
                    </tr>
                </thead>
                <tbody>
                    @foreach (var user in @Bind(Users, x => x.LeagueUsers))
                    {
                        <tr>
                            <td>
                                <DisplayUser User=@user.GetModel() ShowUserName=false />
                            </td>
                            @foreach (var role in LeagueRoles.RolesAvailable)
                            {
                                <td>
                                    @{
                                        var disabled = user.IsImplicitRole(role) || role == LeagueRoles.Owner;
                                    }
                                    <div class="d-flex justify-center">
                                        <MudCheckBox Checked="@(user.HasRole(role))"
                                                     CheckedChanged="@((bool active) => SetUserRole(user, role, active))"
                                                     Disabled="disabled"
                                                     Dense="true"
                                                     Color="Color.Primary" />
                                    </div>
                                </td>
                            }
                        </tr>
                    }
                </tbody>
            </MudSimpleTable>
        </MudPaper>
        <MudButton Color="Color.Tertiary" StartIcon="@Icons.Material.Filled.Add" OnClick=OpenAddUser>Search User</MudButton>
    </Authorized>
    <NotAuthorized>
        <MudPaper Elevation="5" Class="pa-4">
            You are not allowed here ...
        </MudPaper>
    </NotAuthorized>
</AuthorizeView>

@code {
    [Parameter(CaptureUnmatchedValues = true)] public IReadOnlyDictionary<string, object>? AdditionalAttributes { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender == false)
        {
            return;
        }
        await Users.LoadAsync();
    }

    private async Task SetUserRole(LeagueUserViewModel user, LeagueRoleValue role, bool active)
    {
        if (active == false)
        {
            if (await ConfirmRemoveRole(user, role))
            {
                await user.RemoveRoleAsync(role);
            }
            return;
        }
        if (await ConfirmAddRole(user, role))
        {
            await user.AddRoleAsync(role);
        }
    }

    private async Task<bool> ConfirmRemoveRole(LeagueUserViewModel user, LeagueRoleValue role)
    {
        var parameters = new DialogParameters<ConfirmModal>()
        {
            {x => x.Text, $"Remove role \"{role}\" from user \"{user.UserName}\""},
            {x => x.ButtonTypes, ButtonTypes.YesNo},
        };
        var confirm = await DialogService.Show<ConfirmModal>("Confirm Remove Role", parameters).Result;
        if (confirm.Canceled)
        {
            return false;
        }
        return true;
    }

    private async Task<bool> ConfirmAddRole(LeagueUserViewModel user, LeagueRoleValue role)
    {
        var parameters = new DialogParameters<ConfirmModal>()
        {
            {x => x.Text, $"Add role \"{role}\" to user \"{user.UserName}\""},
            {x => x.ButtonTypes, ButtonTypes.YesNo},
        };
        var confirm = await DialogService.Show<ConfirmModal>("Confirm Add Role", parameters).Result;
        if (confirm.Canceled)
        {
            return false;
        }
        return true;
    }

    private async Task OpenAddUser()
    {
        var parameters = new DialogParameters<SearchUserDialog>()
        {
            {x => x.LeagueUsers, Users},
        };
        await DialogService.Show<SearchUserDialog>("Search User", parameters).Result;
    }
}
