@page "/{LeagueName}/Standings/Events/{EventId:long}"
@page "/{LeagueName}/Standings/Seasons/{SeasonId:long}"
@page "/{LeagueName}/Standings"
@using System.ComponentModel
@using Microsoft.AspNetCore.WebUtilities
@using Microsoft.EntityFrameworkCore.Query
@using Microsoft.Extensions.Primitives
@using System.Linq.Expressions
@using iRLeagueApiCore.Common.Models
@using iRLeagueManager.Web.Components
@using iRLeagueManager.Web.ViewModels
@inherits LeagueComponentBase
@inject StandingsPageViewModel vm

<PageTitle>
    Standings - @LeagueName
</PageTitle>

<MudContainer MaxWidth="MaxWidth.ExtraLarge">
    <LoadingHeader Loading=@Bind(vm, x => x.Loading)>
        <HeaderText>
            <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="0" Style="margin-left: -0.5em">
                <MudMenu Icon="@Icons.Material.Outlined.Link" AnchorOrigin="Origin.BottomLeft">
                    @if (Shared.SeasonName is not null)
                    {
                        <MudMenuItem OnClick="@(() => CopyToClipboard(GetCurrentSeasonLatestStandingsLink()))">Latest Standings (@Shared.SeasonName)</MudMenuItem>
                    }
                    <MudMenuItem OnClick="@(() => CopyToClipboard(GetLatestStandingsLink()))">Latest Standings (All seasons)</MudMenuItem>
                </MudMenu>
                <MudText Typo="Typo.h5">Standings</MudText>
            </MudStack>
        </HeaderText>
        <HeaderActions>
            <EventSelect />
        </HeaderActions>
    </LoadingHeader>

    <MudElement HtmlTag="div" Class="mt-3">
        @if (@Bind(vm, x => x.Standings).Count == 0)
        {
            <MudPaper Elevation="5" Class="py-4 px-6">
                <MudText Typo="Typo.h5">No Standings</MudText>
            </MudPaper>
        }
        else
        {
            @if (vm.Standings.Count > 1)
            {
                <MudTabs ActivePanelIndex="@vm.SelectedStandingIndex" ActivePanelIndexChanged="@(SetSelectedStandingIndex)" Elevation="2" MinimumTabWidth="@(Breakpoint is Breakpoint.Xs or Breakpoint.Sm ? "60px" : "160px")">
                    @foreach ((var standing, var i) in @Bind(vm, x => x.Standings).Select((x, i) => (x, i)))
                    {
                        <MudTabPanel Text="@standing.Name">
                            <DisplayStanding class="px-0 mt-2 mb-2 mx-0" Standing="standing" />
                        </MudTabPanel>
                    }
                </MudTabs>
            }
            else
            {
                var standing = vm.Standings.First();
                <DisplayStanding class="px-0 mt-2 mb-2 mx-0" Standing="standing" />
            }
        }
    </MudElement>
</MudContainer>

@code {
    [CascadingParameter]
    public Breakpoint Breakpoint { get; set; }

    private const string standingTabParam = "standingTab";

    protected override void OnInitialized()
    {
        NavigationManager.LocationChanged += OnLocationChanged;
        base.OnInitialized();
    }

    protected override async Task OnEventChangedAsync(EventViewModel? @event)
    {
        if (@event?.EventId != null)
        {
            var standingIndex = NavigationManager.QueryParameter<int>(standingTabParam);
            await vm.LoadFromEventAsync(@event.EventId);

            if (standingIndex >= vm.Standings.Count() || standingIndex < 0)
            {
                standingIndex = 0;
            }
            var navUri = $"/{LeagueName}/Standings/Events/{@event.EventId}?{standingTabParam}={standingIndex}";
            bool replace = NavigationManager.Uri.Contains($"/Events/") == false || NavigationManager.Uri.Contains(navUri);
            NavigationManager.NavigateTo(navUri, replace: replace);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender == false) return;

        vm.SelectedStandingIndex = NavigationManager.QueryParameter<int>(standingTabParam);
    }

    protected override void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        vm.SelectedStandingIndex = NavigationManager.QueryParameter<int>(standingTabParam);
    }

    private void SetSelectedStandingIndex(int index)
    {
        vm.SelectedStandingIndex = index;
        if (index > vm.Standings.Count() || index < 0)
        {
            index = 0; ;
        }
        var uri = NavigationManager.GetUriWithQueryParameter(standingTabParam, index);
        NavigationManager.NavigateTo(uri, replace: true);
    }

    private string GetTabLink(int index)
    {
        var url = NavigationManager.GetUriWithQueryParameter(standingTabParam, index);
        return url;
    }

    protected override void Dispose(bool disposing)
    {
        if (disposing == false)
        {
            NavigationManager.LocationChanged -= OnLocationChanged;
        }
        base.Dispose(disposing);
    }

    private string GetLatestStandingsLink()
    {
        return $"{NavigationManager.BaseUri}{LeagueName}/Results";
    }

    private string GetCurrentSeasonLatestStandingsLink()
    {
        if (Shared.SeasonName == null)
        {
            return GetLatestStandingsLink();
        }
        return $"{NavigationManager.BaseUri}{LeagueName}/Results/Seasons/{Shared.SeasonId}";
    }
}
