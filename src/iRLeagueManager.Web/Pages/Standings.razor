@page "/{LeagueName}/Standings/Events/{EventId:long}"
@page "/{LeagueName}/Standings/Seasons/{SeasonId:long}"
@page "/{LeagueName}/Standings"
@using System.ComponentModel
@using Microsoft.AspNetCore.WebUtilities
@using Microsoft.EntityFrameworkCore.Query
@using Microsoft.Extensions.Primitives
@using System.Linq.Expressions
@using iRLeagueApiCore.Common.Models
@using iRLeagueManager.Web.Components
@using iRLeagueManager.Web.Components.Results
@using iRLeagueManager.Web.Components.Standings
@using iRLeagueManager.Web.ViewModels
@inherits LeagueComponentBase
@inject StandingsPageViewModel vm

<PageTitle>Standings - @LeagueName</PageTitle>

<div class="container-xxl">
    <div class="sticky-header">
        <div class="d-flex align-items-bottom gap-2">
            <LoadingHeader Loading=@Bind(vm, x => x.Loading)>
                <h3>Standings</h3>
            </LoadingHeader>
            <EventSelect class="mb-2" />
        </div>

        @if (@Bind(vm, x => x.Standings)?.Count == 0)
        {
            <div class="card-body">
                <p class="results-scoring"><em>No Standings</em></p>
            </div>
        }
        <ul class="nav nav-tabs">
        @foreach((var standing, var i) in @Bind(vm, x => x.Standings).Select((x, i) => (x,i)))
        {
            <li class="nav-item">
                <NavLink class="nav-link" href="@GetTabLink(i)">@standing.Name</NavLink>
            </li>
        }
        </ul>
    </div>

    @if (@Bind(vm, x => x.SelectedStanding) != null)
    {
        <DisplayStanding class="px-0 mb-2 mx-0" Standing=@Bind(vm, x => x.SelectedStanding)/>
    }
</div>

@code {
    private const string standingTabParam = "standingTab";

    protected override void OnInitialized()
    {
        NavigationManager.LocationChanged += OnLocationChanged;
        base.OnInitialized();
    }

    protected override async Task OnEventChangedAsync(EventViewModel? @event)
    {
        if (@event?.EventId != null)
        {
            var standingIndex = NavigationManager.QueryParameter<int>(standingTabParam);
            await vm.LoadFromEventAsync(@event.EventId);

            if (standingIndex >= vm.Standings.Count() || standingIndex < 0)
            {
                standingIndex = 0;
            }
            var navUri = $"/{LeagueName}/Standings/Events/{@event.EventId}?{standingTabParam}={standingIndex}";
            bool replace = NavigationManager.Uri.Contains($"/Events/") == false || NavigationManager.Uri.Contains(navUri);
            NavigationManager.NavigateTo(navUri, replace: replace);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender == false) return;

        vm.SelectedStandingIndex = NavigationManager.QueryParameter<int>(standingTabParam);
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        vm.SelectedStandingIndex = NavigationManager.QueryParameter<int>(standingTabParam);
    }

    private string GetTabLink(int index)
    {
        var url = NavigationManager.GetUriWithQueryParameter(standingTabParam, index);
        return url;
    }

    protected override void Dispose(bool disposing)
    {
        if (disposing == false)
        {
            NavigationManager.LocationChanged -= OnLocationChanged;
        }
        base.Dispose(disposing);
    }
}
