@page "/{LeagueName}/Standings/Events/{EventId:long}"
@page "/{LeagueName}/Standings/Seasons/{SeasonId:long}"
@page "/{LeagueName}/Standings"
@using System.ComponentModel
@using Microsoft.AspNetCore.WebUtilities
@using Microsoft.EntityFrameworkCore.Query
@using Microsoft.Extensions.Primitives
@using System.Linq.Expressions
@using iRLeagueApiCore.Common.Models
@using iRLeagueManager.Web.Components
@using iRLeagueManager.Web.Components.Results
@using iRLeagueManager.Web.Components.Standings
@using iRLeagueManager.Web.ViewModels
@inherits LeagueComponentBase
@inject StandingsPageViewModel vm

<PageTitle>Standings - @LeagueName</PageTitle>

<MudPaper Elevation="2" Class="pa-0 mb-2">
    <LoadingHeader Loading=@Bind(vm, x => x.Loading)>
        <MudStack>
            <MudText Typo="Typo.h6" Class="mx-6 mt-4">Standings</MudText>
            <MudToolBar Class="gap-2 mb-2" Dense="true">
                <EventSelect/>
            </MudToolBar>
        </MudStack>
    </LoadingHeader>
</MudPaper>

@if (@Bind(vm, x => x.Standings).Count == 0)
{
    <MudPaper Elevation="1">
        <MudText Typo="Typo.h5" Class="ma-2 ml-6">No Standings</MudText>
    </MudPaper>
}
else
{
    @if (vm.Standings.Count > 1)
    {
        <MudTabs @bind-ActivePanelIndex="@vm.SelectedStandingIndex" Elevation="2">
            @foreach ((var standing, var i) in @Bind(vm, x => x.Standings).Select((x, i) => (x, i)))
            {
                <MudTabPanel Text="@standing.Name">
                    <MudPaper Elevation="4" Class="mt-2">
                        <DisplayStanding class="px-0 mb-2 mx-0" Standing="standing" />
                    </MudPaper>
                </MudTabPanel>
            }
        </MudTabs>
    }
    else
    {
        var standing = vm.Standings.First();
        <DisplayStanding class="px-0 mb-2 mx-0" Standing="standing" />
    }
}

@code {
    private const string standingTabParam = "standingTab";

    protected override void OnInitialized()
    {
        NavigationManager.LocationChanged += OnLocationChanged;
        base.OnInitialized();
    }

    protected override async Task OnEventChangedAsync(EventViewModel? @event)
    {
        if (@event?.EventId != null)
        {
            var standingIndex = NavigationManager.QueryParameter<int>(standingTabParam);
            await vm.LoadFromEventAsync(@event.EventId);

            if (standingIndex >= vm.Standings.Count() || standingIndex < 0)
            {
                standingIndex = 0;
            }
            var navUri = $"/{LeagueName}/Standings/Events/{@event.EventId}?{standingTabParam}={standingIndex}";
            bool replace = NavigationManager.Uri.Contains($"/Events/") == false || NavigationManager.Uri.Contains(navUri);
            NavigationManager.NavigateTo(navUri, replace: replace);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender == false) return;

        vm.SelectedStandingIndex = NavigationManager.QueryParameter<int>(standingTabParam);
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        vm.SelectedStandingIndex = NavigationManager.QueryParameter<int>(standingTabParam);
    }

    private string GetTabLink(int index)
    {
        var url = NavigationManager.GetUriWithQueryParameter(standingTabParam, index);
        return url;
    }

    protected override void Dispose(bool disposing)
    {
        if (disposing == false)
        {
            NavigationManager.LocationChanged -= OnLocationChanged;
        }
        base.Dispose(disposing);
    }
}
