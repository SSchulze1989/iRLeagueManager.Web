@using System.ComponentModel

<div class="pt-5 pb-2">
    <div class="row">
        <div class="col-sm-6 d-flex justify-content-center">
            <button class="btn btn-primary" disabled="@ModelState?.Loading">
                @if (@ModelState?.Loading == true)
                {
                    <span class="spinner-border spinner-border-sm mr-1"></span>
                }
                @SubmitText
            </button>
        </div>
        <div class="col-sm-6 d-flex justify-content-center">
            <div class="btn btn-secondary" @onclick="Cancel">@CancelText</div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public string SubmitText { get; set; } = "Submit";
    [Parameter]
    public string CancelText { get; set; } = "Cancel";
    [Parameter]
    public EventCallback OnCancel { get; set; }

    private IModelState? modelState;
    [Parameter]
    public IModelState? ModelState 
    {
        get => modelState;
        set
        {
            if (modelState != null)
            {
                modelState.PropertyChanged -= ModelState_PropertyChanged;
            }
            modelState = value;
            if (modelState != null)
            {
                modelState.PropertyChanged += ModelState_PropertyChanged;
            }
        }
    }

    private void ModelState_PropertyChanged(object? sender, PropertyChangedEventArgs e)
    {
        switch (e.PropertyName)
        {
            case nameof(IModelState.Loading):
            case nameof(IModelState.Saving):
            case nameof(IModelState.HasChanged):
                StateHasChanged();
                break;
            default:
                break;
        }
    }

    private async Task Cancel()
    {
        await OnCancel.InvokeAsync();
    }
}