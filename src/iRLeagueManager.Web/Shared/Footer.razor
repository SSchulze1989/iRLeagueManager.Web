@using Blazored.LocalStorage;
@using System.Text.Json;
@implements IDisposable
@inject SharedStateService SharedState
@inject ILocalStorageService LocalStorage
@inject IDialogService DialogService

<MudElement HtmlTag="footer">
    <MudPaper Elevation="0" Class="px-4 py-0">
        <MudGrid Spacing="2" Justify="Justify.Center" Class="ma-0 pa-0">
            <MudItem>
                <MudText>&copy; 2022-2023 Simon Schulze</MudText>
            </MudItem>
            <MudItem>
                <MudLink OnClick=OnCookieBannerClick title="Cookie Policy">Cookies</MudLink>
            </MudItem>
            <MudItem>
                <MudLink Href="privacy" title="Privacy Polic">Privacy</MudLink>
            </MudItem>
            <MudItem>
                <MudLink Href="terms" title="Terms and Conditions">Terms</MudLink>
            </MudItem>
            <MudItem>
                <MudLink Href="mailto:simon@irleaguemanager.net" title="Mail to: simon@irleaguemanager.net">Contact</MudLink>
            </MudItem>
            <MudItem>
                <MudText>Tz: @TimeZone.Id</MudText>
            </MudItem>
        </MudGrid>
    </MudPaper>
</MudElement>

@code {
    private TimeZoneInfo TimeZone { get; set; } = TimeZoneInfo.Local;
    private const string cookieSettingsKey = "allowEssentialCookies";
    private DateTime cookiePolicyValidFrom = new DateTime(2023, 01, 28);

    protected override void OnInitialized()
    {
        SharedState.StateChanged += OnSharedStateChanged;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender == false)
        {
            return;
        }

        // Wait a short moment before checking cookie settings to prevent flickering of banner on first load
        await Task.Delay(200);
        // Check if cookie settings are already stored
        if (await CheckCookieSettings() == false && await OnCookieBannerClick())
        {
            await AllowEssentialCookies();
        }
    }

    private void OnSharedStateChanged(object? sender, EventArgs e)
    {
        TimeZone = SharedState.LocalTimeZone;
        _ = InvokeAsync(StateHasChanged);
    }

    private async Task AllowEssentialCookies()
    {
        await LocalStorage.SetItemAsync(cookieSettingsKey, DateTime.UtcNow);
    }

    private async Task<bool> CheckCookieSettings()
    {
        try 
        {
            var userCookiePolicyValidFrom = await LocalStorage.GetItemAsync<DateTime>(cookieSettingsKey);
            return userCookiePolicyValidFrom >= cookiePolicyValidFrom;
        }
        catch (JsonException)
        {
            await LocalStorage.RemoveItemAsync(cookieSettingsKey);
        }
        return false;
    }

    private async Task<bool> OnCookieBannerClick()
    {
        var options = new DialogOptions()
        {
            BackdropClick= false,
            NoHeader = true,
        };
        var result = await DialogService.Show<CookieBannerModal>("", options).Result;
        return result?.Canceled == false;
    }

    public virtual void Dispose()
    {
        SharedState.StateChanged -= OnSharedStateChanged;
    }
}
