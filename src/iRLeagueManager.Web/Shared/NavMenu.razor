@using System.ComponentModel;
@using iRLeagueApiCore.Client.Http;
@using iRLeagueApiCore.Common.Models;
@inherits LeagueComponentBase
@inject LeaguesViewModel Vm

<MudNavMenu>
    <MudNavGroup Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.House" Href=@GetLeagueLink("") Title="@DisplayLeague.GetLeagueName(Shared.LeagueInfo, "Select League")">
        @foreach(var league in Vm.Leagues)
        {
            <MudNavLink Icon="@Icons.Material.Filled.Person" OnClick="@(() => ForceNavigateTo($"/{league.LeagueName}", fullReload: true))" Style="cursor: pointer"><DisplayLeague League="league.GetModel()"/></MudNavLink>
        }
    </MudNavGroup>
    @if (Shared.LeagueInfo is not null)
    {
        <MudNavGroup Title="@Shared.SeasonName" Expanded="@SeasonExpanded">
            @foreach(var season in Shared.SeasonList)
            {
                <MudNavLink OnClick="@(() => OnSeasonChanged(season))">@season.SeasonName</MudNavLink>
            }
        </MudNavGroup>
        <AuthorizeView Roles="@GetRoleString(LeagueRoles.Admin, LeagueRoles.Organizer)">
            <Authorized>
                @if (SectionSelected == MenuSection.Settings)
                {
                    <MudNavGroup Title="Settings" Icon="@Icons.Material.Filled.Settings" Expanded="true">
                        <MudNavLink Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.AdminPanelSettings" Href="@GetLeagueLink("settings/league")">League</MudNavLink>
                        <MudNavLink Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.Person" Href="@GetLeagueLink("settings/users")">Users</MudNavLink>
                        <MudNavLink Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.Calculate" Href="@GetLeagueLink("settings/results")">Results</MudNavLink>
                        <MudNavLink Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.Groups" Href="@GetLeagueLink("settings/teams")">Teams</MudNavLink>
                        <MudNavLink Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.LocalPolice" Href="@GetLeagueLink("settings/reviews")">Reviews</MudNavLink>
                    </MudNavGroup>   
                }
                else
                {
                    <MudNavLink Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.Settings" Href="@GetLeagueLink("settings")">Settings</MudNavLink>
                }
            </Authorized>
        </AuthorizeView>
        @if (SectionSelected == MenuSection.Results)
        {
            <MudNavGroup Title="Results" Icon="@Icons.Material.Filled.TableChart" Expanded=true>
                @foreach(var resultEvent in EventList.EventList)
                {
                    <MudNavLink Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.CalendarViewDay" Href="@GetLeagueLink($"results/events/{resultEvent.EventId}")">
                        @resultEvent.Name: @resultEvent.Date.ToShortDateString()
                    </MudNavLink>
                }
            </MudNavGroup>
        }
        else
        {
            <MudNavLink Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.TableChart" Href=@GetLeagueLink("results")>Results</MudNavLink>
        }
        <MudNavLink Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.CalendarMonth" Href=@GetLeagueLink("schedules")>Schedule</MudNavLink>
        <MudNavLink Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.CalendarMonth" Href=@GetLeagueLink("reviews")>Reviews</MudNavLink>
    }
</MudNavMenu>

@code
{
    private bool SeasonExpanded { get; set; } = false;
    private bool SettingsRouteMatched => NavigationManager.Uri.Contains($"{Shared.LeagueName}/settings", StringComparison.OrdinalIgnoreCase);
    private MenuSection SectionSelected { get; set; } = MenuSection.None;

    private enum MenuSection
    {
        None = 0,
        Settings,
        Results,
        Reviews,
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender == false)
        {
            return;
        }
        if (Vm.Leagues.Count > 0)
        {
            return;
        }
        try
        {
            await Vm.OnAfterRenderAsync(firstRender);
        }
        catch (ApiServiceUnavailableException)
        {
        }
    }

    protected override void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        var newSection = GetSectionFromLocation(e.Location);
        if (SectionSelected != newSection)
        {
            SectionSelected = newSection;
            InvokeAsync(StateHasChanged);
        }
    }

    private MenuSection GetSectionFromLocation(string location)
    {
        if (location.Contains("settings", StringComparison.OrdinalIgnoreCase))
        {
            return MenuSection.Settings;
        }
        if (location.Contains("results", StringComparison.OrdinalIgnoreCase))
        {
            return MenuSection.Results;
        }
        if (location.Contains("reviews", StringComparison.OrdinalIgnoreCase))
        {
            return MenuSection.Reviews;
        }
        return MenuSection.None;
    }

    private string GetLeagueLink(string href)
    {
        return $"./{Shared.LeagueName}/{href}";
    }

    private async Task OnSeasonChanged(SeasonModel? season)
    {
        if (Shared.LeagueName == null || season is null)
        {
            return;
        }
        await ApiService.SetCurrentSeasonAsync(Shared.LeagueName, season.SeasonId);

        if (NavigationManager.Uri.Contains($"{Shared.LeagueName}/Results"))
        {
            ForceNavigateTo($"{Shared.LeagueName}/Results");
        }
        if (NavigationManager.Uri.Contains($"{Shared.LeagueName}/Schedules"))
        {
            ForceNavigateTo($"{Shared.LeagueName}/Schedules");
        }
        if (NavigationManager.Uri.Contains($"{Shared.LeagueName}/Standings"))
        {
            ForceNavigateTo($"{Shared.LeagueName}/Standings");
        }
        if (NavigationManager.Uri.Contains($"{Shared.LeagueName}/Reviews"))
        {
            ForceNavigateTo($"{Shared.LeagueName}/Reviews");
        }
        SeasonExpanded = false;

        await InvokeAsync(StateHasChanged);
    }
}